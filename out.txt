[<postion object : 0, 4>	int	 'int' ]
[<postion object : 0, 8>	id	 'func' ]
[<postion object : 0, 9>	(	 '(' ]
[<postion object : 0, 13>	int	 'int' ]
[<postion object : 0, 14>	id	 'a' ]
[<postion object : 0, 15>	,	 ',' ]
[<postion object : 0, 20>	int	 'int' ]
[<postion object : 0, 21>	id	 'b' ]
[<postion object : 0, 22>	)	 ')' ]
[<postion object : 0, 23>	{	 '{' ]
[<postion object : 1, 8>	int	 'int' ]
[<postion object : 1, 13>	id	 'tmp1' ]
[<postion object : 1, 14>	=	 '=' ]
[<postion object : 1, 17>	id	 'a' ]
[<postion object : 1, 18>	+	 '+' ]
[<postion object : 1, 20>	id	 'b' ]
[<postion object : 1, 21>	;	 ';' ]
[<postion object : 2, 8>	int	 'int' ]
[<postion object : 2, 13>	id	 'tmp2' ]
[<postion object : 2, 14>	=	 '=' ]
[<postion object : 2, 20>	id	 'tmp1' ]
[<postion object : 2, 21>	+	 '+' ]
[<postion object : 2, 23>	NUM	 '1' ]
[<postion object : 2, 24>	;	 ';' ]
[<postion object : 3, 1>	}	 '}' ]
[<postion object : 3, 3>	wrong	 '' ]


文法及分析表: Gammar:
{[loop_control_sentence -> type_declare_sentence],
 [F1 -> -=],
 [E5 -> E6],
 [go_sentence -> BREAK ;],
 [F2 -> or],
 [sentence -> go_sentence],
 [sentence -> expression_sentence],
 [E8 -> E8 F8 E9],
 [complex_sentence -> { sentence_list }],
 [F8 -> *],
 [E1 -> E1 F1 E_dot_exp],
 [go_sentence -> RETURN ;],
 [F9_2 -> -],
 [E2 -> E2 F2 E3],
 [E7 -> E7 F7 E8],
 [initialize -> = E1],
 [E7 -> E8],
 [parameter -> type_statement id],
 [F9_1 -> --],
 [F1 -> <<=],
 [E9 -> F9_1 E10],
 [F8 -> %],
 [F_dot_exp -> ,],
 [F1 -> +=],
 [F6 -> <<],
 [if_sentence -> if ( E1 ) state],
 [F9_1 -> ++],
 [F6 -> >>],
 [sentence -> if_sentence],
 [go_sentence -> RETURN expression ;],
 [for_sentence -> for ( loop_control_sentence ) sentence],
 [sentence -> complex_sentence],
 [list -> parameter],
 [F7 -> +],
 [state -> sentence],
 [type_statement -> boolen],
 [E2 -> E3],
 [E8 -> E9],
 [E10 -> E10 [ E10 ]],
 [F4 -> ==],
 [E -> NUM],
 [F1 -> %=],
 [F5 -> <=],
 [E4 -> E4 F4 E5],
 [F1 -> >>=],
 [E6 -> E6 F6 E7],
 [initialize -> e_],
 [F1 -> *=],
 [F5 -> >],
 [sentence_list -> sentence sentence_list],
 [sentence -> for_sentence],
 [E_dot_exp -> E2],
 [while_sentence -> while ( expression ) state],
 [E1 -> E_dot_exp],
 [id_list -> id],
 [E -> STR],
 [E -> ( E1 )],
 [expression_sentence -> E1 ;],
 [E9 -> E10],
 [E10 -> E],
 [for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence],
 [sentence_list -> sentence],
 [type_statement -> char],
 [sentence -> while_sentence],
 [F7 -> -],
 [F9_2 -> *],
 [func_define -> type_statement id ( list ) complex_sentence],
 [if_sentence -> if ( E1 ) state else state],
 [F8 -> /],
 [E5 -> E5 F5 E6],
 [type_statement -> void],
 [E4 -> E5],
 [F1 -> =],
 [F9_2 -> &],
 [E3 -> E3 F3 E4],
 [type_statement -> float],
 [F4 -> !=],
 [state -> complex_sentence],
 [F5 -> <],
 [type_declare_sentence -> type_statement id_list initialize ;],
 [loop_control_sentence -> expression_sentence],
 [type_statement -> int],
 [id_list -> id , id_list],
 [sentence -> func_declare],
 [E_dot_exp -> E_dot_exp F_dot_exp E2],
 [sentence_list -> e_],
 [sentence -> func_define],
 [sentence -> type_declare_sentence],
 [E3 -> E4],
 [list -> list , parameter],
 [F5 -> >=],
 [S_ -> S],
 [E -> id ( E1 )],
 [F3 -> and],
 [E6 -> E7],
 [parameter -> type_statement],
 [E9 -> E10 F9_1],
 [E -> id],
 [F1 -> /=],
 [S -> sentence_list],
 [go_sentence -> CONTINUE ;],
 [E9 -> F9_2 E10]}

ACTION TABEL:
[{RETURN: <S,19>, STR: <S,23>, if: <S,33>, BREAK: <S,35>, int: <S,9>, $: <R,[sentence_list -> ]>, }: <R,[sentence_list -> ]>, --: <S,30>, &: <S,28>, boolen: <S,31>, while: <S,22>, {: <S,16>, for: <S,2>, char: <S,37>, func_declare: <S,36>, -: <S,3>, CONTINUE: <S,11>, id: <S,12>, NUM: <S,40>, (: <S,17>, void: <S,45>, float: <S,38>, ++: <S,39>, *: <S,41>}, {for: <R,[sentence -> go_sentence]>, -: <R,[sentence -> go_sentence]>, int: <R,[sentence -> go_sentence]>, CONTINUE: <R,[sentence -> go_sentence]>, id: <R,[sentence -> go_sentence]>, {: <R,[sentence -> go_sentence]>, (: <R,[sentence -> go_sentence]>, RETURN: <R,[sentence -> go_sentence]>, while: <R,[sentence -> go_sentence]>, STR: <R,[sentence -> go_sentence]>, }: <R,[sentence -> go_sentence]>, &: <R,[sentence -> go_sentence]>, --: <R,[sentence -> go_sentence]>, boolen: <R,[sentence -> go_sentence]>, BREAK: <R,[sentence -> go_sentence]>, if: <R,[sentence -> go_sentence]>, func_declare: <R,[sentence -> go_sentence]>, float: <R,[sentence -> go_sentence]>, char: <R,[sentence -> go_sentence]>, ++: <R,[sentence -> go_sentence]>, NUM: <R,[sentence -> go_sentence]>, *: <R,[sentence -> go_sentence]>, else: <R,[sentence -> go_sentence]>, void: <R,[sentence -> go_sentence]>, $: <R,[sentence -> go_sentence]>}, {(: <S,49>}, {STR: <R,[F9_2 -> -]>, NUM: <R,[F9_2 -> -]>, id: <R,[F9_2 -> -]>, (: <R,[F9_2 -> -]>}, {*: <S,53>, /: <S,50>, %: <S,52>, -: <R,[E7 -> E8]>, /=: <R,[E7 -> E8]>, >=: <R,[E7 -> E8]>, and: <R,[E7 -> E8]>, <<=: <R,[E7 -> E8]>, +: <R,[E7 -> E8]>, >>=: <R,[E7 -> E8]>, -=: <R,[E7 -> E8]>, ;: <R,[E7 -> E8]>, or: <R,[E7 -> E8]>, =: <R,[E7 -> E8]>, <: <R,[E7 -> E8]>, *=: <R,[E7 -> E8]>, <<: <R,[E7 -> E8]>, >>: <R,[E7 -> E8]>, %=: <R,[E7 -> E8]>, !=: <R,[E7 -> E8]>, ==: <R,[E7 -> E8]>, ): <R,[E7 -> E8]>, ,: <R,[E7 -> E8]>, >: <R,[E7 -> E8]>, +=: <R,[E7 -> E8]>, <=: <R,[E7 -> E8]>}, {id: <S,54>}, {,: <S,56>, /=: <R,[E1 -> E_dot_exp]>, ): <R,[E1 -> E_dot_exp]>, -=: <R,[E1 -> E_dot_exp]>, ;: <R,[E1 -> E_dot_exp]>, +=: <R,[E1 -> E_dot_exp]>, %=: <R,[E1 -> E_dot_exp]>, <<=: <R,[E1 -> E_dot_exp]>, =: <R,[E1 -> E_dot_exp]>, *=: <R,[E1 -> E_dot_exp]>, >>=: <R,[E1 -> E_dot_exp]>}, {$: <R,[S -> sentence_list]>}, {/: <R,[E8 -> E9]>, -: <R,[E8 -> E9]>, /=: <R,[E8 -> E9]>, %: <R,[E8 -> E9]>, >=: <R,[E8 -> E9]>, and: <R,[E8 -> E9]>, <<=: <R,[E8 -> E9]>, +: <R,[E8 -> E9]>, >>=: <R,[E8 -> E9]>, -=: <R,[E8 -> E9]>, ;: <R,[E8 -> E9]>, or: <R,[E8 -> E9]>, =: <R,[E8 -> E9]>, <: <R,[E8 -> E9]>, *=: <R,[E8 -> E9]>, <<: <R,[E8 -> E9]>, >>: <R,[E8 -> E9]>, %=: <R,[E8 -> E9]>, *: <R,[E8 -> E9]>, !=: <R,[E8 -> E9]>, ==: <R,[E8 -> E9]>, ): <R,[E8 -> E9]>, ,: <R,[E8 -> E9]>, >: <R,[E8 -> E9]>, +=: <R,[E8 -> E9]>, <=: <R,[E8 -> E9]>}, {id: <R,[type_statement -> int]>, ): <R,[type_statement -> int]>, ,: <R,[type_statement -> int]>}, {for: <R,[sentence -> if_sentence]>, -: <R,[sentence -> if_sentence]>, int: <R,[sentence -> if_sentence]>, CONTINUE: <R,[sentence -> if_sentence]>, id: <R,[sentence -> if_sentence]>, {: <R,[sentence -> if_sentence]>, (: <R,[sentence -> if_sentence]>, RETURN: <R,[sentence -> if_sentence]>, while: <R,[sentence -> if_sentence]>, STR: <R,[sentence -> if_sentence]>, }: <R,[sentence -> if_sentence]>, &: <R,[sentence -> if_sentence]>, --: <R,[sentence -> if_sentence]>, boolen: <R,[sentence -> if_sentence]>, BREAK: <R,[sentence -> if_sentence]>, if: <R,[sentence -> if_sentence]>, func_declare: <R,[sentence -> if_sentence]>, float: <R,[sentence -> if_sentence]>, char: <R,[sentence -> if_sentence]>, ++: <R,[sentence -> if_sentence]>, NUM: <R,[sentence -> if_sentence]>, *: <R,[sentence -> if_sentence]>, else: <R,[sentence -> if_sentence]>, void: <R,[sentence -> if_sentence]>, $: <R,[sentence -> if_sentence]>}, {;: <S,58>}, {(: <S,59>, /: <R,[E -> id]>, -: <R,[E -> id]>, /=: <R,[E -> id]>, %: <R,[E -> id]>, >=: <R,[E -> id]>, and: <R,[E -> id]>, <<=: <R,[E -> id]>, +: <R,[E -> id]>, >>=: <R,[E -> id]>, -=: <R,[E -> id]>, ;: <R,[E -> id]>, or: <R,[E -> id]>, <: <R,[E -> id]>, =: <R,[E -> id]>, --: <R,[E -> id]>, ]: <R,[E -> id]>, *=: <R,[E -> id]>, <<: <R,[E -> id]>, >>: <R,[E -> id]>, ++: <R,[E -> id]>, %=: <R,[E -> id]>, *: <R,[E -> id]>, !=: <R,[E -> id]>, ==: <R,[E -> id]>, [: <R,[E -> id]>, ): <R,[E -> id]>, ,: <R,[E -> id]>, >: <R,[E -> id]>, +=: <R,[E -> id]>, <=: <R,[E -> id]>}, {STR: <S,23>, id: <S,12>, NUM: <S,40>, (: <S,17>}, {for: <R,[sentence -> func_define]>, -: <R,[sentence -> func_define]>, int: <R,[sentence -> func_define]>, CONTINUE: <R,[sentence -> func_define]>, id: <R,[sentence -> func_define]>, {: <R,[sentence -> func_define]>, (: <R,[sentence -> func_define]>, RETURN: <R,[sentence -> func_define]>, while: <R,[sentence -> func_define]>, STR: <R,[sentence -> func_define]>, }: <R,[sentence -> func_define]>, &: <R,[sentence -> func_define]>, --: <R,[sentence -> func_define]>, boolen: <R,[sentence -> func_define]>, BREAK: <R,[sentence -> func_define]>, if: <R,[sentence -> func_define]>, func_declare: <R,[sentence -> func_define]>, float: <R,[sentence -> func_define]>, char: <R,[sentence -> func_define]>, ++: <R,[sentence -> func_define]>, NUM: <R,[sentence -> func_define]>, *: <R,[sentence -> func_define]>, else: <R,[sentence -> func_define]>, void: <R,[sentence -> func_define]>, $: <R,[sentence -> func_define]>}, {*=: <S,69>, +=: <S,64>, /=: <S,61>, -=: <S,62>, <<=: <S,65>, =: <S,68>, ;: <S,63>, >>=: <S,70>, %=: <S,67>}, {RETURN: <S,19>, STR: <S,23>, if: <S,33>, BREAK: <S,35>, int: <S,9>, $: <R,[sentence_list -> ]>, }: <R,[sentence_list -> ]>, --: <S,30>, &: <S,28>, boolen: <S,31>, while: <S,22>, {: <S,16>, for: <S,2>, char: <S,37>, func_declare: <S,36>, -: <S,3>, CONTINUE: <S,11>, id: <S,12>, NUM: <S,40>, (: <S,17>, void: <S,45>, float: <S,38>, ++: <S,39>, *: <S,41>}, {STR: <S,23>, &: <S,28>, --: <S,30>, NUM: <S,40>, -: <S,3>, id: <S,12>, (: <S,17>, ++: <S,39>, *: <S,41>}, {==: <S,73>, !=: <S,75>, /=: <R,[E3 -> E4]>, and: <R,[E3 -> E4]>, %=: <R,[E3 -> E4]>, <<=: <R,[E3 -> E4]>, >>=: <R,[E3 -> E4]>, ): <R,[E3 -> E4]>, ,: <R,[E3 -> E4]>, -=: <R,[E3 -> E4]>, ;: <R,[E3 -> E4]>, +=: <R,[E3 -> E4]>, or: <R,[E3 -> E4]>, =: <R,[E3 -> E4]>, *=: <R,[E3 -> E4]>}, {;: <S,77>, expression: <S,76>}, {and: <S,79>, /=: <R,[E2 -> E3]>, %=: <R,[E2 -> E3]>, <<=: <R,[E2 -> E3]>, >>=: <R,[E2 -> E3]>, ): <R,[E2 -> E3]>, ,: <R,[E2 -> E3]>, -=: <R,[E2 -> E3]>, ;: <R,[E2 -> E3]>, +=: <R,[E2 -> E3]>, or: <R,[E2 -> E3]>, =: <R,[E2 -> E3]>, *=: <R,[E2 -> E3]>}, {RETURN: <S,19>, STR: <S,23>, if: <S,33>, BREAK: <S,35>, $: <R,[sentence_list -> ]>, }: <R,[sentence_list -> ]>, int: <S,9>, --: <S,30>, &: <S,28>, boolen: <S,31>, while: <S,22>, {: <S,16>, for: <S,2>, char: <S,37>, func_declare: <S,36>, -: <S,3>, CONTINUE: <S,11>, id: <S,12>, NUM: <S,40>, (: <S,17>, void: <S,45>, float: <S,38>, ++: <S,39>, *: <S,41>}, {(: <S,81>}, {/: <R,[E -> STR]>, -: <R,[E -> STR]>, /=: <R,[E -> STR]>, %: <R,[E -> STR]>, >=: <R,[E -> STR]>, and: <R,[E -> STR]>, <<=: <R,[E -> STR]>, +: <R,[E -> STR]>, >>=: <R,[E -> STR]>, -=: <R,[E -> STR]>, ;: <R,[E -> STR]>, or: <R,[E -> STR]>, <: <R,[E -> STR]>, =: <R,[E -> STR]>, --: <R,[E -> STR]>, ]: <R,[E -> STR]>, *=: <R,[E -> STR]>, <<: <R,[E -> STR]>, >>: <R,[E -> STR]>, ++: <R,[E -> STR]>, %=: <R,[E -> STR]>, *: <R,[E -> STR]>, !=: <R,[E -> STR]>, ==: <R,[E -> STR]>, [: <R,[E -> STR]>, ): <R,[E -> STR]>, ,: <R,[E -> STR]>, >: <R,[E -> STR]>, +=: <R,[E -> STR]>, <=: <R,[E -> STR]>}, {+: <S,84>, -: <S,82>, /=: <R,[E6 -> E7]>, >=: <R,[E6 -> E7]>, and: <R,[E6 -> E7]>, <<=: <R,[E6 -> E7]>, >>=: <R,[E6 -> E7]>, -=: <R,[E6 -> E7]>, ;: <R,[E6 -> E7]>, or: <R,[E6 -> E7]>, =: <R,[E6 -> E7]>, <: <R,[E6 -> E7]>, *=: <R,[E6 -> E7]>, >>: <R,[E6 -> E7]>, <<: <R,[E6 -> E7]>, %=: <R,[E6 -> E7]>, !=: <R,[E6 -> E7]>, ==: <R,[E6 -> E7]>, ): <R,[E6 -> E7]>, ,: <R,[E6 -> E7]>, >: <R,[E6 -> E7]>, +=: <R,[E6 -> E7]>, <=: <R,[E6 -> E7]>}, {<<: <S,87>, >>: <S,86>, /=: <R,[E5 -> E6]>, >=: <R,[E5 -> E6]>, and: <R,[E5 -> E6]>, %=: <R,[E5 -> E6]>, <<=: <R,[E5 -> E6]>, !=: <R,[E5 -> E6]>, >>=: <R,[E5 -> E6]>, ==: <R,[E5 -> E6]>, ): <R,[E5 -> E6]>, ,: <R,[E5 -> E6]>, -=: <R,[E5 -> E6]>, >: <R,[E5 -> E6]>, ;: <R,[E5 -> E6]>, +=: <R,[E5 -> E6]>, =: <R,[E5 -> E6]>, or: <R,[E5 -> E6]>, <=: <R,[E5 -> E6]>, <: <R,[E5 -> E6]>, *=: <R,[E5 -> E6]>}, {$: <ACC,-1>}, {STR: <S,23>, id: <S,12>, NUM: <S,40>, (: <S,17>}, {STR: <R,[F9_2 -> &]>, NUM: <R,[F9_2 -> &]>, id: <R,[F9_2 -> &]>, (: <R,[F9_2 -> &]>}, {for: <R,[sentence -> complex_sentence]>, -: <R,[sentence -> complex_sentence]>, int: <R,[sentence -> complex_sentence]>, CONTINUE: <R,[sentence -> complex_sentence]>, id: <R,[sentence -> complex_sentence]>, {: <R,[sentence -> complex_sentence]>, (: <R,[sentence -> complex_sentence]>, RETURN: <R,[sentence -> complex_sentence]>, while: <R,[sentence -> complex_sentence]>, STR: <R,[sentence -> complex_sentence]>, }: <R,[sentence -> complex_sentence]>, &: <R,[sentence -> complex_sentence]>, --: <R,[sentence -> complex_sentence]>, boolen: <R,[sentence -> complex_sentence]>, BREAK: <R,[sentence -> complex_sentence]>, if: <R,[sentence -> complex_sentence]>, func_declare: <R,[sentence -> complex_sentence]>, float: <R,[sentence -> complex_sentence]>, char: <R,[sentence -> complex_sentence]>, ++: <R,[sentence -> complex_sentence]>, NUM: <R,[sentence -> complex_sentence]>, *: <R,[sentence -> complex_sentence]>, else: <R,[sentence -> complex_sentence]>, void: <R,[sentence -> complex_sentence]>, $: <R,[sentence -> complex_sentence]>}, {/: <R,[F9_1 -> --]>, -: <R,[F9_1 -> --]>, /=: <R,[F9_1 -> --]>, %: <R,[F9_1 -> --]>, >=: <R,[F9_1 -> --]>, and: <R,[F9_1 -> --]>, id: <R,[F9_1 -> --]>, <<=: <R,[F9_1 -> --]>, +: <R,[F9_1 -> --]>, (: <R,[F9_1 -> --]>, >>=: <R,[F9_1 -> --]>, -=: <R,[F9_1 -> --]>, ;: <R,[F9_1 -> --]>, STR: <R,[F9_1 -> --]>, or: <R,[F9_1 -> --]>, <: <R,[F9_1 -> --]>, =: <R,[F9_1 -> --]>, *=: <R,[F9_1 -> --]>, <<: <R,[F9_1 -> --]>, >>: <R,[F9_1 -> --]>, NUM: <R,[F9_1 -> --]>, %=: <R,[F9_1 -> --]>, *: <R,[F9_1 -> --]>, !=: <R,[F9_1 -> --]>, ==: <R,[F9_1 -> --]>, ): <R,[F9_1 -> --]>, ,: <R,[F9_1 -> --]>, >: <R,[F9_1 -> --]>, +=: <R,[F9_1 -> --]>, <=: <R,[F9_1 -> --]>}, {id: <R,[type_statement -> boolen]>, ): <R,[type_statement -> boolen]>, ,: <R,[type_statement -> boolen]>}, {for: <R,[sentence -> type_declare_sentence]>, -: <R,[sentence -> type_declare_sentence]>, int: <R,[sentence -> type_declare_sentence]>, CONTINUE: <R,[sentence -> type_declare_sentence]>, id: <R,[sentence -> type_declare_sentence]>, {: <R,[sentence -> type_declare_sentence]>, (: <R,[sentence -> type_declare_sentence]>, RETURN: <R,[sentence -> type_declare_sentence]>, while: <R,[sentence -> type_declare_sentence]>, STR: <R,[sentence -> type_declare_sentence]>, }: <R,[sentence -> type_declare_sentence]>, &: <R,[sentence -> type_declare_sentence]>, --: <R,[sentence -> type_declare_sentence]>, boolen: <R,[sentence -> type_declare_sentence]>, BREAK: <R,[sentence -> type_declare_sentence]>, if: <R,[sentence -> type_declare_sentence]>, func_declare: <R,[sentence -> type_declare_sentence]>, float: <R,[sentence -> type_declare_sentence]>, char: <R,[sentence -> type_declare_sentence]>, ++: <R,[sentence -> type_declare_sentence]>, NUM: <R,[sentence -> type_declare_sentence]>, *: <R,[sentence -> type_declare_sentence]>, else: <R,[sentence -> type_declare_sentence]>, void: <R,[sentence -> type_declare_sentence]>, $: <R,[sentence -> type_declare_sentence]>}, {(: <S,89>}, {--: <S,30>, [: <S,90>, /: <R,[E9 -> E10]>, -: <R,[E9 -> E10]>, /=: <R,[E9 -> E10]>, %: <R,[E9 -> E10]>, >=: <R,[E9 -> E10]>, and: <R,[E9 -> E10]>, <<=: <R,[E9 -> E10]>, +: <R,[E9 -> E10]>, >>=: <R,[E9 -> E10]>, -=: <R,[E9 -> E10]>, ;: <R,[E9 -> E10]>, or: <R,[E9 -> E10]>, <: <R,[E9 -> E10]>, =: <R,[E9 -> E10]>, *=: <R,[E9 -> E10]>, <<: <R,[E9 -> E10]>, >>: <R,[E9 -> E10]>, %=: <R,[E9 -> E10]>, *: <R,[E9 -> E10]>, !=: <R,[E9 -> E10]>, ==: <R,[E9 -> E10]>, ): <R,[E9 -> E10]>, ,: <R,[E9 -> E10]>, >: <R,[E9 -> E10]>, +=: <R,[E9 -> E10]>, <=: <R,[E9 -> E10]>, ++: <S,39>}, {;: <S,92>}, {for: <R,[sentence -> func_declare]>, -: <R,[sentence -> func_declare]>, int: <R,[sentence -> func_declare]>, CONTINUE: <R,[sentence -> func_declare]>, id: <R,[sentence -> func_declare]>, {: <R,[sentence -> func_declare]>, (: <R,[sentence -> func_declare]>, RETURN: <R,[sentence -> func_declare]>, while: <R,[sentence -> func_declare]>, STR: <R,[sentence -> func_declare]>, }: <R,[sentence -> func_declare]>, &: <R,[sentence -> func_declare]>, --: <R,[sentence -> func_declare]>, boolen: <R,[sentence -> func_declare]>, BREAK: <R,[sentence -> func_declare]>, if: <R,[sentence -> func_declare]>, func_declare: <R,[sentence -> func_declare]>, float: <R,[sentence -> func_declare]>, char: <R,[sentence -> func_declare]>, ++: <R,[sentence -> func_declare]>, NUM: <R,[sentence -> func_declare]>, *: <R,[sentence -> func_declare]>, else: <R,[sentence -> func_declare]>, void: <R,[sentence -> func_declare]>, $: <R,[sentence -> func_declare]>}, {id: <R,[type_statement -> char]>, ): <R,[type_statement -> char]>, ,: <R,[type_statement -> char]>}, {id: <R,[type_statement -> float]>, ): <R,[type_statement -> float]>, ,: <R,[type_statement -> float]>}, {/: <R,[F9_1 -> ++]>, -: <R,[F9_1 -> ++]>, /=: <R,[F9_1 -> ++]>, %: <R,[F9_1 -> ++]>, >=: <R,[F9_1 -> ++]>, and: <R,[F9_1 -> ++]>, id: <R,[F9_1 -> ++]>, <<=: <R,[F9_1 -> ++]>, +: <R,[F9_1 -> ++]>, (: <R,[F9_1 -> ++]>, >>=: <R,[F9_1 -> ++]>, -=: <R,[F9_1 -> ++]>, ;: <R,[F9_1 -> ++]>, STR: <R,[F9_1 -> ++]>, or: <R,[F9_1 -> ++]>, <: <R,[F9_1 -> ++]>, =: <R,[F9_1 -> ++]>, *=: <R,[F9_1 -> ++]>, <<: <R,[F9_1 -> ++]>, >>: <R,[F9_1 -> ++]>, NUM: <R,[F9_1 -> ++]>, %=: <R,[F9_1 -> ++]>, *: <R,[F9_1 -> ++]>, !=: <R,[F9_1 -> ++]>, ==: <R,[F9_1 -> ++]>, ): <R,[F9_1 -> ++]>, ,: <R,[F9_1 -> ++]>, >: <R,[F9_1 -> ++]>, +=: <R,[F9_1 -> ++]>, <=: <R,[F9_1 -> ++]>}, {/: <R,[E -> NUM]>, -: <R,[E -> NUM]>, /=: <R,[E -> NUM]>, %: <R,[E -> NUM]>, >=: <R,[E -> NUM]>, and: <R,[E -> NUM]>, <<=: <R,[E -> NUM]>, +: <R,[E -> NUM]>, >>=: <R,[E -> NUM]>, -=: <R,[E -> NUM]>, ;: <R,[E -> NUM]>, or: <R,[E -> NUM]>, <: <R,[E -> NUM]>, =: <R,[E -> NUM]>, --: <R,[E -> NUM]>, ]: <R,[E -> NUM]>, *=: <R,[E -> NUM]>, <<: <R,[E -> NUM]>, >>: <R,[E -> NUM]>, ++: <R,[E -> NUM]>, %=: <R,[E -> NUM]>, *: <R,[E -> NUM]>, !=: <R,[E -> NUM]>, ==: <R,[E -> NUM]>, [: <R,[E -> NUM]>, ): <R,[E -> NUM]>, ,: <R,[E -> NUM]>, >: <R,[E -> NUM]>, +=: <R,[E -> NUM]>, <=: <R,[E -> NUM]>}, {STR: <R,[F9_2 -> *]>, NUM: <R,[F9_2 -> *]>, id: <R,[F9_2 -> *]>, (: <R,[F9_2 -> *]>}, {/: <R,[E10 -> E]>, -: <R,[E10 -> E]>, /=: <R,[E10 -> E]>, %: <R,[E10 -> E]>, >=: <R,[E10 -> E]>, and: <R,[E10 -> E]>, <<=: <R,[E10 -> E]>, +: <R,[E10 -> E]>, >>=: <R,[E10 -> E]>, -=: <R,[E10 -> E]>, ;: <R,[E10 -> E]>, or: <R,[E10 -> E]>, <: <R,[E10 -> E]>, =: <R,[E10 -> E]>, --: <R,[E10 -> E]>, ]: <R,[E10 -> E]>, *=: <R,[E10 -> E]>, <<: <R,[E10 -> E]>, >>: <R,[E10 -> E]>, ++: <R,[E10 -> E]>, %=: <R,[E10 -> E]>, *: <R,[E10 -> E]>, !=: <R,[E10 -> E]>, ==: <R,[E10 -> E]>, [: <R,[E10 -> E]>, ): <R,[E10 -> E]>, ,: <R,[E10 -> E]>, >: <R,[E10 -> E]>, +=: <R,[E10 -> E]>, <=: <R,[E10 -> E]>}, {or: <S,94>, /=: <R,[E_dot_exp -> E2]>, %=: <R,[E_dot_exp -> E2]>, <<=: <R,[E_dot_exp -> E2]>, >>=: <R,[E_dot_exp -> E2]>, ): <R,[E_dot_exp -> E2]>, ,: <R,[E_dot_exp -> E2]>, -=: <R,[E_dot_exp -> E2]>, ;: <R,[E_dot_exp -> E2]>, +=: <R,[E_dot_exp -> E2]>, =: <R,[E_dot_exp -> E2]>, *=: <R,[E_dot_exp -> E2]>}, {for: <R,[sentence -> for_sentence]>, -: <R,[sentence -> for_sentence]>, int: <R,[sentence -> for_sentence]>, CONTINUE: <R,[sentence -> for_sentence]>, id: <R,[sentence -> for_sentence]>, {: <R,[sentence -> for_sentence]>, (: <R,[sentence -> for_sentence]>, RETURN: <R,[sentence -> for_sentence]>, while: <R,[sentence -> for_sentence]>, STR: <R,[sentence -> for_sentence]>, }: <R,[sentence -> for_sentence]>, &: <R,[sentence -> for_sentence]>, --: <R,[sentence -> for_sentence]>, boolen: <R,[sentence -> for_sentence]>, BREAK: <R,[sentence -> for_sentence]>, if: <R,[sentence -> for_sentence]>, func_declare: <R,[sentence -> for_sentence]>, float: <R,[sentence -> for_sentence]>, char: <R,[sentence -> for_sentence]>, ++: <R,[sentence -> for_sentence]>, NUM: <R,[sentence -> for_sentence]>, *: <R,[sentence -> for_sentence]>, else: <R,[sentence -> for_sentence]>, void: <R,[sentence -> for_sentence]>, $: <R,[sentence -> for_sentence]>}, {id: <R,[type_statement -> void]>, ): <R,[type_statement -> void]>, ,: <R,[type_statement -> void]>}, {for: <R,[sentence -> while_sentence]>, -: <R,[sentence -> while_sentence]>, int: <R,[sentence -> while_sentence]>, CONTINUE: <R,[sentence -> while_sentence]>, id: <R,[sentence -> while_sentence]>, {: <R,[sentence -> while_sentence]>, (: <R,[sentence -> while_sentence]>, RETURN: <R,[sentence -> while_sentence]>, while: <R,[sentence -> while_sentence]>, STR: <R,[sentence -> while_sentence]>, }: <R,[sentence -> while_sentence]>, &: <R,[sentence -> while_sentence]>, --: <R,[sentence -> while_sentence]>, boolen: <R,[sentence -> while_sentence]>, BREAK: <R,[sentence -> while_sentence]>, if: <R,[sentence -> while_sentence]>, func_declare: <R,[sentence -> while_sentence]>, float: <R,[sentence -> while_sentence]>, char: <R,[sentence -> while_sentence]>, ++: <R,[sentence -> while_sentence]>, NUM: <R,[sentence -> while_sentence]>, *: <R,[sentence -> while_sentence]>, else: <R,[sentence -> while_sentence]>, void: <R,[sentence -> while_sentence]>, $: <R,[sentence -> while_sentence]>}, {<: <S,99>, <=: <S,98>, >: <S,95>, >=: <S,96>, /=: <R,[E4 -> E5]>, and: <R,[E4 -> E5]>, %=: <R,[E4 -> E5]>, <<=: <R,[E4 -> E5]>, !=: <R,[E4 -> E5]>, >>=: <R,[E4 -> E5]>, ==: <R,[E4 -> E5]>, ): <R,[E4 -> E5]>, ,: <R,[E4 -> E5]>, -=: <R,[E4 -> E5]>, ;: <R,[E4 -> E5]>, +=: <R,[E4 -> E5]>, or: <R,[E4 -> E5]>, =: <R,[E4 -> E5]>, *=: <R,[E4 -> E5]>}, {for: <R,[sentence -> expression_sentence]>, -: <R,[sentence -> expression_sentence]>, int: <R,[sentence -> expression_sentence]>, CONTINUE: <R,[sentence -> expression_sentence]>, id: <R,[sentence -> expression_sentence]>, {: <R,[sentence -> expression_sentence]>, (: <R,[sentence -> expression_sentence]>, RETURN: <R,[sentence -> expression_sentence]>, while: <R,[sentence -> expression_sentence]>, STR: <R,[sentence -> expression_sentence]>, }: <R,[sentence -> expression_sentence]>, &: <R,[sentence -> expression_sentence]>, --: <R,[sentence -> expression_sentence]>, boolen: <R,[sentence -> expression_sentence]>, BREAK: <R,[sentence -> expression_sentence]>, if: <R,[sentence -> expression_sentence]>, func_declare: <R,[sentence -> expression_sentence]>, float: <R,[sentence -> expression_sentence]>, char: <R,[sentence -> expression_sentence]>, ++: <R,[sentence -> expression_sentence]>, NUM: <R,[sentence -> expression_sentence]>, *: <R,[sentence -> expression_sentence]>, else: <R,[sentence -> expression_sentence]>, void: <R,[sentence -> expression_sentence]>, $: <R,[sentence -> expression_sentence]>}, {STR: <S,23>, int: <S,9>, &: <S,28>, boolen: <S,31>, --: <S,30>, NUM: <S,40>, char: <S,37>, -: <S,3>, id: <S,12>, (: <S,17>, void: <S,45>, float: <S,38>, ++: <S,39>, *: <S,41>}, {-: <R,[F8 -> /]>, STR: <R,[F8 -> /]>, ++: <R,[F8 -> /]>, NUM: <R,[F8 -> /]>, id: <R,[F8 -> /]>, *: <R,[F8 -> /]>, &: <R,[F8 -> /]>, --: <R,[F8 -> /]>, (: <R,[F8 -> /]>}, {STR: <S,23>, id: <S,12>, --: <S,30>, NUM: <S,40>, -: <S,3>, (: <S,17>, &: <S,28>, ++: <S,39>, *: <S,41>}, {-: <R,[F8 -> %]>, STR: <R,[F8 -> %]>, ++: <R,[F8 -> %]>, NUM: <R,[F8 -> %]>, id: <R,[F8 -> %]>, *: <R,[F8 -> %]>, &: <R,[F8 -> %]>, --: <R,[F8 -> %]>, (: <R,[F8 -> %]>}, {-: <R,[F8 -> *]>, STR: <R,[F8 -> *]>, ++: <R,[F8 -> *]>, NUM: <R,[F8 -> *]>, id: <R,[F8 -> *]>, *: <R,[F8 -> *]>, &: <R,[F8 -> *]>, --: <R,[F8 -> *]>, (: <R,[F8 -> *]>}, {(: <S,106>, ,: <S,105>, =: <R,[id_list -> id]>, ;: <R,[id_list -> id]>}, {=: <S,108>, ;: <R,[initialize -> ]>}, {-: <R,[F_dot_exp -> ,]>, STR: <R,[F_dot_exp -> ,]>, ++: <R,[F_dot_exp -> ,]>, NUM: <R,[F_dot_exp -> ,]>, id: <R,[F_dot_exp -> ,]>, *: <R,[F_dot_exp -> ,]>, &: <R,[F_dot_exp -> ,]>, --: <R,[F_dot_exp -> ,]>, (: <R,[F_dot_exp -> ,]>}, {STR: <S,23>, &: <S,28>, --: <S,30>, NUM: <S,40>, -: <S,3>, id: <S,12>, (: <S,17>, ++: <S,39>, *: <S,41>}, {for: <R,[go_sentence -> CONTINUE ;]>, -: <R,[go_sentence -> CONTINUE ;]>, int: <R,[go_sentence -> CONTINUE ;]>, CONTINUE: <R,[go_sentence -> CONTINUE ;]>, id: <R,[go_sentence -> CONTINUE ;]>, {: <R,[go_sentence -> CONTINUE ;]>, (: <R,[go_sentence -> CONTINUE ;]>, RETURN: <R,[go_sentence -> CONTINUE ;]>, while: <R,[go_sentence -> CONTINUE ;]>, STR: <R,[go_sentence -> CONTINUE ;]>, }: <R,[go_sentence -> CONTINUE ;]>, &: <R,[go_sentence -> CONTINUE ;]>, --: <R,[go_sentence -> CONTINUE ;]>, boolen: <R,[go_sentence -> CONTINUE ;]>, BREAK: <R,[go_sentence -> CONTINUE ;]>, if: <R,[go_sentence -> CONTINUE ;]>, func_declare: <R,[go_sentence -> CONTINUE ;]>, float: <R,[go_sentence -> CONTINUE ;]>, char: <R,[go_sentence -> CONTINUE ;]>, ++: <R,[go_sentence -> CONTINUE ;]>, NUM: <R,[go_sentence -> CONTINUE ;]>, *: <R,[go_sentence -> CONTINUE ;]>, else: <R,[go_sentence -> CONTINUE ;]>, void: <R,[go_sentence -> CONTINUE ;]>, $: <R,[go_sentence -> CONTINUE ;]>}, {STR: <S,23>, &: <S,28>, --: <S,30>, NUM: <S,40>, -: <S,3>, id: <S,12>, (: <S,17>, ++: <S,39>, *: <S,41>}, {/: <R,[E9 -> F9_2 E10]>, -: <R,[E9 -> F9_2 E10]>, /=: <R,[E9 -> F9_2 E10]>, %: <R,[E9 -> F9_2 E10]>, >=: <R,[E9 -> F9_2 E10]>, and: <R,[E9 -> F9_2 E10]>, <<=: <R,[E9 -> F9_2 E10]>, +: <R,[E9 -> F9_2 E10]>, >>=: <R,[E9 -> F9_2 E10]>, -=: <R,[E9 -> F9_2 E10]>, ;: <R,[E9 -> F9_2 E10]>, or: <R,[E9 -> F9_2 E10]>, <: <R,[E9 -> F9_2 E10]>, =: <R,[E9 -> F9_2 E10]>, *=: <R,[E9 -> F9_2 E10]>, <<: <R,[E9 -> F9_2 E10]>, >>: <R,[E9 -> F9_2 E10]>, %=: <R,[E9 -> F9_2 E10]>, *: <R,[E9 -> F9_2 E10]>, !=: <R,[E9 -> F9_2 E10]>, ==: <R,[E9 -> F9_2 E10]>, ): <R,[E9 -> F9_2 E10]>, ,: <R,[E9 -> F9_2 E10]>, >: <R,[E9 -> F9_2 E10]>, +=: <R,[E9 -> F9_2 E10]>, <=: <R,[E9 -> F9_2 E10]>, [: <S,90>}, {-: <R,[F1 -> /=]>, STR: <R,[F1 -> /=]>, ++: <R,[F1 -> /=]>, NUM: <R,[F1 -> /=]>, id: <R,[F1 -> /=]>, *: <R,[F1 -> /=]>, &: <R,[F1 -> /=]>, --: <R,[F1 -> /=]>, (: <R,[F1 -> /=]>}, {-: <R,[F1 -> -=]>, STR: <R,[F1 -> -=]>, ++: <R,[F1 -> -=]>, NUM: <R,[F1 -> -=]>, id: <R,[F1 -> -=]>, *: <R,[F1 -> -=]>, &: <R,[F1 -> -=]>, --: <R,[F1 -> -=]>, (: <R,[F1 -> -=]>}, {for: <R,[expression_sentence -> E1 ;]>, -: <R,[expression_sentence -> E1 ;]>, int: <R,[expression_sentence -> E1 ;]>, CONTINUE: <R,[expression_sentence -> E1 ;]>, id: <R,[expression_sentence -> E1 ;]>, {: <R,[expression_sentence -> E1 ;]>, (: <R,[expression_sentence -> E1 ;]>, RETURN: <R,[expression_sentence -> E1 ;]>, while: <R,[expression_sentence -> E1 ;]>, STR: <R,[expression_sentence -> E1 ;]>, }: <R,[expression_sentence -> E1 ;]>, &: <R,[expression_sentence -> E1 ;]>, --: <R,[expression_sentence -> E1 ;]>, boolen: <R,[expression_sentence -> E1 ;]>, BREAK: <R,[expression_sentence -> E1 ;]>, if: <R,[expression_sentence -> E1 ;]>, float: <R,[expression_sentence -> E1 ;]>, func_declare: <R,[expression_sentence -> E1 ;]>, char: <R,[expression_sentence -> E1 ;]>, ++: <R,[expression_sentence -> E1 ;]>, NUM: <R,[expression_sentence -> E1 ;]>, *: <R,[expression_sentence -> E1 ;]>, else: <R,[expression_sentence -> E1 ;]>, ): <R,[expression_sentence -> E1 ;]>, void: <R,[expression_sentence -> E1 ;]>, $: <R,[expression_sentence -> E1 ;]>}, {-: <R,[F1 -> +=]>, STR: <R,[F1 -> +=]>, ++: <R,[F1 -> +=]>, NUM: <R,[F1 -> +=]>, id: <R,[F1 -> +=]>, *: <R,[F1 -> +=]>, &: <R,[F1 -> +=]>, --: <R,[F1 -> +=]>, (: <R,[F1 -> +=]>}, {-: <R,[F1 -> <<=]>, STR: <R,[F1 -> <<=]>, ++: <R,[F1 -> <<=]>, NUM: <R,[F1 -> <<=]>, id: <R,[F1 -> <<=]>, *: <R,[F1 -> <<=]>, &: <R,[F1 -> <<=]>, --: <R,[F1 -> <<=]>, (: <R,[F1 -> <<=]>}, {STR: <S,23>, &: <S,28>, --: <S,30>, NUM: <S,40>, -: <S,3>, id: <S,12>, (: <S,17>, ++: <S,39>, *: <S,41>}, {-: <R,[F1 -> %=]>, STR: <R,[F1 -> %=]>, ++: <R,[F1 -> %=]>, NUM: <R,[F1 -> %=]>, id: <R,[F1 -> %=]>, *: <R,[F1 -> %=]>, &: <R,[F1 -> %=]>, --: <R,[F1 -> %=]>, (: <R,[F1 -> %=]>}, {-: <R,[F1 -> =]>, STR: <R,[F1 -> =]>, ++: <R,[F1 -> =]>, NUM: <R,[F1 -> =]>, id: <R,[F1 -> =]>, *: <R,[F1 -> =]>, &: <R,[F1 -> =]>, --: <R,[F1 -> =]>, (: <R,[F1 -> =]>}, {-: <R,[F1 -> *=]>, STR: <R,[F1 -> *=]>, ++: <R,[F1 -> *=]>, NUM: <R,[F1 -> *=]>, id: <R,[F1 -> *=]>, *: <R,[F1 -> *=]>, &: <R,[F1 -> *=]>, --: <R,[F1 -> *=]>, (: <R,[F1 -> *=]>}, {-: <R,[F1 -> >>=]>, STR: <R,[F1 -> >>=]>, ++: <R,[F1 -> >>=]>, NUM: <R,[F1 -> >>=]>, id: <R,[F1 -> >>=]>, *: <R,[F1 -> >>=]>, &: <R,[F1 -> >>=]>, --: <R,[F1 -> >>=]>, (: <R,[F1 -> >>=]>}, {}: <S,112>}, {*=: <S,69>, +=: <S,64>, /=: <S,61>, -=: <S,62>, <<=: <S,65>, =: <S,68>, ): <S,113>, >>=: <S,70>, %=: <S,67>}, {-: <R,[F4 -> ==]>, STR: <R,[F4 -> ==]>, ++: <R,[F4 -> ==]>, NUM: <R,[F4 -> ==]>, id: <R,[F4 -> ==]>, *: <R,[F4 -> ==]>, &: <R,[F4 -> ==]>, --: <R,[F4 -> ==]>, (: <R,[F4 -> ==]>}, {STR: <S,23>, &: <S,28>, --: <S,30>, NUM: <S,40>, -: <S,3>, id: <S,12>, (: <S,17>, ++: <S,39>, *: <S,41>}, {-: <R,[F4 -> !=]>, STR: <R,[F4 -> !=]>, ++: <R,[F4 -> !=]>, NUM: <R,[F4 -> !=]>, id: <R,[F4 -> !=]>, *: <R,[F4 -> !=]>, &: <R,[F4 -> !=]>, --: <R,[F4 -> !=]>, (: <R,[F4 -> !=]>}, {;: <S,115>}, {for: <R,[go_sentence -> RETURN ;]>, -: <R,[go_sentence -> RETURN ;]>, int: <R,[go_sentence -> RETURN ;]>, CONTINUE: <R,[go_sentence -> RETURN ;]>, id: <R,[go_sentence -> RETURN ;]>, {: <R,[go_sentence -> RETURN ;]>, (: <R,[go_sentence -> RETURN ;]>, RETURN: <R,[go_sentence -> RETURN ;]>, while: <R,[go_sentence -> RETURN ;]>, STR: <R,[go_sentence -> RETURN ;]>, }: <R,[go_sentence -> RETURN ;]>, &: <R,[go_sentence -> RETURN ;]>, --: <R,[go_sentence -> RETURN ;]>, boolen: <R,[go_sentence -> RETURN ;]>, BREAK: <R,[go_sentence -> RETURN ;]>, if: <R,[go_sentence -> RETURN ;]>, func_declare: <R,[go_sentence -> RETURN ;]>, float: <R,[go_sentence -> RETURN ;]>, char: <R,[go_sentence -> RETURN ;]>, ++: <R,[go_sentence -> RETURN ;]>, NUM: <R,[go_sentence -> RETURN ;]>, *: <R,[go_sentence -> RETURN ;]>, else: <R,[go_sentence -> RETURN ;]>, void: <R,[go_sentence -> RETURN ;]>, $: <R,[go_sentence -> RETURN ;]>}, {STR: <S,23>, &: <S,28>, --: <S,30>, NUM: <S,40>, -: <S,3>, id: <S,12>, (: <S,17>, ++: <S,39>, *: <S,41>}, {-: <R,[F3 -> and]>, STR: <R,[F3 -> and]>, ++: <R,[F3 -> and]>, NUM: <R,[F3 -> and]>, id: <R,[F3 -> and]>, *: <R,[F3 -> and]>, &: <R,[F3 -> and]>, --: <R,[F3 -> and]>, (: <R,[F3 -> and]>}, {$: <R,[sentence_list -> sentence sentence_list]>, }: <R,[sentence_list -> sentence sentence_list]>}, {expression: <S,117>}, {-: <R,[F7 -> -]>, STR: <R,[F7 -> -]>, ++: <R,[F7 -> -]>, NUM: <R,[F7 -> -]>, id: <R,[F7 -> -]>, *: <R,[F7 -> -]>, &: <R,[F7 -> -]>, --: <R,[F7 -> -]>, (: <R,[F7 -> -]>}, {STR: <S,23>, &: <S,28>, --: <S,30>, NUM: <S,40>, -: <S,3>, id: <S,12>, (: <S,17>, ++: <S,39>, *: <S,41>}, {-: <R,[F7 -> +]>, STR: <R,[F7 -> +]>, ++: <R,[F7 -> +]>, NUM: <R,[F7 -> +]>, id: <R,[F7 -> +]>, *: <R,[F7 -> +]>, &: <R,[F7 -> +]>, --: <R,[F7 -> +]>, (: <R,[F7 -> +]>}, {STR: <S,23>, &: <S,28>, --: <S,30>, NUM: <S,40>, -: <S,3>, id: <S,12>, (: <S,17>, ++: <S,39>, *: <S,41>}, {-: <R,[F6 -> >>]>, STR: <R,[F6 -> >>]>, ++: <R,[F6 -> >>]>, NUM: <R,[F6 -> >>]>, id: <R,[F6 -> >>]>, *: <R,[F6 -> >>]>, &: <R,[F6 -> >>]>, --: <R,[F6 -> >>]>, (: <R,[F6 -> >>]>}, {-: <R,[F6 -> <<]>, STR: <R,[F6 -> <<]>, ++: <R,[F6 -> <<]>, NUM: <R,[F6 -> <<]>, id: <R,[F6 -> <<]>, *: <R,[F6 -> <<]>, &: <R,[F6 -> <<]>, --: <R,[F6 -> <<]>, (: <R,[F6 -> <<]>}, {/: <R,[E9 -> F9_1 E10]>, -: <R,[E9 -> F9_1 E10]>, /=: <R,[E9 -> F9_1 E10]>, %: <R,[E9 -> F9_1 E10]>, >=: <R,[E9 -> F9_1 E10]>, and: <R,[E9 -> F9_1 E10]>, <<=: <R,[E9 -> F9_1 E10]>, +: <R,[E9 -> F9_1 E10]>, >>=: <R,[E9 -> F9_1 E10]>, -=: <R,[E9 -> F9_1 E10]>, ;: <R,[E9 -> F9_1 E10]>, or: <R,[E9 -> F9_1 E10]>, <: <R,[E9 -> F9_1 E10]>, =: <R,[E9 -> F9_1 E10]>, *=: <R,[E9 -> F9_1 E10]>, <<: <R,[E9 -> F9_1 E10]>, >>: <R,[E9 -> F9_1 E10]>, %=: <R,[E9 -> F9_1 E10]>, *: <R,[E9 -> F9_1 E10]>, !=: <R,[E9 -> F9_1 E10]>, ==: <R,[E9 -> F9_1 E10]>, ): <R,[E9 -> F9_1 E10]>, ,: <R,[E9 -> F9_1 E10]>, >: <R,[E9 -> F9_1 E10]>, +=: <R,[E9 -> F9_1 E10]>, <=: <R,[E9 -> F9_1 E10]>, [: <S,90>}, {STR: <S,23>, &: <S,28>, --: <S,30>, NUM: <S,40>, -: <S,3>, id: <S,12>, (: <S,17>, ++: <S,39>, *: <S,41>}, {STR: <S,23>, id: <S,12>, NUM: <S,40>, (: <S,17>}, {/: <R,[E9 -> E10 F9_1]>, -: <R,[E9 -> E10 F9_1]>, /=: <R,[E9 -> E10 F9_1]>, %: <R,[E9 -> E10 F9_1]>, >=: <R,[E9 -> E10 F9_1]>, and: <R,[E9 -> E10 F9_1]>, <<=: <R,[E9 -> E10 F9_1]>, +: <R,[E9 -> E10 F9_1]>, >>=: <R,[E9 -> E10 F9_1]>, -=: <R,[E9 -> E10 F9_1]>, ;: <R,[E9 -> E10 F9_1]>, or: <R,[E9 -> E10 F9_1]>, <: <R,[E9 -> E10 F9_1]>, =: <R,[E9 -> E10 F9_1]>, *=: <R,[E9 -> E10 F9_1]>, <<: <R,[E9 -> E10 F9_1]>, >>: <R,[E9 -> E10 F9_1]>, %=: <R,[E9 -> E10 F9_1]>, *: <R,[E9 -> E10 F9_1]>, !=: <R,[E9 -> E10 F9_1]>, ==: <R,[E9 -> E10 F9_1]>, ): <R,[E9 -> E10 F9_1]>, ,: <R,[E9 -> E10 F9_1]>, >: <R,[E9 -> E10 F9_1]>, +=: <R,[E9 -> E10 F9_1]>, <=: <R,[E9 -> E10 F9_1]>}, {for: <R,[go_sentence -> BREAK ;]>, -: <R,[go_sentence -> BREAK ;]>, int: <R,[go_sentence -> BREAK ;]>, CONTINUE: <R,[go_sentence -> BREAK ;]>, id: <R,[go_sentence -> BREAK ;]>, {: <R,[go_sentence -> BREAK ;]>, (: <R,[go_sentence -> BREAK ;]>, RETURN: <R,[go_sentence -> BREAK ;]>, while: <R,[go_sentence -> BREAK ;]>, STR: <R,[go_sentence -> BREAK ;]>, }: <R,[go_sentence -> BREAK ;]>, &: <R,[go_sentence -> BREAK ;]>, --: <R,[go_sentence -> BREAK ;]>, boolen: <R,[go_sentence -> BREAK ;]>, BREAK: <R,[go_sentence -> BREAK ;]>, if: <R,[go_sentence -> BREAK ;]>, func_declare: <R,[go_sentence -> BREAK ;]>, float: <R,[go_sentence -> BREAK ;]>, char: <R,[go_sentence -> BREAK ;]>, ++: <R,[go_sentence -> BREAK ;]>, NUM: <R,[go_sentence -> BREAK ;]>, *: <R,[go_sentence -> BREAK ;]>, else: <R,[go_sentence -> BREAK ;]>, void: <R,[go_sentence -> BREAK ;]>, $: <R,[go_sentence -> BREAK ;]>}, {STR: <S,23>, &: <S,28>, --: <S,30>, NUM: <S,40>, -: <S,3>, id: <S,12>, (: <S,17>, ++: <S,39>, *: <S,41>}, {-: <R,[F2 -> or]>, STR: <R,[F2 -> or]>, ++: <R,[F2 -> or]>, NUM: <R,[F2 -> or]>, id: <R,[F2 -> or]>, *: <R,[F2 -> or]>, &: <R,[F2 -> or]>, --: <R,[F2 -> or]>, (: <R,[F2 -> or]>}, {-: <R,[F5 -> >]>, STR: <R,[F5 -> >]>, ++: <R,[F5 -> >]>, NUM: <R,[F5 -> >]>, id: <R,[F5 -> >]>, *: <R,[F5 -> >]>, &: <R,[F5 -> >]>, --: <R,[F5 -> >]>, (: <R,[F5 -> >]>}, {-: <R,[F5 -> >=]>, STR: <R,[F5 -> >=]>, ++: <R,[F5 -> >=]>, NUM: <R,[F5 -> >=]>, id: <R,[F5 -> >=]>, *: <R,[F5 -> >=]>, &: <R,[F5 -> >=]>, --: <R,[F5 -> >=]>, (: <R,[F5 -> >=]>}, {STR: <S,23>, &: <S,28>, --: <S,30>, NUM: <S,40>, -: <S,3>, id: <S,12>, (: <S,17>, ++: <S,39>, *: <S,41>}, {-: <R,[F5 -> <=]>, STR: <R,[F5 -> <=]>, ++: <R,[F5 -> <=]>, NUM: <R,[F5 -> <=]>, id: <R,[F5 -> <=]>, *: <R,[F5 -> <=]>, &: <R,[F5 -> <=]>, --: <R,[F5 -> <=]>, (: <R,[F5 -> <=]>}, {-: <R,[F5 -> <]>, STR: <R,[F5 -> <]>, ++: <R,[F5 -> <]>, NUM: <R,[F5 -> <]>, id: <R,[F5 -> <]>, *: <R,[F5 -> <]>, &: <R,[F5 -> <]>, --: <R,[F5 -> <]>, (: <R,[F5 -> <]>}, {id: <S,124>}, {-: <R,[loop_control_sentence -> type_declare_sentence]>, float: <R,[loop_control_sentence -> type_declare_sentence]>, char: <R,[loop_control_sentence -> type_declare_sentence]>, int: <R,[loop_control_sentence -> type_declare_sentence]>, ++: <R,[loop_control_sentence -> type_declare_sentence]>, NUM: <R,[loop_control_sentence -> type_declare_sentence]>, id: <R,[loop_control_sentence -> type_declare_sentence]>, *: <R,[loop_control_sentence -> type_declare_sentence]>, (: <R,[loop_control_sentence -> type_declare_sentence]>, ): <R,[loop_control_sentence -> type_declare_sentence]>, STR: <R,[loop_control_sentence -> type_declare_sentence]>, void: <R,[loop_control_sentence -> type_declare_sentence]>, &: <R,[loop_control_sentence -> type_declare_sentence]>, --: <R,[loop_control_sentence -> type_declare_sentence]>, boolen: <R,[loop_control_sentence -> type_declare_sentence]>}, {STR: <S,23>, int: <S,9>, &: <S,28>, boolen: <S,31>, --: <S,30>, NUM: <S,40>, char: <S,37>, -: <S,3>, ): <S,126>, id: <S,12>, (: <S,17>, void: <S,45>, float: <S,38>, ++: <S,39>, *: <S,41>}, {-: <R,[loop_control_sentence -> expression_sentence]>, float: <R,[loop_control_sentence -> expression_sentence]>, char: <R,[loop_control_sentence -> expression_sentence]>, int: <R,[loop_control_sentence -> expression_sentence]>, ++: <R,[loop_control_sentence -> expression_sentence]>, NUM: <R,[loop_control_sentence -> expression_sentence]>, id: <R,[loop_control_sentence -> expression_sentence]>, *: <R,[loop_control_sentence -> expression_sentence]>, (: <R,[loop_control_sentence -> expression_sentence]>, ): <R,[loop_control_sentence -> expression_sentence]>, STR: <R,[loop_control_sentence -> expression_sentence]>, void: <R,[loop_control_sentence -> expression_sentence]>, &: <R,[loop_control_sentence -> expression_sentence]>, --: <R,[loop_control_sentence -> expression_sentence]>, boolen: <R,[loop_control_sentence -> expression_sentence]>}, {/: <R,[E8 -> E8 F8 E9]>, -: <R,[E8 -> E8 F8 E9]>, /=: <R,[E8 -> E8 F8 E9]>, %: <R,[E8 -> E8 F8 E9]>, >=: <R,[E8 -> E8 F8 E9]>, and: <R,[E8 -> E8 F8 E9]>, <<=: <R,[E8 -> E8 F8 E9]>, +: <R,[E8 -> E8 F8 E9]>, >>=: <R,[E8 -> E8 F8 E9]>, -=: <R,[E8 -> E8 F8 E9]>, ;: <R,[E8 -> E8 F8 E9]>, or: <R,[E8 -> E8 F8 E9]>, =: <R,[E8 -> E8 F8 E9]>, <: <R,[E8 -> E8 F8 E9]>, *=: <R,[E8 -> E8 F8 E9]>, <<: <R,[E8 -> E8 F8 E9]>, >>: <R,[E8 -> E8 F8 E9]>, %=: <R,[E8 -> E8 F8 E9]>, *: <R,[E8 -> E8 F8 E9]>, !=: <R,[E8 -> E8 F8 E9]>, ==: <R,[E8 -> E8 F8 E9]>, ): <R,[E8 -> E8 F8 E9]>, ,: <R,[E8 -> E8 F8 E9]>, >: <R,[E8 -> E8 F8 E9]>, +=: <R,[E8 -> E8 F8 E9]>, <=: <R,[E8 -> E8 F8 E9]>}, {id: <S,124>}, {boolen: <S,31>, char: <S,37>, void: <S,45>, float: <S,38>, int: <S,9>}, {;: <S,131>}, {STR: <S,23>, &: <S,28>, --: <S,30>, NUM: <S,40>, -: <S,3>, id: <S,12>, (: <S,17>, ++: <S,39>, *: <S,41>}, {/=: <R,[E_dot_exp -> E_dot_exp F_dot_exp E2]>, %=: <R,[E_dot_exp -> E_dot_exp F_dot_exp E2]>, <<=: <R,[E_dot_exp -> E_dot_exp F_dot_exp E2]>, >>=: <R,[E_dot_exp -> E_dot_exp F_dot_exp E2]>, ): <R,[E_dot_exp -> E_dot_exp F_dot_exp E2]>, ,: <R,[E_dot_exp -> E_dot_exp F_dot_exp E2]>, -=: <R,[E_dot_exp -> E_dot_exp F_dot_exp E2]>, ;: <R,[E_dot_exp -> E_dot_exp F_dot_exp E2]>, +=: <R,[E_dot_exp -> E_dot_exp F_dot_exp E2]>, =: <R,[E_dot_exp -> E_dot_exp F_dot_exp E2]>, *=: <R,[E_dot_exp -> E_dot_exp F_dot_exp E2]>, or: <S,94>}, {*=: <S,69>, +=: <S,64>, /=: <S,61>, -=: <S,62>, <<=: <S,65>, =: <S,68>, ): <S,133>, >>=: <S,70>, %=: <S,67>}, {/=: <R,[E1 -> E1 F1 E_dot_exp]>, ): <R,[E1 -> E1 F1 E_dot_exp]>, -=: <R,[E1 -> E1 F1 E_dot_exp]>, ;: <R,[E1 -> E1 F1 E_dot_exp]>, +=: <R,[E1 -> E1 F1 E_dot_exp]>, %=: <R,[E1 -> E1 F1 E_dot_exp]>, <<=: <R,[E1 -> E1 F1 E_dot_exp]>, =: <R,[E1 -> E1 F1 E_dot_exp]>, *=: <R,[E1 -> E1 F1 E_dot_exp]>, >>=: <R,[E1 -> E1 F1 E_dot_exp]>, ,: <S,56>}, {for: <R,[complex_sentence -> { sentence_list }]>, -: <R,[complex_sentence -> { sentence_list }]>, int: <R,[complex_sentence -> { sentence_list }]>, CONTINUE: <R,[complex_sentence -> { sentence_list }]>, id: <R,[complex_sentence -> { sentence_list }]>, {: <R,[complex_sentence -> { sentence_list }]>, (: <R,[complex_sentence -> { sentence_list }]>, RETURN: <R,[complex_sentence -> { sentence_list }]>, while: <R,[complex_sentence -> { sentence_list }]>, STR: <R,[complex_sentence -> { sentence_list }]>, }: <R,[complex_sentence -> { sentence_list }]>, &: <R,[complex_sentence -> { sentence_list }]>, --: <R,[complex_sentence -> { sentence_list }]>, boolen: <R,[complex_sentence -> { sentence_list }]>, BREAK: <R,[complex_sentence -> { sentence_list }]>, if: <R,[complex_sentence -> { sentence_list }]>, func_declare: <R,[complex_sentence -> { sentence_list }]>, float: <R,[complex_sentence -> { sentence_list }]>, char: <R,[complex_sentence -> { sentence_list }]>, ++: <R,[complex_sentence -> { sentence_list }]>, NUM: <R,[complex_sentence -> { sentence_list }]>, *: <R,[complex_sentence -> { sentence_list }]>, else: <R,[complex_sentence -> { sentence_list }]>, void: <R,[complex_sentence -> { sentence_list }]>, $: <R,[complex_sentence -> { sentence_list }]>}, {/: <R,[E -> ( E1 )]>, -: <R,[E -> ( E1 )]>, /=: <R,[E -> ( E1 )]>, %: <R,[E -> ( E1 )]>, >=: <R,[E -> ( E1 )]>, and: <R,[E -> ( E1 )]>, <<=: <R,[E -> ( E1 )]>, +: <R,[E -> ( E1 )]>, >>=: <R,[E -> ( E1 )]>, -=: <R,[E -> ( E1 )]>, ;: <R,[E -> ( E1 )]>, or: <R,[E -> ( E1 )]>, <: <R,[E -> ( E1 )]>, =: <R,[E -> ( E1 )]>, --: <R,[E -> ( E1 )]>, ]: <R,[E -> ( E1 )]>, *=: <R,[E -> ( E1 )]>, <<: <R,[E -> ( E1 )]>, >>: <R,[E -> ( E1 )]>, ++: <R,[E -> ( E1 )]>, %=: <R,[E -> ( E1 )]>, *: <R,[E -> ( E1 )]>, !=: <R,[E -> ( E1 )]>, ==: <R,[E -> ( E1 )]>, [: <R,[E -> ( E1 )]>, ): <R,[E -> ( E1 )]>, ,: <R,[E -> ( E1 )]>, >: <R,[E -> ( E1 )]>, +=: <R,[E -> ( E1 )]>, <=: <R,[E -> ( E1 )]>}, {<: <S,99>, <=: <S,98>, /=: <R,[E4 -> E4 F4 E5]>, and: <R,[E4 -> E4 F4 E5]>, %=: <R,[E4 -> E4 F4 E5]>, <<=: <R,[E4 -> E4 F4 E5]>, !=: <R,[E4 -> E4 F4 E5]>, >>=: <R,[E4 -> E4 F4 E5]>, ==: <R,[E4 -> E4 F4 E5]>, ): <R,[E4 -> E4 F4 E5]>, ,: <R,[E4 -> E4 F4 E5]>, -=: <R,[E4 -> E4 F4 E5]>, ;: <R,[E4 -> E4 F4 E5]>, +=: <R,[E4 -> E4 F4 E5]>, or: <R,[E4 -> E4 F4 E5]>, =: <R,[E4 -> E4 F4 E5]>, *=: <R,[E4 -> E4 F4 E5]>, >: <S,95>, >=: <S,96>}, {for: <R,[go_sentence -> RETURN expression ;]>, -: <R,[go_sentence -> RETURN expression ;]>, int: <R,[go_sentence -> RETURN expression ;]>, CONTINUE: <R,[go_sentence -> RETURN expression ;]>, id: <R,[go_sentence -> RETURN expression ;]>, {: <R,[go_sentence -> RETURN expression ;]>, (: <R,[go_sentence -> RETURN expression ;]>, RETURN: <R,[go_sentence -> RETURN expression ;]>, while: <R,[go_sentence -> RETURN expression ;]>, STR: <R,[go_sentence -> RETURN expression ;]>, }: <R,[go_sentence -> RETURN expression ;]>, &: <R,[go_sentence -> RETURN expression ;]>, --: <R,[go_sentence -> RETURN expression ;]>, boolen: <R,[go_sentence -> RETURN expression ;]>, BREAK: <R,[go_sentence -> RETURN expression ;]>, if: <R,[go_sentence -> RETURN expression ;]>, func_declare: <R,[go_sentence -> RETURN expression ;]>, float: <R,[go_sentence -> RETURN expression ;]>, char: <R,[go_sentence -> RETURN expression ;]>, ++: <R,[go_sentence -> RETURN expression ;]>, NUM: <R,[go_sentence -> RETURN expression ;]>, *: <R,[go_sentence -> RETURN expression ;]>, else: <R,[go_sentence -> RETURN expression ;]>, void: <R,[go_sentence -> RETURN expression ;]>, $: <R,[go_sentence -> RETURN expression ;]>}, {==: <S,73>, /=: <R,[E3 -> E3 F3 E4]>, and: <R,[E3 -> E3 F3 E4]>, %=: <R,[E3 -> E3 F3 E4]>, <<=: <R,[E3 -> E3 F3 E4]>, >>=: <R,[E3 -> E3 F3 E4]>, ): <R,[E3 -> E3 F3 E4]>, ,: <R,[E3 -> E3 F3 E4]>, -=: <R,[E3 -> E3 F3 E4]>, ;: <R,[E3 -> E3 F3 E4]>, +=: <R,[E3 -> E3 F3 E4]>, or: <R,[E3 -> E3 F3 E4]>, =: <R,[E3 -> E3 F3 E4]>, *=: <R,[E3 -> E3 F3 E4]>, !=: <S,75>}, {): <S,134>}, {-: <R,[E7 -> E7 F7 E8]>, /=: <R,[E7 -> E7 F7 E8]>, >=: <R,[E7 -> E7 F7 E8]>, and: <R,[E7 -> E7 F7 E8]>, <<=: <R,[E7 -> E7 F7 E8]>, +: <R,[E7 -> E7 F7 E8]>, >>=: <R,[E7 -> E7 F7 E8]>, -=: <R,[E7 -> E7 F7 E8]>, ;: <R,[E7 -> E7 F7 E8]>, or: <R,[E7 -> E7 F7 E8]>, =: <R,[E7 -> E7 F7 E8]>, <: <R,[E7 -> E7 F7 E8]>, *=: <R,[E7 -> E7 F7 E8]>, <<: <R,[E7 -> E7 F7 E8]>, >>: <R,[E7 -> E7 F7 E8]>, %=: <R,[E7 -> E7 F7 E8]>, !=: <R,[E7 -> E7 F7 E8]>, ==: <R,[E7 -> E7 F7 E8]>, ): <R,[E7 -> E7 F7 E8]>, ,: <R,[E7 -> E7 F7 E8]>, >: <R,[E7 -> E7 F7 E8]>, +=: <R,[E7 -> E7 F7 E8]>, <=: <R,[E7 -> E7 F7 E8]>, *: <S,53>, /: <S,50>, %: <S,52>}, {+: <S,84>, -: <S,82>, /=: <R,[E6 -> E6 F6 E7]>, >=: <R,[E6 -> E6 F6 E7]>, and: <R,[E6 -> E6 F6 E7]>, <<=: <R,[E6 -> E6 F6 E7]>, >>=: <R,[E6 -> E6 F6 E7]>, -=: <R,[E6 -> E6 F6 E7]>, ;: <R,[E6 -> E6 F6 E7]>, or: <R,[E6 -> E6 F6 E7]>, =: <R,[E6 -> E6 F6 E7]>, <: <R,[E6 -> E6 F6 E7]>, *=: <R,[E6 -> E6 F6 E7]>, >>: <R,[E6 -> E6 F6 E7]>, <<: <R,[E6 -> E6 F6 E7]>, %=: <R,[E6 -> E6 F6 E7]>, !=: <R,[E6 -> E6 F6 E7]>, ==: <R,[E6 -> E6 F6 E7]>, ): <R,[E6 -> E6 F6 E7]>, ,: <R,[E6 -> E6 F6 E7]>, >: <R,[E6 -> E6 F6 E7]>, +=: <R,[E6 -> E6 F6 E7]>, <=: <R,[E6 -> E6 F6 E7]>}, {*=: <S,69>, +=: <S,64>, /=: <S,61>, <<=: <S,65>, -=: <S,62>, =: <S,68>, ): <S,135>, >>=: <S,70>, %=: <S,67>}, {]: <S,136>, [: <S,90>}, {and: <S,79>, /=: <R,[E2 -> E2 F2 E3]>, %=: <R,[E2 -> E2 F2 E3]>, <<=: <R,[E2 -> E2 F2 E3]>, >>=: <R,[E2 -> E2 F2 E3]>, ): <R,[E2 -> E2 F2 E3]>, ,: <R,[E2 -> E2 F2 E3]>, -=: <R,[E2 -> E2 F2 E3]>, ;: <R,[E2 -> E2 F2 E3]>, +=: <R,[E2 -> E2 F2 E3]>, or: <R,[E2 -> E2 F2 E3]>, =: <R,[E2 -> E2 F2 E3]>, *=: <R,[E2 -> E2 F2 E3]>}, {<<: <S,87>, >>: <S,86>, /=: <R,[E5 -> E5 F5 E6]>, >=: <R,[E5 -> E5 F5 E6]>, and: <R,[E5 -> E5 F5 E6]>, %=: <R,[E5 -> E5 F5 E6]>, <<=: <R,[E5 -> E5 F5 E6]>, !=: <R,[E5 -> E5 F5 E6]>, >>=: <R,[E5 -> E5 F5 E6]>, ==: <R,[E5 -> E5 F5 E6]>, ): <R,[E5 -> E5 F5 E6]>, ,: <R,[E5 -> E5 F5 E6]>, -=: <R,[E5 -> E5 F5 E6]>, >: <R,[E5 -> E5 F5 E6]>, ;: <R,[E5 -> E5 F5 E6]>, +=: <R,[E5 -> E5 F5 E6]>, =: <R,[E5 -> E5 F5 E6]>, or: <R,[E5 -> E5 F5 E6]>, <=: <R,[E5 -> E5 F5 E6]>, <: <R,[E5 -> E5 F5 E6]>, *=: <R,[E5 -> E5 F5 E6]>}, {,: <S,105>, =: <R,[id_list -> id]>, ;: <R,[id_list -> id]>}, {STR: <S,23>, int: <S,9>, &: <S,28>, boolen: <S,31>, --: <S,30>, NUM: <S,40>, char: <S,37>, -: <S,3>, id: <S,12>, (: <S,17>, void: <S,45>, float: <S,38>, ++: <S,39>, *: <S,41>}, {RETURN: <S,19>, STR: <S,23>, if: <S,33>, BREAK: <S,35>, --: <S,30>, int: <S,9>, &: <S,28>, boolen: <S,31>, while: <S,22>, {: <S,16>, for: <S,2>, char: <S,37>, func_declare: <S,36>, -: <S,3>, CONTINUE: <S,11>, id: <S,12>, NUM: <S,40>, (: <S,17>, void: <S,45>, float: <S,38>, ++: <S,39>, *: <S,41>}, {=: <R,[id_list -> id , id_list]>, ;: <R,[id_list -> id , id_list]>}, {): <R,[parameter -> type_statement]>, ,: <R,[parameter -> type_statement]>, id: <S,139>}, {): <R,[list -> parameter]>, ,: <R,[list -> parameter]>}, {,: <S,140>, ): <S,141>}, {for: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, -: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, int: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, CONTINUE: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, id: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, {: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, (: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, RETURN: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, while: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, STR: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, }: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, &: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, --: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, boolen: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, BREAK: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, if: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, func_declare: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, float: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, char: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, ++: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, NUM: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, *: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, else: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, ): <R,[type_declare_sentence -> type_statement id_list initialize ;]>, void: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, $: <R,[type_declare_sentence -> type_statement id_list initialize ;]>}, {*=: <S,69>, +=: <S,64>, /=: <S,61>, -=: <S,62>, <<=: <S,65>, ;: <R,[initialize -> = E1]>, =: <S,68>, >>=: <S,70>, %=: <S,67>}, {/: <R,[E -> id ( E1 )]>, -: <R,[E -> id ( E1 )]>, /=: <R,[E -> id ( E1 )]>, %: <R,[E -> id ( E1 )]>, >=: <R,[E -> id ( E1 )]>, and: <R,[E -> id ( E1 )]>, <<=: <R,[E -> id ( E1 )]>, +: <R,[E -> id ( E1 )]>, >>=: <R,[E -> id ( E1 )]>, -=: <R,[E -> id ( E1 )]>, ;: <R,[E -> id ( E1 )]>, or: <R,[E -> id ( E1 )]>, <: <R,[E -> id ( E1 )]>, =: <R,[E -> id ( E1 )]>, --: <R,[E -> id ( E1 )]>, ]: <R,[E -> id ( E1 )]>, *=: <R,[E -> id ( E1 )]>, <<: <R,[E -> id ( E1 )]>, >>: <R,[E -> id ( E1 )]>, ++: <R,[E -> id ( E1 )]>, %=: <R,[E -> id ( E1 )]>, *: <R,[E -> id ( E1 )]>, !=: <R,[E -> id ( E1 )]>, ==: <R,[E -> id ( E1 )]>, [: <R,[E -> id ( E1 )]>, ): <R,[E -> id ( E1 )]>, ,: <R,[E -> id ( E1 )]>, >: <R,[E -> id ( E1 )]>, +=: <R,[E -> id ( E1 )]>, <=: <R,[E -> id ( E1 )]>}, {RETURN: <S,19>, STR: <S,23>, if: <S,33>, BREAK: <S,35>, --: <S,30>, int: <S,9>, &: <S,28>, boolen: <S,31>, while: <S,22>, {: <S,16>, for: <S,2>, char: <S,37>, func_declare: <S,36>, -: <S,3>, CONTINUE: <S,11>, id: <S,12>, NUM: <S,40>, (: <S,17>, void: <S,45>, float: <S,38>, ++: <S,39>, *: <S,41>}, {RETURN: <S,19>, STR: <S,23>, if: <S,33>, BREAK: <S,35>, --: <S,30>, int: <S,9>, &: <S,28>, boolen: <S,31>, {: <S,16>, while: <S,22>, for: <S,2>, func_declare: <S,36>, char: <S,37>, -: <S,3>, CONTINUE: <S,11>, id: <S,12>, NUM: <S,40>, (: <S,17>, void: <S,45>, float: <S,38>, ++: <S,39>, *: <S,41>}, {/: <R,[E10 -> E10 [ E10 ]]>, -: <R,[E10 -> E10 [ E10 ]]>, /=: <R,[E10 -> E10 [ E10 ]]>, %: <R,[E10 -> E10 [ E10 ]]>, >=: <R,[E10 -> E10 [ E10 ]]>, and: <R,[E10 -> E10 [ E10 ]]>, <<=: <R,[E10 -> E10 [ E10 ]]>, +: <R,[E10 -> E10 [ E10 ]]>, >>=: <R,[E10 -> E10 [ E10 ]]>, -=: <R,[E10 -> E10 [ E10 ]]>, ;: <R,[E10 -> E10 [ E10 ]]>, or: <R,[E10 -> E10 [ E10 ]]>, <: <R,[E10 -> E10 [ E10 ]]>, =: <R,[E10 -> E10 [ E10 ]]>, --: <R,[E10 -> E10 [ E10 ]]>, ]: <R,[E10 -> E10 [ E10 ]]>, *=: <R,[E10 -> E10 [ E10 ]]>, <<: <R,[E10 -> E10 [ E10 ]]>, >>: <R,[E10 -> E10 [ E10 ]]>, ++: <R,[E10 -> E10 [ E10 ]]>, %=: <R,[E10 -> E10 [ E10 ]]>, *: <R,[E10 -> E10 [ E10 ]]>, !=: <R,[E10 -> E10 [ E10 ]]>, ==: <R,[E10 -> E10 [ E10 ]]>, [: <R,[E10 -> E10 [ E10 ]]>, ): <R,[E10 -> E10 [ E10 ]]>, ,: <R,[E10 -> E10 [ E10 ]]>, >: <R,[E10 -> E10 [ E10 ]]>, +=: <R,[E10 -> E10 [ E10 ]]>, <=: <R,[E10 -> E10 [ E10 ]]>}, {): <S,146>}, {for: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, -: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, int: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, CONTINUE: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, id: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, {: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, (: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, RETURN: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, while: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, STR: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, }: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, &: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, --: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, boolen: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, BREAK: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, if: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, func_declare: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, float: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, char: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, ++: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, NUM: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, *: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, else: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, void: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, $: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>}, {): <R,[parameter -> type_statement id]>, ,: <R,[parameter -> type_statement id]>}, {char: <S,37>, void: <S,45>, float: <S,38>, int: <S,9>, boolen: <S,31>}, {{: <S,16>}, {for: <R,[state -> sentence]>, -: <R,[state -> sentence]>, int: <R,[state -> sentence]>, CONTINUE: <R,[state -> sentence]>, id: <R,[state -> sentence]>, {: <R,[state -> sentence]>, (: <R,[state -> sentence]>, RETURN: <R,[state -> sentence]>, while: <R,[state -> sentence]>, STR: <R,[state -> sentence]>, }: <R,[state -> sentence]>, &: <R,[state -> sentence]>, --: <R,[state -> sentence]>, boolen: <R,[state -> sentence]>, BREAK: <R,[state -> sentence]>, if: <R,[state -> sentence]>, func_declare: <R,[state -> sentence]>, float: <R,[state -> sentence]>, char: <R,[state -> sentence]>, ++: <R,[state -> sentence]>, NUM: <R,[state -> sentence]>, *: <R,[state -> sentence]>, else: <R,[state -> sentence]>, void: <R,[state -> sentence]>, $: <R,[state -> sentence]>}, {for: <R,[state -> complex_sentence]>, -: <R,[state -> complex_sentence]>, int: <R,[state -> complex_sentence]>, CONTINUE: <R,[state -> complex_sentence]>, id: <R,[state -> complex_sentence]>, {: <R,[state -> complex_sentence]>, (: <R,[state -> complex_sentence]>, RETURN: <R,[state -> complex_sentence]>, while: <R,[state -> complex_sentence]>, STR: <R,[state -> complex_sentence]>, }: <R,[state -> complex_sentence]>, &: <R,[state -> complex_sentence]>, --: <R,[state -> complex_sentence]>, boolen: <R,[state -> complex_sentence]>, BREAK: <R,[state -> complex_sentence]>, if: <R,[state -> complex_sentence]>, func_declare: <R,[state -> complex_sentence]>, float: <R,[state -> complex_sentence]>, char: <R,[state -> complex_sentence]>, ++: <R,[state -> complex_sentence]>, NUM: <R,[state -> complex_sentence]>, *: <R,[state -> complex_sentence]>, else: <R,[state -> complex_sentence]>, void: <R,[state -> complex_sentence]>, $: <R,[state -> complex_sentence]>}, {for: <R,[while_sentence -> while ( expression ) state]>, -: <R,[while_sentence -> while ( expression ) state]>, int: <R,[while_sentence -> while ( expression ) state]>, CONTINUE: <R,[while_sentence -> while ( expression ) state]>, id: <R,[while_sentence -> while ( expression ) state]>, {: <R,[while_sentence -> while ( expression ) state]>, (: <R,[while_sentence -> while ( expression ) state]>, RETURN: <R,[while_sentence -> while ( expression ) state]>, while: <R,[while_sentence -> while ( expression ) state]>, STR: <R,[while_sentence -> while ( expression ) state]>, }: <R,[while_sentence -> while ( expression ) state]>, &: <R,[while_sentence -> while ( expression ) state]>, --: <R,[while_sentence -> while ( expression ) state]>, boolen: <R,[while_sentence -> while ( expression ) state]>, BREAK: <R,[while_sentence -> while ( expression ) state]>, if: <R,[while_sentence -> while ( expression ) state]>, func_declare: <R,[while_sentence -> while ( expression ) state]>, float: <R,[while_sentence -> while ( expression ) state]>, char: <R,[while_sentence -> while ( expression ) state]>, ++: <R,[while_sentence -> while ( expression ) state]>, NUM: <R,[while_sentence -> while ( expression ) state]>, *: <R,[while_sentence -> while ( expression ) state]>, else: <R,[while_sentence -> while ( expression ) state]>, void: <R,[while_sentence -> while ( expression ) state]>, $: <R,[while_sentence -> while ( expression ) state]>}, {else: <R,[if_sentence -> if ( E1 ) state]>, for: <R,[if_sentence -> if ( E1 ) state]>, -: <R,[if_sentence -> if ( E1 ) state]>, int: <R,[if_sentence -> if ( E1 ) state]>, CONTINUE: <R,[if_sentence -> if ( E1 ) state]>, id: <R,[if_sentence -> if ( E1 ) state]>, {: <R,[if_sentence -> if ( E1 ) state]>, (: <R,[if_sentence -> if ( E1 ) state]>, RETURN: <R,[if_sentence -> if ( E1 ) state]>, while: <R,[if_sentence -> if ( E1 ) state]>, STR: <R,[if_sentence -> if ( E1 ) state]>, }: <R,[if_sentence -> if ( E1 ) state]>, &: <R,[if_sentence -> if ( E1 ) state]>, --: <R,[if_sentence -> if ( E1 ) state]>, boolen: <R,[if_sentence -> if ( E1 ) state]>, BREAK: <R,[if_sentence -> if ( E1 ) state]>, if: <R,[if_sentence -> if ( E1 ) state]>, func_declare: <R,[if_sentence -> if ( E1 ) state]>, float: <R,[if_sentence -> if ( E1 ) state]>, char: <R,[if_sentence -> if ( E1 ) state]>, ++: <R,[if_sentence -> if ( E1 ) state]>, NUM: <R,[if_sentence -> if ( E1 ) state]>, *: <R,[if_sentence -> if ( E1 ) state]>, void: <R,[if_sentence -> if ( E1 ) state]>, $: <R,[if_sentence -> if ( E1 ) state]>}, {{: <S,16>}, {): <R,[list -> list , parameter]>, ,: <R,[list -> list , parameter]>}, {for: <R,[func_define -> type_statement id ( list ) complex_sentence]>, -: <R,[func_define -> type_statement id ( list ) complex_sentence]>, int: <R,[func_define -> type_statement id ( list ) complex_sentence]>, CONTINUE: <R,[func_define -> type_statement id ( list ) complex_sentence]>, id: <R,[func_define -> type_statement id ( list ) complex_sentence]>, {: <R,[func_define -> type_statement id ( list ) complex_sentence]>, (: <R,[func_define -> type_statement id ( list ) complex_sentence]>, RETURN: <R,[func_define -> type_statement id ( list ) complex_sentence]>, while: <R,[func_define -> type_statement id ( list ) complex_sentence]>, STR: <R,[func_define -> type_statement id ( list ) complex_sentence]>, }: <R,[func_define -> type_statement id ( list ) complex_sentence]>, &: <R,[func_define -> type_statement id ( list ) complex_sentence]>, --: <R,[func_define -> type_statement id ( list ) complex_sentence]>, boolen: <R,[func_define -> type_statement id ( list ) complex_sentence]>, BREAK: <R,[func_define -> type_statement id ( list ) complex_sentence]>, if: <R,[func_define -> type_statement id ( list ) complex_sentence]>, func_declare: <R,[func_define -> type_statement id ( list ) complex_sentence]>, float: <R,[func_define -> type_statement id ( list ) complex_sentence]>, char: <R,[func_define -> type_statement id ( list ) complex_sentence]>, ++: <R,[func_define -> type_statement id ( list ) complex_sentence]>, NUM: <R,[func_define -> type_statement id ( list ) complex_sentence]>, *: <R,[func_define -> type_statement id ( list ) complex_sentence]>, else: <R,[func_define -> type_statement id ( list ) complex_sentence]>, void: <R,[func_define -> type_statement id ( list ) complex_sentence]>, $: <R,[func_define -> type_statement id ( list ) complex_sentence]>}, {RETURN: <S,19>, STR: <S,23>, if: <S,33>, BREAK: <S,35>, --: <S,30>, int: <S,9>, &: <S,28>, boolen: <S,31>, while: <S,22>, {: <S,16>, for: <S,2>, char: <S,37>, func_declare: <S,36>, -: <S,3>, CONTINUE: <S,11>, id: <S,12>, NUM: <S,40>, (: <S,17>, void: <S,45>, float: <S,38>, ++: <S,39>, *: <S,41>}, {for: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, -: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, int: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, CONTINUE: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, id: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, {: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, (: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, RETURN: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, while: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, STR: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, }: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, &: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, --: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, boolen: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, BREAK: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, if: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, func_declare: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, float: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, char: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, ++: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, NUM: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, *: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, else: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, void: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, $: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>}, {for: <R,[if_sentence -> if ( E1 ) state else state]>, -: <R,[if_sentence -> if ( E1 ) state else state]>, int: <R,[if_sentence -> if ( E1 ) state else state]>, CONTINUE: <R,[if_sentence -> if ( E1 ) state else state]>, id: <R,[if_sentence -> if ( E1 ) state else state]>, {: <R,[if_sentence -> if ( E1 ) state else state]>, (: <R,[if_sentence -> if ( E1 ) state else state]>, RETURN: <R,[if_sentence -> if ( E1 ) state else state]>, while: <R,[if_sentence -> if ( E1 ) state else state]>, STR: <R,[if_sentence -> if ( E1 ) state else state]>, }: <R,[if_sentence -> if ( E1 ) state else state]>, &: <R,[if_sentence -> if ( E1 ) state else state]>, --: <R,[if_sentence -> if ( E1 ) state else state]>, boolen: <R,[if_sentence -> if ( E1 ) state else state]>, BREAK: <R,[if_sentence -> if ( E1 ) state else state]>, if: <R,[if_sentence -> if ( E1 ) state else state]>, func_declare: <R,[if_sentence -> if ( E1 ) state else state]>, float: <R,[if_sentence -> if ( E1 ) state else state]>, char: <R,[if_sentence -> if ( E1 ) state else state]>, ++: <R,[if_sentence -> if ( E1 ) state else state]>, NUM: <R,[if_sentence -> if ( E1 ) state else state]>, *: <R,[if_sentence -> if ( E1 ) state else state]>, else: <R,[if_sentence -> if ( E1 ) state else state]>, void: <R,[if_sentence -> if ( E1 ) state else state]>, $: <R,[if_sentence -> if ( E1 ) state else state]>}]

GOTO TABLE:
[{go_sentence: 1, E8: 4, type_statement: 5, E_dot_exp: 6, sentence_list: 7, E9: 8, if_sentence: 10, F9_2: 13, func_define: 14, E1: 15, E4: 18, E3: 20, sentence: 21, E7: 24, E6: 25, S: 26, F9_1: 27, complex_sentence: 29, type_declare_sentence: 32, E10: 34, E: 42, E2: 43, for_sentence: 44, while_sentence: 46, E5: 47, expression_sentence: 48}, {}, {}, {}, {F8: 51}, {id_list: 55}, {F_dot_exp: 57}, {}, {}, {}, {}, {}, {}, {E10: 60, E: 42}, {}, {F1: 66}, {go_sentence: 1, E8: 4, type_statement: 5, E_dot_exp: 6, sentence_list: 71, E9: 8, if_sentence: 10, F9_2: 13, func_define: 14, E1: 15, E4: 18, E3: 20, sentence: 21, E7: 24, E6: 25, F9_1: 27, complex_sentence: 29, type_declare_sentence: 32, E10: 34, E: 42, E2: 43, for_sentence: 44, while_sentence: 46, E5: 47, expression_sentence: 48}, {E8: 4, E_dot_exp: 6, E9: 8, F9_2: 13, E1: 72, E4: 18, E3: 20, E7: 24, E6: 25, F9_1: 27, E10: 34, E: 42, E2: 43, E5: 47}, {F4: 74}, {}, {F3: 78}, {go_sentence: 1, E8: 4, type_statement: 5, E_dot_exp: 6, sentence_list: 80, E9: 8, if_sentence: 10, F9_2: 13, func_define: 14, E1: 15, E4: 18, E3: 20, sentence: 21, E7: 24, E6: 25, F9_1: 27, complex_sentence: 29, type_declare_sentence: 32, E10: 34, E: 42, E2: 43, for_sentence: 44, while_sentence: 46, E5: 47, expression_sentence: 48}, {}, {}, {F7: 83}, {F6: 85}, {}, {E10: 88, E: 42}, {}, {}, {}, {}, {}, {}, {F9_1: 91}, {}, {}, {}, {}, {}, {}, {}, {}, {F2: 93}, {}, {}, {}, {F5: 97}, {}, {E8: 4, type_statement: 100, E_dot_exp: 6, E9: 8, F9_2: 13, E1: 15, E4: 18, E3: 20, E7: 24, E6: 25, F9_1: 27, type_declare_sentence: 101, E10: 34, E: 42, E2: 43, loop_control_sentence: 102, E5: 47, expression_sentence: 103}, {}, {E9: 104, F9_2: 13, F9_1: 27, E10: 34, E: 42}, {}, {}, {}, {initialize: 107}, {}, {E8: 4, E9: 8, F9_2: 13, E4: 18, E3: 20, E7: 24, E6: 25, F9_1: 27, E10: 34, E: 42, E2: 109, E5: 47}, {}, {E8: 4, E_dot_exp: 6, E9: 8, F9_2: 13, E1: 110, E4: 18, E3: 20, E7: 24, E6: 25, F9_1: 27, E10: 34, E: 42, E2: 43, E5: 47}, {}, {}, {}, {}, {}, {}, {E8: 4, E_dot_exp: 111, E9: 8, F9_2: 13, E4: 18, E3: 20, E7: 24, E6: 25, F9_1: 27, E10: 34, E: 42, E2: 43, E5: 47}, {}, {}, {}, {}, {}, {F1: 66}, {}, {E8: 4, E9: 8, F9_2: 13, E7: 24, E6: 25, F9_1: 27, E10: 34, E: 42, E5: 114}, {}, {}, {}, {E8: 4, E9: 8, F9_2: 13, E4: 116, E7: 24, E6: 25, F9_1: 27, E10: 34, E: 42, E5: 47}, {}, {}, {}, {}, {E8: 118, E9: 8, F9_2: 13, F9_1: 27, E10: 34, E: 42}, {}, {E8: 4, E9: 8, F9_2: 13, E7: 119, F9_1: 27, E10: 34, E: 42}, {}, {}, {}, {E8: 4, E_dot_exp: 6, E9: 8, F9_2: 13, E1: 120, E4: 18, E3: 20, E7: 24, E6: 25, F9_1: 27, E10: 34, E: 42, E2: 43, E5: 47}, {E10: 121, E: 42}, {}, {}, {E8: 4, E9: 8, F9_2: 13, E4: 18, E3: 122, E7: 24, E6: 25, F9_1: 27, E10: 34, E: 42, E5: 47}, {}, {}, {}, {E8: 4, E9: 8, F9_2: 13, E7: 24, E6: 123, F9_1: 27, E10: 34, E: 42}, {}, {}, {id_list: 55}, {}, {E8: 4, type_statement: 100, E_dot_exp: 6, E9: 8, F9_2: 13, E1: 15, E4: 18, E3: 20, E7: 24, E6: 25, F9_1: 27, type_declare_sentence: 101, E10: 34, E: 42, E2: 43, loop_control_sentence: 125, E5: 47, expression_sentence: 103}, {}, {}, {id_list: 127}, {type_statement: 128, parameter: 129, list: 130}, {}, {E8: 4, E_dot_exp: 6, E9: 8, F9_2: 13, E1: 132, E4: 18, E3: 20, E7: 24, E6: 25, F9_1: 27, E10: 34, E: 42, E2: 43, E5: 47}, {F2: 93}, {F1: 66}, {F_dot_exp: 57}, {}, {}, {F5: 97}, {}, {F4: 74}, {}, {F8: 51}, {F7: 83}, {F1: 66}, {}, {F3: 78}, {F6: 85}, {}, {E8: 4, type_statement: 100, E_dot_exp: 6, E9: 8, F9_2: 13, E1: 15, E4: 18, E3: 20, E7: 24, E6: 25, F9_1: 27, type_declare_sentence: 101, E10: 34, E: 42, E2: 43, loop_control_sentence: 137, E5: 47, expression_sentence: 103}, {go_sentence: 1, E8: 4, type_statement: 5, E_dot_exp: 6, E9: 8, if_sentence: 10, F9_2: 13, func_define: 14, E1: 15, E4: 18, E3: 20, sentence: 138, E7: 24, E6: 25, F9_1: 27, complex_sentence: 29, type_declare_sentence: 32, E10: 34, E: 42, E2: 43, for_sentence: 44, while_sentence: 46, E5: 47, expression_sentence: 48}, {}, {}, {}, {}, {}, {F1: 66}, {}, {go_sentence: 1, E8: 4, type_statement: 5, E_dot_exp: 6, E9: 8, if_sentence: 10, F9_2: 13, func_define: 14, E1: 15, E4: 18, E3: 20, sentence: 142, E7: 24, E6: 25, F9_1: 27, complex_sentence: 143, type_declare_sentence: 32, E10: 34, E: 42, E2: 43, for_sentence: 44, state: 144, while_sentence: 46, E5: 47, expression_sentence: 48}, {go_sentence: 1, E8: 4, type_statement: 5, E_dot_exp: 6, E9: 8, if_sentence: 10, F9_2: 13, func_define: 14, E1: 15, E4: 18, E3: 20, sentence: 142, E7: 24, E6: 25, F9_1: 27, complex_sentence: 143, type_declare_sentence: 32, E10: 34, E: 42, E2: 43, for_sentence: 44, state: 145, while_sentence: 46, E5: 47, expression_sentence: 48}, {}, {}, {}, {}, {type_statement: 128, parameter: 147}, {complex_sentence: 148}, {}, {}, {}, {}, {complex_sentence: 150}, {}, {}, {go_sentence: 1, E8: 4, type_statement: 5, E_dot_exp: 6, E9: 8, if_sentence: 10, F9_2: 13, func_define: 14, E1: 15, E4: 18, E3: 20, sentence: 142, E7: 24, E6: 25, F9_1: 27, complex_sentence: 143, type_declare_sentence: 32, E10: 34, E: 42, E2: 43, for_sentence: 44, state: 151, while_sentence: 46, E5: 47, expression_sentence: 48}, {}, {}]

输入: [[<postion object : 0, 4>, 'int', 'int'], [<postion object : 0, 8>, 'id', 'func'], [<postion object : 0, 9>, '(', '('], [<postion object : 0, 13>, 'int', 'int'], [<postion object : 0, 14>, 'id', 'a'], [<postion object : 0, 15>, ',', ','], [<postion object : 0, 20>, 'int', 'int'], [<postion object : 0, 21>, 'id', 'b'], [<postion object : 0, 22>, ')', ')'], [<postion object : 0, 23>, '{', '{'], [<postion object : 1, 8>, 'int', 'int'], [<postion object : 1, 13>, 'id', 'tmp1'], [<postion object : 1, 14>, '=', '='], [<postion object : 1, 17>, 'id', 'a'], [<postion object : 1, 18>, '+', '+'], [<postion object : 1, 20>, 'id', 'b'], [<postion object : 1, 21>, ';', ';'], [<postion object : 2, 8>, 'int', 'int'], [<postion object : 2, 13>, 'id', 'tmp2'], [<postion object : 2, 14>, '=', '='], [<postion object : 2, 20>, 'id', 'tmp1'], [<postion object : 2, 21>, '+', '+'], [<postion object : 2, 23>, 'NUM', '1'], [<postion object : 2, 24>, ';', ';'], [<postion object : 3, 1>, '}', '}']]

归约方式:
                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                    
                                              ┆┄ type_statement ┄┄ int                                                                                                                                                                                              
                                              ┆                                                                                                                                                                                                                     
                                              ┆                                                                                                                                                                                                                     
                                              ┆                                                                                                                                                                                                                     
                                              ┆┄ id                                                                                                                                                                                                                 
                                              ┆                                                                                                                                                                                                                     
                                              ┆                                                                                                                                                                                                                     
                                              ┆                                                                                                                                                                                                                     
                                              ┆┄ (                                                                                                                                                                                                                  
                                              ┆                                                                                                                                                                                                                     
                                              ┆                                                                                                                                                                                                                     
                                              ┆                                                                                                                                                                                                                     
                                              ┆                            ┆┄ type_statement ┄┄ int                                                                                                                                                                 
                                              ┆                            ┆                                                                                                                                                                                        
                                              ┆       ┆┄ list ┄┄ parameter ┆                                                                                                                                                                                        
                                              ┆       ┆                    ┆                                                                                                                                                                                        
                                              ┆       ┆                    ┆┄ id                                                                                                                                                                                    
                                              ┆       ┆                                                                                                                                                                                                             
                                              ┆       ┆                                                                                                                                                                                                             
                                              ┆       ┆                                                                                                                                                                                                             
                                              ┆┄ list ┆┄ ,                                                                                                                                                                                                          
                                              ┆       ┆                                                                                                                                                                                                             
                                              ┆       ┆                                                                                                                                                                                                             
                                              ┆       ┆                                                                                                                                                                                                             
                                              ┆       ┆            ┆┄ type_statement ┄┄ int                                                                                                                                                                         
                                              ┆       ┆            ┆                                                                                                                                                                                                
                                              ┆       ┆┄ parameter ┆                                                                                                                                                                                                
                                              ┆                    ┆                                                                                                                                                                                                
                                              ┆                    ┆┄ id                                                                                                                                                                                            
                                              ┆                                                                                                                                                                                                                     
                                              ┆                                                                                                                                                                                                                     
                                              ┆                                                                                                                                                                                                                     
                                              ┆┄ )                                                                                                                                                                                                                  
                                              ┆                                                                                                                                                                                                                     
                   ┆┄ sentence ┄┄ func_define ┆                                                                                                                                                                                                                     
                   ┆                          ┆                                                                                                                                                                                                                     
                   ┆                          ┆                   ┆┄ {                                                                                                                                                                                              
                   ┆                          ┆                   ┆                                                                                                                                                                                                 
                   ┆                          ┆                   ┆                                                                                                                                                                                                 
                   ┆                          ┆                   ┆                                                                                                                                                                                                 
                   ┆                          ┆                   ┆                                                     ┆┄ type_statement ┄┄ int                                                                                                                    
                   ┆                          ┆                   ┆                                                     ┆                                                                                                                                           
                   ┆                          ┆                   ┆                                                     ┆                                                                                                                                           
                   ┆                          ┆                   ┆                                                     ┆                                                                                                                                           
                   ┆                          ┆                   ┆                                                     ┆┄ id_list ┄┄ id                                                                                                                            
                   ┆                          ┆                   ┆                                                     ┆                                                                                                                                           
                   ┆                          ┆                   ┆                                                     ┆                                                                                                                                           
                   ┆                          ┆                   ┆                                                     ┆                                                                                                                                           
                   ┆                          ┆                   ┆                                                     ┆             ┆┄ =                                                                                                                          
                   ┆                          ┆                   ┆                                                     ┆             ┆                                                                                                                             
                   ┆                          ┆                   ┆                                                     ┆             ┆                                                                                                                             
                   ┆                          ┆                   ┆                                                     ┆             ┆                                                                                                                             
                   ┆                          ┆                   ┆                ┆┄ sentence ┄┄ type_declare_sentence ┆┄ initialize ┆                                                      ┆┄ E7 ┄┄ E8 ┄┄ E9 ┄┄ E10 ┄┄ E ┄┄ id                                    
                   ┆                          ┆                   ┆                ┆                                    ┆             ┆                                                      ┆                                                                      
                   ┆                          ┆                   ┆                ┆                                    ┆             ┆                                                      ┆                                                                      
                   ┆                          ┆                   ┆                ┆                                    ┆             ┆                                                      ┆                                                                      
                   ┆                          ┆                   ┆                ┆                                    ┆             ┆┄ E1 ┄┄ E_dot_exp ┄┄ E2 ┄┄ E3 ┄┄ E4 ┄┄ E5 ┄┄ E6 ┄┄ E7 ┆┄ F7 ┄┄ +                                                             
                   ┆                          ┆                   ┆                ┆                                    ┆                                                                    ┆                                                                      
                   ┆                          ┆                   ┆                ┆                                    ┆                                                                    ┆                                                                      
                   ┆                          ┆                   ┆                ┆                                    ┆                                                                    ┆                                                                      
                   ┆                          ┆                   ┆                ┆                                    ┆                                                                    ┆┄ E8 ┄┄ E9 ┄┄ E10 ┄┄ E ┄┄ id                                          
                   ┆                          ┆                   ┆                ┆                                    ┆                                                                                                                                           
                   ┆                          ┆                   ┆                ┆                                    ┆                                                                                                                                           
                   ┆                          ┆                   ┆                ┆                                    ┆                                                                                                                                           
                   ┆                          ┆                   ┆                ┆                                    ┆┄ ;                                                                                                                                        
                   ┆                          ┆                   ┆                ┆                                                                                                                                                                                
                   ┆                          ┆                   ┆                ┆                                                                                                                                                                                
                   ┆                          ┆                   ┆                ┆                                                                                                                                                                                
                   ┆                          ┆┄ complex_sentence ┆                ┆                                                     ┆┄ type_statement ┄┄ int                                                                                                   
S ┄┄ sentence_list ┆                                              ┆                ┆                                                     ┆                                                                                                                          
                   ┆                                              ┆┄ sentence_list ┆                                                     ┆                                                                                                                          
                   ┆                                              ┆                ┆                                                     ┆                                                                                                                          
                   ┆                                              ┆                ┆                                                     ┆┄ id_list ┄┄ id                                                                                                           
                   ┆                                              ┆                ┆                                                     ┆                                                                                                                          
                   ┆                                              ┆                ┆                                                     ┆                                                                                                                          
                   ┆                                              ┆                ┆                                                     ┆                                                                                                                          
                   ┆                                              ┆                ┆                                                     ┆             ┆┄ =                                                                                                         
                   ┆                                              ┆                ┆                                                     ┆             ┆                                                                                                            
                   ┆                                              ┆                ┆                                                     ┆             ┆                                                                                                            
                   ┆                                              ┆                ┆                                                     ┆             ┆                                                                                                            
                   ┆                                              ┆                ┆                ┆┄ sentence ┄┄ type_declare_sentence ┆┄ initialize ┆                                                      ┆┄ E7 ┄┄ E8 ┄┄ E9 ┄┄ E10 ┄┄ E ┄┄ id                   
                   ┆                                              ┆                ┆                ┆                                    ┆             ┆                                                      ┆                                                     
                   ┆                                              ┆                ┆                ┆                                    ┆             ┆                                                      ┆                                                     
                   ┆                                              ┆                ┆                ┆                                    ┆             ┆                                                      ┆                                                     
                   ┆                                              ┆                ┆                ┆                                    ┆             ┆┄ E1 ┄┄ E_dot_exp ┄┄ E2 ┄┄ E3 ┄┄ E4 ┄┄ E5 ┄┄ E6 ┄┄ E7 ┆┄ F7 ┄┄ +                                            
                   ┆                                              ┆                ┆                ┆                                    ┆                                                                    ┆                                                     
                   ┆                                              ┆                ┆                ┆                                    ┆                                                                    ┆                                                     
                   ┆                                              ┆                ┆                ┆                                    ┆                                                                    ┆                                                     
                   ┆                                              ┆                ┆┄ sentence_list ┆                                    ┆                                                                    ┆┄ E8 ┄┄ E9 ┄┄ E10 ┄┄ E ┄┄ NUM                        
                   ┆                                              ┆                                 ┆                                    ┆                                                                                                                          
                   ┆                                              ┆                                 ┆                                    ┆                                                                                                                          
                   ┆                                              ┆                                 ┆                                    ┆                                                                                                                          
                   ┆                                              ┆                                 ┆                                    ┆┄ ;                                                                                                                       
                   ┆                                              ┆                                 ┆                                                                                                                                                               
                   ┆                                              ┆                                 ┆                                                                                                                                                               
                   ┆                                              ┆                                 ┆                                                                                                                                                               
                   ┆                                              ┆                                 ┆┄ sentence_list                                                                                                                                                
                   ┆                                              ┆                                                                                                                                                                                                 
                   ┆                                              ┆                                                                                                                                                                                                 
                   ┆                                              ┆                                                                                                                                                                                                 
                   ┆                                              ┆┄ }                                                                                                                                                                                              
                   ┆                                                                                                                                                                                                                                                
                   ┆                                                                                                                                                                                                                                                
                   ┆                                                                                                                                                                                                                                                
                   ┆┄ sentence_list                                                                                                                                                                                                                                 
                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                    

