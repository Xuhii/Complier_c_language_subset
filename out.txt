[<postion object : 0, 4>	int	 'int' ]
[<postion object : 0, 8>	id	 'num1' ]
[<postion object : 0, 9>	,	 ',' ]
[<postion object : 0, 13>	id	 'num2' ]
[<postion object : 0, 14>	,	 ',' ]
[<postion object : 0, 16>	id	 'op' ]
[<postion object : 0, 17>	,	 ',' ]
[<postion object : 0, 21>	id	 'ans' ]
[<postion object : 0, 22>	=	 '=' ]
[<postion object : 0, 24>	NUM	 '1' ]
[<postion object : 0, 25>	,	 ',' ]
[<postion object : 0, 26>	NUM	 '2' ]
[<postion object : 0, 27>	,	 ',' ]
[<postion object : 0, 28>	NUM	 '3' ]
[<postion object : 0, 29>	,	 ',' ]
[<postion object : 0, 30>	NUM	 '4' ]
[<postion object : 0, 31>	;	 ';' ]
[<postion object : 0, 33>	wrong	 '' ]


文法及分析表: Gammar:
{[parameter_list -> ( list )],
 [E9 -> E10],
 [type_statement -> char],
 [F1 -> =],
 [id_list -> id],
 [state -> sentence],
 [E11 -> E],
 [E4 -> E5],
 [parameter -> type_statement],
 [sentence_list -> e_],
 [sentence -> while_sentence],
 [list -> parameter],
 [while_sentence -> while ( expression ) state],
 [sentence -> if_sentence],
 [sentence -> func_declare],
 [F3 -> and],
 [E11 -> E11 , E],
 [for_sentence -> for ( loop_control_sentence ) sentence],
 [go_sentence -> RETURN expression ;],
 [F4 -> ==],
 [initialize -> = E1],
 [F5 -> >=],
 [go_sentence -> BREAK ;],
 [if_sentence -> if ( E1 ) state else state],
 [E -> id ( E1 )],
 [E1 -> E1 F1 E2],
 [E5 -> E6],
 [go_sentence -> RETURN ;],
 [F9_1 -> ++],
 [type_statement -> void],
 [sentence -> go_sentence],
 [F4 -> !=],
 [E5 -> E5 F5 E6],
 [E9 -> F9_1 E10],
 [E -> NUM],
 [S_ -> S],
 [F5 -> >],
 [state -> complex_sentence],
 [sentence -> for_sentence],
 [E2 -> E2 F2 E3],
 [go_sentence -> CONTINUE ;],
 [type_statement -> int],
 [F9_2 -> &],
 [complex_sentence -> { sentence_list }],
 [F1 -> /=],
 [func_declare -> type_statement id parameter_list ;],
 [F8 -> %],
 [F9_2 -> *],
 [F1 -> %=],
 [F1 -> -=],
 [sentence -> expression_sentence],
 [F1 -> *=],
 [sentence -> func_define],
 [E7 -> E7 F7 E8],
 [F5 -> <],
 [F9_1 -> --],
 [E8 -> E8 F8 E9],
 [F1 -> +=],
 [E -> id],
 [F6 -> <<],
 [F6 -> >>],
 [F2 -> or],
 [type_statement -> float],
 [F1 -> <<=],
 [list -> list , parameter],
 [if_sentence -> if ( E1 ) state],
 [E4 -> E4 F4 E5],
 [F8 -> /],
 [E10 -> E11],
 [F9_2 -> -],
 [E -> ( E1 )],
 [E6 -> E6 F6 E7],
 [E2 -> E3],
 [loop_control_sentence -> type_declare_sentence],
 [type_declare_sentence -> type_statement id_list initialize ;],
 [E9 -> F9_2 E10],
 [sentence_list -> sentence],
 [for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence],
 [E3 -> E3 F3 E4],
 [E -> STR],
 [expression_sentence -> E1 ;],
 [E9 -> E10 F9_1],
 [E3 -> E4],
 [loop_control_sentence -> expression_sentence],
 [F1 -> >>=],
 [parameter -> type_statement id],
 [E6 -> E7],
 [id_list -> id , id_list],
 [E1 -> E2],
 [F7 -> +],
 [sentence -> type_declare_sentence],
 [E10 -> E10 [ E10 ]],
 [F7 -> -],
 [F5 -> <=],
 [sentence -> complex_sentence],
 [initialize -> e_],
 [E8 -> E9],
 [F8 -> *],
 [E7 -> E8],
 [func_define -> type_statement id parameter_list complex_sentence],
 [S -> sentence_list],
 [sentence_list -> sentence sentence_list]}

ACTION TABEL:
[{if: <S,25>, ++: <S,12>, while: <S,19>, int: <S,16>, for: <S,46>, -: <S,39>, &: <S,44>, *: <S,38>, --: <S,18>, RETURN: <S,11>, char: <S,24>, (: <S,34>, CONTINUE: <S,2>, STR: <S,42>, NUM: <S,35>, id: <S,30>, {: <S,7>, float: <S,32>, void: <S,8>, $: <R,[sentence_list -> ]>, }: <R,[sentence_list -> ]>, BREAK: <S,43>}, {STR: <S,42>, NUM: <S,35>, id: <S,30>, (: <S,34>}, {;: <S,49>}, {id: <S,50>}, {}: <R,[sentence -> func_declare]>, CONTINUE: <R,[sentence -> func_declare]>, {: <R,[sentence -> func_declare]>, void: <R,[sentence -> func_declare]>, RETURN: <R,[sentence -> func_declare]>, ++: <R,[sentence -> func_declare]>, int: <R,[sentence -> func_declare]>, else: <R,[sentence -> func_declare]>, --: <R,[sentence -> func_declare]>, while: <R,[sentence -> func_declare]>, char: <R,[sentence -> func_declare]>, if: <R,[sentence -> func_declare]>, id: <R,[sentence -> func_declare]>, float: <R,[sentence -> func_declare]>, (: <R,[sentence -> func_declare]>, NUM: <R,[sentence -> func_declare]>, *: <R,[sentence -> func_declare]>, -: <R,[sentence -> func_declare]>, STR: <R,[sentence -> func_declare]>, $: <R,[sentence -> func_declare]>, BREAK: <R,[sentence -> func_declare]>, &: <R,[sentence -> func_declare]>, for: <R,[sentence -> func_declare]>}, {>>=: <R,[E5 -> E6]>, *=: <R,[E5 -> E6]>, ==: <R,[E5 -> E6]>, <<=: <R,[E5 -> E6]>, ;: <R,[E5 -> E6]>, -=: <R,[E5 -> E6]>, +=: <R,[E5 -> E6]>, or: <R,[E5 -> E6]>, <: <R,[E5 -> E6]>, ): <R,[E5 -> E6]>, >: <R,[E5 -> E6]>, %=: <R,[E5 -> E6]>, >=: <R,[E5 -> E6]>, /=: <R,[E5 -> E6]>, <=: <R,[E5 -> E6]>, =: <R,[E5 -> E6]>, !=: <R,[E5 -> E6]>, and: <R,[E5 -> E6]>, >>: <S,54>, <<: <S,53>}, {/: <S,57>, *: <S,58>, %: <S,55>, >>=: <R,[E7 -> E8]>, ==: <R,[E7 -> E8]>, <<=: <R,[E7 -> E8]>, ;: <R,[E7 -> E8]>, +=: <R,[E7 -> E8]>, <<: <R,[E7 -> E8]>, +: <R,[E7 -> E8]>, >>: <R,[E7 -> E8]>, or: <R,[E7 -> E8]>, ): <R,[E7 -> E8]>, >: <R,[E7 -> E8]>, <=: <R,[E7 -> E8]>, !=: <R,[E7 -> E8]>, *=: <R,[E7 -> E8]>, -=: <R,[E7 -> E8]>, -: <R,[E7 -> E8]>, <: <R,[E7 -> E8]>, %=: <R,[E7 -> E8]>, >=: <R,[E7 -> E8]>, /=: <R,[E7 -> E8]>, =: <R,[E7 -> E8]>, and: <R,[E7 -> E8]>}, {if: <S,25>, ++: <S,12>, while: <S,19>, int: <S,16>, for: <S,46>, -: <S,39>, &: <S,44>, *: <S,38>, --: <S,18>, RETURN: <S,11>, char: <S,24>, (: <S,34>, CONTINUE: <S,2>, STR: <S,42>, NUM: <S,35>, id: <S,30>, {: <S,7>, float: <S,32>, void: <S,8>, $: <R,[sentence_list -> ]>, }: <R,[sentence_list -> ]>, BREAK: <S,43>}, {,: <R,[type_statement -> void]>, ): <R,[type_statement -> void]>, id: <R,[type_statement -> void]>}, {>>=: <S,60>, %=: <S,67>, =: <S,69>, -=: <S,65>, +=: <S,66>, /=: <S,68>, *=: <S,61>, <<=: <S,62>, ;: <S,63>}, {}: <R,[sentence -> complex_sentence]>, CONTINUE: <R,[sentence -> complex_sentence]>, {: <R,[sentence -> complex_sentence]>, void: <R,[sentence -> complex_sentence]>, RETURN: <R,[sentence -> complex_sentence]>, ++: <R,[sentence -> complex_sentence]>, int: <R,[sentence -> complex_sentence]>, else: <R,[sentence -> complex_sentence]>, --: <R,[sentence -> complex_sentence]>, while: <R,[sentence -> complex_sentence]>, char: <R,[sentence -> complex_sentence]>, if: <R,[sentence -> complex_sentence]>, id: <R,[sentence -> complex_sentence]>, float: <R,[sentence -> complex_sentence]>, (: <R,[sentence -> complex_sentence]>, NUM: <R,[sentence -> complex_sentence]>, *: <R,[sentence -> complex_sentence]>, -: <R,[sentence -> complex_sentence]>, STR: <R,[sentence -> complex_sentence]>, $: <R,[sentence -> complex_sentence]>, BREAK: <R,[sentence -> complex_sentence]>, &: <R,[sentence -> complex_sentence]>, for: <R,[sentence -> complex_sentence]>}, {;: <S,70>, expression: <S,71>}, {>>=: <R,[F9_1 -> ++]>, ==: <R,[F9_1 -> ++]>, <<=: <R,[F9_1 -> ++]>, ;: <R,[F9_1 -> ++]>, +=: <R,[F9_1 -> ++]>, <<: <R,[F9_1 -> ++]>, /: <R,[F9_1 -> ++]>, +: <R,[F9_1 -> ++]>, >>: <R,[F9_1 -> ++]>, or: <R,[F9_1 -> ++]>, ): <R,[F9_1 -> ++]>, %: <R,[F9_1 -> ++]>, >: <R,[F9_1 -> ++]>, <=: <R,[F9_1 -> ++]>, !=: <R,[F9_1 -> ++]>, *=: <R,[F9_1 -> ++]>, id: <R,[F9_1 -> ++]>, -=: <R,[F9_1 -> ++]>, (: <R,[F9_1 -> ++]>, NUM: <R,[F9_1 -> ++]>, *: <R,[F9_1 -> ++]>, -: <R,[F9_1 -> ++]>, <: <R,[F9_1 -> ++]>, %=: <R,[F9_1 -> ++]>, >=: <R,[F9_1 -> ++]>, STR: <R,[F9_1 -> ++]>, /=: <R,[F9_1 -> ++]>, =: <R,[F9_1 -> ++]>, and: <R,[F9_1 -> ++]>}, {STR: <S,42>, NUM: <S,35>, id: <S,30>, (: <S,34>}, {or: <S,74>, >>=: <R,[E1 -> E2]>, ): <R,[E1 -> E2]>, *=: <R,[E1 -> E2]>, <<=: <R,[E1 -> E2]>, ;: <R,[E1 -> E2]>, -=: <R,[E1 -> E2]>, +=: <R,[E1 -> E2]>, %=: <R,[E1 -> E2]>, /=: <R,[E1 -> E2]>, =: <R,[E1 -> E2]>}, {}: <R,[sentence -> for_sentence]>, CONTINUE: <R,[sentence -> for_sentence]>, {: <R,[sentence -> for_sentence]>, void: <R,[sentence -> for_sentence]>, RETURN: <R,[sentence -> for_sentence]>, ++: <R,[sentence -> for_sentence]>, int: <R,[sentence -> for_sentence]>, else: <R,[sentence -> for_sentence]>, --: <R,[sentence -> for_sentence]>, while: <R,[sentence -> for_sentence]>, char: <R,[sentence -> for_sentence]>, if: <R,[sentence -> for_sentence]>, id: <R,[sentence -> for_sentence]>, float: <R,[sentence -> for_sentence]>, (: <R,[sentence -> for_sentence]>, NUM: <R,[sentence -> for_sentence]>, *: <R,[sentence -> for_sentence]>, -: <R,[sentence -> for_sentence]>, STR: <R,[sentence -> for_sentence]>, $: <R,[sentence -> for_sentence]>, BREAK: <R,[sentence -> for_sentence]>, &: <R,[sentence -> for_sentence]>, for: <R,[sentence -> for_sentence]>}, {,: <R,[type_statement -> int]>, ): <R,[type_statement -> int]>, id: <R,[type_statement -> int]>}, {if: <S,25>, ++: <S,12>, while: <S,19>, int: <S,16>, for: <S,46>, -: <S,39>, &: <S,44>, *: <S,38>, --: <S,18>, RETURN: <S,11>, char: <S,24>, (: <S,34>, CONTINUE: <S,2>, STR: <S,42>, $: <R,[sentence_list -> ]>, }: <R,[sentence_list -> ]>, NUM: <S,35>, id: <S,30>, {: <S,7>, float: <S,32>, void: <S,8>, BREAK: <S,43>}, {>>=: <R,[F9_1 -> --]>, ==: <R,[F9_1 -> --]>, <<=: <R,[F9_1 -> --]>, ;: <R,[F9_1 -> --]>, +=: <R,[F9_1 -> --]>, <<: <R,[F9_1 -> --]>, /: <R,[F9_1 -> --]>, +: <R,[F9_1 -> --]>, >>: <R,[F9_1 -> --]>, or: <R,[F9_1 -> --]>, ): <R,[F9_1 -> --]>, %: <R,[F9_1 -> --]>, >: <R,[F9_1 -> --]>, <=: <R,[F9_1 -> --]>, !=: <R,[F9_1 -> --]>, *=: <R,[F9_1 -> --]>, id: <R,[F9_1 -> --]>, -=: <R,[F9_1 -> --]>, (: <R,[F9_1 -> --]>, NUM: <R,[F9_1 -> --]>, *: <R,[F9_1 -> --]>, -: <R,[F9_1 -> --]>, <: <R,[F9_1 -> --]>, %=: <R,[F9_1 -> --]>, >=: <R,[F9_1 -> --]>, STR: <R,[F9_1 -> --]>, /=: <R,[F9_1 -> --]>, =: <R,[F9_1 -> --]>, and: <R,[F9_1 -> --]>}, {(: <S,76>}, {>>=: <R,[E10 -> E11]>, ==: <R,[E10 -> E11]>, <<=: <R,[E10 -> E11]>, ;: <R,[E10 -> E11]>, +=: <R,[E10 -> E11]>, <<: <R,[E10 -> E11]>, /: <R,[E10 -> E11]>, +: <R,[E10 -> E11]>, >>: <R,[E10 -> E11]>, or: <R,[E10 -> E11]>, ++: <R,[E10 -> E11]>, ): <R,[E10 -> E11]>, [: <R,[E10 -> E11]>, %: <R,[E10 -> E11]>, >: <R,[E10 -> E11]>, --: <R,[E10 -> E11]>, <=: <R,[E10 -> E11]>, !=: <R,[E10 -> E11]>, *=: <R,[E10 -> E11]>, -=: <R,[E10 -> E11]>, *: <R,[E10 -> E11]>, -: <R,[E10 -> E11]>, <: <R,[E10 -> E11]>, ]: <R,[E10 -> E11]>, %=: <R,[E10 -> E11]>, >=: <R,[E10 -> E11]>, /=: <R,[E10 -> E11]>, =: <R,[E10 -> E11]>, and: <R,[E10 -> E11]>, ,: <S,77>}, {and: <S,79>, >>=: <R,[E2 -> E3]>, *=: <R,[E2 -> E3]>, <<=: <R,[E2 -> E3]>, ;: <R,[E2 -> E3]>, -=: <R,[E2 -> E3]>, +=: <R,[E2 -> E3]>, or: <R,[E2 -> E3]>, ): <R,[E2 -> E3]>, %=: <R,[E2 -> E3]>, /=: <R,[E2 -> E3]>, =: <R,[E2 -> E3]>}, {}: <R,[sentence -> func_define]>, CONTINUE: <R,[sentence -> func_define]>, {: <R,[sentence -> func_define]>, void: <R,[sentence -> func_define]>, RETURN: <R,[sentence -> func_define]>, ++: <R,[sentence -> func_define]>, int: <R,[sentence -> func_define]>, else: <R,[sentence -> func_define]>, --: <R,[sentence -> func_define]>, while: <R,[sentence -> func_define]>, char: <R,[sentence -> func_define]>, if: <R,[sentence -> func_define]>, id: <R,[sentence -> func_define]>, float: <R,[sentence -> func_define]>, (: <R,[sentence -> func_define]>, NUM: <R,[sentence -> func_define]>, *: <R,[sentence -> func_define]>, -: <R,[sentence -> func_define]>, STR: <R,[sentence -> func_define]>, $: <R,[sentence -> func_define]>, BREAK: <R,[sentence -> func_define]>, &: <R,[sentence -> func_define]>, for: <R,[sentence -> func_define]>}, {-: <S,80>, +: <S,82>, >>=: <R,[E6 -> E7]>, ==: <R,[E6 -> E7]>, <<=: <R,[E6 -> E7]>, ;: <R,[E6 -> E7]>, +=: <R,[E6 -> E7]>, <<: <R,[E6 -> E7]>, >>: <R,[E6 -> E7]>, or: <R,[E6 -> E7]>, ): <R,[E6 -> E7]>, >: <R,[E6 -> E7]>, <=: <R,[E6 -> E7]>, !=: <R,[E6 -> E7]>, *=: <R,[E6 -> E7]>, -=: <R,[E6 -> E7]>, <: <R,[E6 -> E7]>, %=: <R,[E6 -> E7]>, >=: <R,[E6 -> E7]>, /=: <R,[E6 -> E7]>, =: <R,[E6 -> E7]>, and: <R,[E6 -> E7]>}, {,: <R,[type_statement -> char]>, ): <R,[type_statement -> char]>, id: <R,[type_statement -> char]>}, {(: <S,83>}, {>>=: <R,[E8 -> E9]>, ==: <R,[E8 -> E9]>, <<=: <R,[E8 -> E9]>, ;: <R,[E8 -> E9]>, +=: <R,[E8 -> E9]>, <<: <R,[E8 -> E9]>, /: <R,[E8 -> E9]>, +: <R,[E8 -> E9]>, >>: <R,[E8 -> E9]>, or: <R,[E8 -> E9]>, ): <R,[E8 -> E9]>, %: <R,[E8 -> E9]>, >: <R,[E8 -> E9]>, <=: <R,[E8 -> E9]>, !=: <R,[E8 -> E9]>, *=: <R,[E8 -> E9]>, -=: <R,[E8 -> E9]>, *: <R,[E8 -> E9]>, -: <R,[E8 -> E9]>, <: <R,[E8 -> E9]>, %=: <R,[E8 -> E9]>, >=: <R,[E8 -> E9]>, /=: <R,[E8 -> E9]>, =: <R,[E8 -> E9]>, and: <R,[E8 -> E9]>}, {}: <R,[sentence -> type_declare_sentence]>, CONTINUE: <R,[sentence -> type_declare_sentence]>, {: <R,[sentence -> type_declare_sentence]>, void: <R,[sentence -> type_declare_sentence]>, RETURN: <R,[sentence -> type_declare_sentence]>, ++: <R,[sentence -> type_declare_sentence]>, int: <R,[sentence -> type_declare_sentence]>, else: <R,[sentence -> type_declare_sentence]>, --: <R,[sentence -> type_declare_sentence]>, while: <R,[sentence -> type_declare_sentence]>, char: <R,[sentence -> type_declare_sentence]>, if: <R,[sentence -> type_declare_sentence]>, id: <R,[sentence -> type_declare_sentence]>, float: <R,[sentence -> type_declare_sentence]>, (: <R,[sentence -> type_declare_sentence]>, NUM: <R,[sentence -> type_declare_sentence]>, *: <R,[sentence -> type_declare_sentence]>, -: <R,[sentence -> type_declare_sentence]>, STR: <R,[sentence -> type_declare_sentence]>, $: <R,[sentence -> type_declare_sentence]>, BREAK: <R,[sentence -> type_declare_sentence]>, &: <R,[sentence -> type_declare_sentence]>, for: <R,[sentence -> type_declare_sentence]>}, {}: <R,[sentence -> expression_sentence]>, CONTINUE: <R,[sentence -> expression_sentence]>, {: <R,[sentence -> expression_sentence]>, void: <R,[sentence -> expression_sentence]>, RETURN: <R,[sentence -> expression_sentence]>, ++: <R,[sentence -> expression_sentence]>, int: <R,[sentence -> expression_sentence]>, else: <R,[sentence -> expression_sentence]>, --: <R,[sentence -> expression_sentence]>, while: <R,[sentence -> expression_sentence]>, char: <R,[sentence -> expression_sentence]>, if: <R,[sentence -> expression_sentence]>, id: <R,[sentence -> expression_sentence]>, float: <R,[sentence -> expression_sentence]>, (: <R,[sentence -> expression_sentence]>, NUM: <R,[sentence -> expression_sentence]>, *: <R,[sentence -> expression_sentence]>, -: <R,[sentence -> expression_sentence]>, STR: <R,[sentence -> expression_sentence]>, $: <R,[sentence -> expression_sentence]>, BREAK: <R,[sentence -> expression_sentence]>, &: <R,[sentence -> expression_sentence]>, for: <R,[sentence -> expression_sentence]>}, {$: <R,[S -> sentence_list]>}, {(: <S,84>, >>=: <R,[E -> id]>, ==: <R,[E -> id]>, ,: <R,[E -> id]>, <<=: <R,[E -> id]>, ;: <R,[E -> id]>, +=: <R,[E -> id]>, <<: <R,[E -> id]>, /: <R,[E -> id]>, +: <R,[E -> id]>, >>: <R,[E -> id]>, or: <R,[E -> id]>, ++: <R,[E -> id]>, ): <R,[E -> id]>, [: <R,[E -> id]>, %: <R,[E -> id]>, >: <R,[E -> id]>, --: <R,[E -> id]>, <=: <R,[E -> id]>, !=: <R,[E -> id]>, *=: <R,[E -> id]>, -=: <R,[E -> id]>, *: <R,[E -> id]>, -: <R,[E -> id]>, <: <R,[E -> id]>, ]: <R,[E -> id]>, %=: <R,[E -> id]>, >=: <R,[E -> id]>, /=: <R,[E -> id]>, =: <R,[E -> id]>, and: <R,[E -> id]>}, {}: <R,[sentence -> go_sentence]>, CONTINUE: <R,[sentence -> go_sentence]>, {: <R,[sentence -> go_sentence]>, void: <R,[sentence -> go_sentence]>, RETURN: <R,[sentence -> go_sentence]>, ++: <R,[sentence -> go_sentence]>, int: <R,[sentence -> go_sentence]>, else: <R,[sentence -> go_sentence]>, --: <R,[sentence -> go_sentence]>, while: <R,[sentence -> go_sentence]>, char: <R,[sentence -> go_sentence]>, if: <R,[sentence -> go_sentence]>, id: <R,[sentence -> go_sentence]>, float: <R,[sentence -> go_sentence]>, (: <R,[sentence -> go_sentence]>, NUM: <R,[sentence -> go_sentence]>, *: <R,[sentence -> go_sentence]>, -: <R,[sentence -> go_sentence]>, STR: <R,[sentence -> go_sentence]>, $: <R,[sentence -> go_sentence]>, BREAK: <R,[sentence -> go_sentence]>, &: <R,[sentence -> go_sentence]>, for: <R,[sentence -> go_sentence]>}, {,: <R,[type_statement -> float]>, ): <R,[type_statement -> float]>, id: <R,[type_statement -> float]>}, {>>=: <R,[E4 -> E5]>, *=: <R,[E4 -> E5]>, ==: <R,[E4 -> E5]>, <<=: <R,[E4 -> E5]>, ;: <R,[E4 -> E5]>, -=: <R,[E4 -> E5]>, +=: <R,[E4 -> E5]>, or: <R,[E4 -> E5]>, ): <R,[E4 -> E5]>, %=: <R,[E4 -> E5]>, /=: <R,[E4 -> E5]>, =: <R,[E4 -> E5]>, !=: <R,[E4 -> E5]>, and: <R,[E4 -> E5]>, >: <S,86>, <=: <S,89>, <: <S,85>, >=: <S,88>}, {++: <S,12>, -: <S,39>, &: <S,44>, *: <S,38>, --: <S,18>, (: <S,34>, STR: <S,42>, NUM: <S,35>, id: <S,30>}, {>>=: <R,[E -> NUM]>, ==: <R,[E -> NUM]>, ,: <R,[E -> NUM]>, <<=: <R,[E -> NUM]>, ;: <R,[E -> NUM]>, +=: <R,[E -> NUM]>, <<: <R,[E -> NUM]>, /: <R,[E -> NUM]>, +: <R,[E -> NUM]>, >>: <R,[E -> NUM]>, or: <R,[E -> NUM]>, ++: <R,[E -> NUM]>, ): <R,[E -> NUM]>, [: <R,[E -> NUM]>, %: <R,[E -> NUM]>, >: <R,[E -> NUM]>, --: <R,[E -> NUM]>, <=: <R,[E -> NUM]>, !=: <R,[E -> NUM]>, *=: <R,[E -> NUM]>, -=: <R,[E -> NUM]>, *: <R,[E -> NUM]>, -: <R,[E -> NUM]>, <: <R,[E -> NUM]>, ]: <R,[E -> NUM]>, %=: <R,[E -> NUM]>, >=: <R,[E -> NUM]>, /=: <R,[E -> NUM]>, =: <R,[E -> NUM]>, and: <R,[E -> NUM]>}, {>>=: <R,[E11 -> E]>, ==: <R,[E11 -> E]>, ,: <R,[E11 -> E]>, <<=: <R,[E11 -> E]>, ;: <R,[E11 -> E]>, +=: <R,[E11 -> E]>, <<: <R,[E11 -> E]>, /: <R,[E11 -> E]>, +: <R,[E11 -> E]>, >>: <R,[E11 -> E]>, or: <R,[E11 -> E]>, ++: <R,[E11 -> E]>, ): <R,[E11 -> E]>, [: <R,[E11 -> E]>, %: <R,[E11 -> E]>, >: <R,[E11 -> E]>, --: <R,[E11 -> E]>, <=: <R,[E11 -> E]>, !=: <R,[E11 -> E]>, *=: <R,[E11 -> E]>, -=: <R,[E11 -> E]>, *: <R,[E11 -> E]>, -: <R,[E11 -> E]>, <: <R,[E11 -> E]>, ]: <R,[E11 -> E]>, %=: <R,[E11 -> E]>, >=: <R,[E11 -> E]>, /=: <R,[E11 -> E]>, =: <R,[E11 -> E]>, and: <R,[E11 -> E]>}, {}: <R,[sentence -> while_sentence]>, CONTINUE: <R,[sentence -> while_sentence]>, {: <R,[sentence -> while_sentence]>, void: <R,[sentence -> while_sentence]>, RETURN: <R,[sentence -> while_sentence]>, ++: <R,[sentence -> while_sentence]>, int: <R,[sentence -> while_sentence]>, else: <R,[sentence -> while_sentence]>, --: <R,[sentence -> while_sentence]>, while: <R,[sentence -> while_sentence]>, char: <R,[sentence -> while_sentence]>, if: <R,[sentence -> while_sentence]>, id: <R,[sentence -> while_sentence]>, float: <R,[sentence -> while_sentence]>, (: <R,[sentence -> while_sentence]>, NUM: <R,[sentence -> while_sentence]>, *: <R,[sentence -> while_sentence]>, -: <R,[sentence -> while_sentence]>, STR: <R,[sentence -> while_sentence]>, $: <R,[sentence -> while_sentence]>, BREAK: <R,[sentence -> while_sentence]>, &: <R,[sentence -> while_sentence]>, for: <R,[sentence -> while_sentence]>}, {id: <R,[F9_2 -> *]>, STR: <R,[F9_2 -> *]>, (: <R,[F9_2 -> *]>, NUM: <R,[F9_2 -> *]>}, {id: <R,[F9_2 -> -]>, STR: <R,[F9_2 -> -]>, (: <R,[F9_2 -> -]>, NUM: <R,[F9_2 -> -]>}, {++: <S,12>, >>=: <R,[E9 -> E10]>, ==: <R,[E9 -> E10]>, <<=: <R,[E9 -> E10]>, ;: <R,[E9 -> E10]>, +=: <R,[E9 -> E10]>, <<: <R,[E9 -> E10]>, /: <R,[E9 -> E10]>, +: <R,[E9 -> E10]>, >>: <R,[E9 -> E10]>, or: <R,[E9 -> E10]>, ): <R,[E9 -> E10]>, %: <R,[E9 -> E10]>, >: <R,[E9 -> E10]>, <=: <R,[E9 -> E10]>, !=: <R,[E9 -> E10]>, *=: <R,[E9 -> E10]>, -=: <R,[E9 -> E10]>, *: <R,[E9 -> E10]>, -: <R,[E9 -> E10]>, <: <R,[E9 -> E10]>, %=: <R,[E9 -> E10]>, >=: <R,[E9 -> E10]>, /=: <R,[E9 -> E10]>, =: <R,[E9 -> E10]>, and: <R,[E9 -> E10]>, --: <S,18>, [: <S,91>}, {!=: <S,95>, >>=: <R,[E3 -> E4]>, *=: <R,[E3 -> E4]>, <<=: <R,[E3 -> E4]>, ;: <R,[E3 -> E4]>, -=: <R,[E3 -> E4]>, +=: <R,[E3 -> E4]>, or: <R,[E3 -> E4]>, ): <R,[E3 -> E4]>, %=: <R,[E3 -> E4]>, /=: <R,[E3 -> E4]>, =: <R,[E3 -> E4]>, and: <R,[E3 -> E4]>, ==: <S,93>}, {>>=: <R,[E -> STR]>, ==: <R,[E -> STR]>, ,: <R,[E -> STR]>, <<=: <R,[E -> STR]>, ;: <R,[E -> STR]>, +=: <R,[E -> STR]>, <<: <R,[E -> STR]>, /: <R,[E -> STR]>, +: <R,[E -> STR]>, >>: <R,[E -> STR]>, or: <R,[E -> STR]>, ++: <R,[E -> STR]>, ): <R,[E -> STR]>, [: <R,[E -> STR]>, %: <R,[E -> STR]>, >: <R,[E -> STR]>, --: <R,[E -> STR]>, <=: <R,[E -> STR]>, !=: <R,[E -> STR]>, *=: <R,[E -> STR]>, -=: <R,[E -> STR]>, *: <R,[E -> STR]>, -: <R,[E -> STR]>, <: <R,[E -> STR]>, ]: <R,[E -> STR]>, %=: <R,[E -> STR]>, >=: <R,[E -> STR]>, /=: <R,[E -> STR]>, =: <R,[E -> STR]>, and: <R,[E -> STR]>}, {;: <S,96>}, {id: <R,[F9_2 -> &]>, STR: <R,[F9_2 -> &]>, (: <R,[F9_2 -> &]>, NUM: <R,[F9_2 -> &]>}, {$: <ACC,-1>}, {(: <S,97>}, {}: <R,[sentence -> if_sentence]>, CONTINUE: <R,[sentence -> if_sentence]>, {: <R,[sentence -> if_sentence]>, void: <R,[sentence -> if_sentence]>, RETURN: <R,[sentence -> if_sentence]>, ++: <R,[sentence -> if_sentence]>, int: <R,[sentence -> if_sentence]>, else: <R,[sentence -> if_sentence]>, --: <R,[sentence -> if_sentence]>, while: <R,[sentence -> if_sentence]>, char: <R,[sentence -> if_sentence]>, if: <R,[sentence -> if_sentence]>, id: <R,[sentence -> if_sentence]>, float: <R,[sentence -> if_sentence]>, (: <R,[sentence -> if_sentence]>, NUM: <R,[sentence -> if_sentence]>, *: <R,[sentence -> if_sentence]>, -: <R,[sentence -> if_sentence]>, STR: <R,[sentence -> if_sentence]>, $: <R,[sentence -> if_sentence]>, BREAK: <R,[sentence -> if_sentence]>, &: <R,[sentence -> if_sentence]>, for: <R,[sentence -> if_sentence]>}, {>>=: <R,[E9 -> F9_1 E10]>, ==: <R,[E9 -> F9_1 E10]>, <<=: <R,[E9 -> F9_1 E10]>, ;: <R,[E9 -> F9_1 E10]>, +=: <R,[E9 -> F9_1 E10]>, <<: <R,[E9 -> F9_1 E10]>, /: <R,[E9 -> F9_1 E10]>, +: <R,[E9 -> F9_1 E10]>, >>: <R,[E9 -> F9_1 E10]>, or: <R,[E9 -> F9_1 E10]>, ): <R,[E9 -> F9_1 E10]>, %: <R,[E9 -> F9_1 E10]>, >: <R,[E9 -> F9_1 E10]>, <=: <R,[E9 -> F9_1 E10]>, !=: <R,[E9 -> F9_1 E10]>, *=: <R,[E9 -> F9_1 E10]>, -=: <R,[E9 -> F9_1 E10]>, *: <R,[E9 -> F9_1 E10]>, -: <R,[E9 -> F9_1 E10]>, <: <R,[E9 -> F9_1 E10]>, %=: <R,[E9 -> F9_1 E10]>, >=: <R,[E9 -> F9_1 E10]>, /=: <R,[E9 -> F9_1 E10]>, =: <R,[E9 -> F9_1 E10]>, and: <R,[E9 -> F9_1 E10]>, [: <S,91>}, {}: <R,[go_sentence -> CONTINUE ;]>, CONTINUE: <R,[go_sentence -> CONTINUE ;]>, {: <R,[go_sentence -> CONTINUE ;]>, void: <R,[go_sentence -> CONTINUE ;]>, RETURN: <R,[go_sentence -> CONTINUE ;]>, ++: <R,[go_sentence -> CONTINUE ;]>, int: <R,[go_sentence -> CONTINUE ;]>, else: <R,[go_sentence -> CONTINUE ;]>, --: <R,[go_sentence -> CONTINUE ;]>, while: <R,[go_sentence -> CONTINUE ;]>, char: <R,[go_sentence -> CONTINUE ;]>, if: <R,[go_sentence -> CONTINUE ;]>, id: <R,[go_sentence -> CONTINUE ;]>, float: <R,[go_sentence -> CONTINUE ;]>, (: <R,[go_sentence -> CONTINUE ;]>, NUM: <R,[go_sentence -> CONTINUE ;]>, *: <R,[go_sentence -> CONTINUE ;]>, -: <R,[go_sentence -> CONTINUE ;]>, STR: <R,[go_sentence -> CONTINUE ;]>, $: <R,[go_sentence -> CONTINUE ;]>, BREAK: <R,[go_sentence -> CONTINUE ;]>, &: <R,[go_sentence -> CONTINUE ;]>, for: <R,[go_sentence -> CONTINUE ;]>}, {(: <S,100>, ,: <S,99>, ;: <R,[id_list -> id]>, =: <R,[id_list -> id]>}, {=: <S,101>, ;: <R,[initialize -> ]>}, {++: <S,12>, -: <S,39>, &: <S,44>, *: <S,38>, --: <S,18>, (: <S,34>, STR: <S,42>, NUM: <S,35>, id: <S,30>}, {-: <R,[F6 -> <<]>, ++: <R,[F6 -> <<]>, id: <R,[F6 -> <<]>, STR: <R,[F6 -> <<]>, --: <R,[F6 -> <<]>, &: <R,[F6 -> <<]>, (: <R,[F6 -> <<]>, NUM: <R,[F6 -> <<]>, *: <R,[F6 -> <<]>}, {-: <R,[F6 -> >>]>, ++: <R,[F6 -> >>]>, id: <R,[F6 -> >>]>, STR: <R,[F6 -> >>]>, --: <R,[F6 -> >>]>, &: <R,[F6 -> >>]>, (: <R,[F6 -> >>]>, NUM: <R,[F6 -> >>]>, *: <R,[F6 -> >>]>}, {-: <R,[F8 -> %]>, ++: <R,[F8 -> %]>, id: <R,[F8 -> %]>, STR: <R,[F8 -> %]>, --: <R,[F8 -> %]>, &: <R,[F8 -> %]>, (: <R,[F8 -> %]>, NUM: <R,[F8 -> %]>, *: <R,[F8 -> %]>}, {++: <S,12>, -: <S,39>, &: <S,44>, *: <S,38>, --: <S,18>, (: <S,34>, STR: <S,42>, NUM: <S,35>, id: <S,30>}, {-: <R,[F8 -> /]>, ++: <R,[F8 -> /]>, id: <R,[F8 -> /]>, STR: <R,[F8 -> /]>, --: <R,[F8 -> /]>, &: <R,[F8 -> /]>, (: <R,[F8 -> /]>, NUM: <R,[F8 -> /]>, *: <R,[F8 -> /]>}, {-: <R,[F8 -> *]>, ++: <R,[F8 -> *]>, id: <R,[F8 -> *]>, STR: <R,[F8 -> *]>, --: <R,[F8 -> *]>, &: <R,[F8 -> *]>, (: <R,[F8 -> *]>, NUM: <R,[F8 -> *]>, *: <R,[F8 -> *]>}, {}: <S,105>}, {-: <R,[F1 -> >>=]>, ++: <R,[F1 -> >>=]>, id: <R,[F1 -> >>=]>, STR: <R,[F1 -> >>=]>, --: <R,[F1 -> >>=]>, &: <R,[F1 -> >>=]>, (: <R,[F1 -> >>=]>, NUM: <R,[F1 -> >>=]>, *: <R,[F1 -> >>=]>}, {-: <R,[F1 -> *=]>, ++: <R,[F1 -> *=]>, id: <R,[F1 -> *=]>, STR: <R,[F1 -> *=]>, --: <R,[F1 -> *=]>, &: <R,[F1 -> *=]>, (: <R,[F1 -> *=]>, NUM: <R,[F1 -> *=]>, *: <R,[F1 -> *=]>}, {-: <R,[F1 -> <<=]>, ++: <R,[F1 -> <<=]>, id: <R,[F1 -> <<=]>, STR: <R,[F1 -> <<=]>, --: <R,[F1 -> <<=]>, &: <R,[F1 -> <<=]>, (: <R,[F1 -> <<=]>, NUM: <R,[F1 -> <<=]>, *: <R,[F1 -> <<=]>}, {}: <R,[expression_sentence -> E1 ;]>, CONTINUE: <R,[expression_sentence -> E1 ;]>, {: <R,[expression_sentence -> E1 ;]>, void: <R,[expression_sentence -> E1 ;]>, RETURN: <R,[expression_sentence -> E1 ;]>, ++: <R,[expression_sentence -> E1 ;]>, ): <R,[expression_sentence -> E1 ;]>, int: <R,[expression_sentence -> E1 ;]>, else: <R,[expression_sentence -> E1 ;]>, --: <R,[expression_sentence -> E1 ;]>, while: <R,[expression_sentence -> E1 ;]>, char: <R,[expression_sentence -> E1 ;]>, if: <R,[expression_sentence -> E1 ;]>, id: <R,[expression_sentence -> E1 ;]>, float: <R,[expression_sentence -> E1 ;]>, (: <R,[expression_sentence -> E1 ;]>, NUM: <R,[expression_sentence -> E1 ;]>, *: <R,[expression_sentence -> E1 ;]>, -: <R,[expression_sentence -> E1 ;]>, STR: <R,[expression_sentence -> E1 ;]>, $: <R,[expression_sentence -> E1 ;]>, BREAK: <R,[expression_sentence -> E1 ;]>, &: <R,[expression_sentence -> E1 ;]>, for: <R,[expression_sentence -> E1 ;]>}, {++: <S,12>, -: <S,39>, &: <S,44>, *: <S,38>, --: <S,18>, (: <S,34>, STR: <S,42>, NUM: <S,35>, id: <S,30>}, {-: <R,[F1 -> -=]>, ++: <R,[F1 -> -=]>, id: <R,[F1 -> -=]>, STR: <R,[F1 -> -=]>, --: <R,[F1 -> -=]>, &: <R,[F1 -> -=]>, (: <R,[F1 -> -=]>, NUM: <R,[F1 -> -=]>, *: <R,[F1 -> -=]>}, {-: <R,[F1 -> +=]>, ++: <R,[F1 -> +=]>, id: <R,[F1 -> +=]>, STR: <R,[F1 -> +=]>, --: <R,[F1 -> +=]>, &: <R,[F1 -> +=]>, (: <R,[F1 -> +=]>, NUM: <R,[F1 -> +=]>, *: <R,[F1 -> +=]>}, {-: <R,[F1 -> %=]>, ++: <R,[F1 -> %=]>, id: <R,[F1 -> %=]>, STR: <R,[F1 -> %=]>, --: <R,[F1 -> %=]>, &: <R,[F1 -> %=]>, (: <R,[F1 -> %=]>, NUM: <R,[F1 -> %=]>, *: <R,[F1 -> %=]>}, {-: <R,[F1 -> /=]>, ++: <R,[F1 -> /=]>, id: <R,[F1 -> /=]>, STR: <R,[F1 -> /=]>, --: <R,[F1 -> /=]>, &: <R,[F1 -> /=]>, (: <R,[F1 -> /=]>, NUM: <R,[F1 -> /=]>, *: <R,[F1 -> /=]>}, {-: <R,[F1 -> =]>, ++: <R,[F1 -> =]>, id: <R,[F1 -> =]>, STR: <R,[F1 -> =]>, --: <R,[F1 -> =]>, &: <R,[F1 -> =]>, (: <R,[F1 -> =]>, NUM: <R,[F1 -> =]>, *: <R,[F1 -> =]>}, {}: <R,[go_sentence -> RETURN ;]>, CONTINUE: <R,[go_sentence -> RETURN ;]>, {: <R,[go_sentence -> RETURN ;]>, void: <R,[go_sentence -> RETURN ;]>, RETURN: <R,[go_sentence -> RETURN ;]>, ++: <R,[go_sentence -> RETURN ;]>, int: <R,[go_sentence -> RETURN ;]>, else: <R,[go_sentence -> RETURN ;]>, --: <R,[go_sentence -> RETURN ;]>, while: <R,[go_sentence -> RETURN ;]>, char: <R,[go_sentence -> RETURN ;]>, if: <R,[go_sentence -> RETURN ;]>, id: <R,[go_sentence -> RETURN ;]>, float: <R,[go_sentence -> RETURN ;]>, (: <R,[go_sentence -> RETURN ;]>, NUM: <R,[go_sentence -> RETURN ;]>, *: <R,[go_sentence -> RETURN ;]>, -: <R,[go_sentence -> RETURN ;]>, STR: <R,[go_sentence -> RETURN ;]>, $: <R,[go_sentence -> RETURN ;]>, BREAK: <R,[go_sentence -> RETURN ;]>, &: <R,[go_sentence -> RETURN ;]>, for: <R,[go_sentence -> RETURN ;]>}, {;: <S,107>}, {>>=: <R,[E9 -> F9_2 E10]>, ==: <R,[E9 -> F9_2 E10]>, <<=: <R,[E9 -> F9_2 E10]>, ;: <R,[E9 -> F9_2 E10]>, +=: <R,[E9 -> F9_2 E10]>, <<: <R,[E9 -> F9_2 E10]>, /: <R,[E9 -> F9_2 E10]>, +: <R,[E9 -> F9_2 E10]>, >>: <R,[E9 -> F9_2 E10]>, or: <R,[E9 -> F9_2 E10]>, ): <R,[E9 -> F9_2 E10]>, %: <R,[E9 -> F9_2 E10]>, >: <R,[E9 -> F9_2 E10]>, <=: <R,[E9 -> F9_2 E10]>, !=: <R,[E9 -> F9_2 E10]>, *=: <R,[E9 -> F9_2 E10]>, -=: <R,[E9 -> F9_2 E10]>, *: <R,[E9 -> F9_2 E10]>, -: <R,[E9 -> F9_2 E10]>, <: <R,[E9 -> F9_2 E10]>, %=: <R,[E9 -> F9_2 E10]>, >=: <R,[E9 -> F9_2 E10]>, /=: <R,[E9 -> F9_2 E10]>, =: <R,[E9 -> F9_2 E10]>, and: <R,[E9 -> F9_2 E10]>, [: <S,91>}, {++: <S,12>, -: <S,39>, &: <S,44>, *: <S,38>, --: <S,18>, (: <S,34>, STR: <S,42>, NUM: <S,35>, id: <S,30>}, {-: <R,[F2 -> or]>, ++: <R,[F2 -> or]>, id: <R,[F2 -> or]>, STR: <R,[F2 -> or]>, --: <R,[F2 -> or]>, &: <R,[F2 -> or]>, (: <R,[F2 -> or]>, NUM: <R,[F2 -> or]>, *: <R,[F2 -> or]>}, {$: <R,[sentence_list -> sentence sentence_list]>, }: <R,[sentence_list -> sentence sentence_list]>}, {expression: <S,109>}, {STR: <S,42>, NUM: <S,35>, id: <S,30>, (: <S,34>}, {++: <S,12>, -: <S,39>, &: <S,44>, *: <S,38>, --: <S,18>, (: <S,34>, STR: <S,42>, NUM: <S,35>, id: <S,30>}, {-: <R,[F3 -> and]>, ++: <R,[F3 -> and]>, id: <R,[F3 -> and]>, STR: <R,[F3 -> and]>, --: <R,[F3 -> and]>, &: <R,[F3 -> and]>, (: <R,[F3 -> and]>, NUM: <R,[F3 -> and]>, *: <R,[F3 -> and]>}, {-: <R,[F7 -> -]>, ++: <R,[F7 -> -]>, id: <R,[F7 -> -]>, STR: <R,[F7 -> -]>, --: <R,[F7 -> -]>, &: <R,[F7 -> -]>, (: <R,[F7 -> -]>, NUM: <R,[F7 -> -]>, *: <R,[F7 -> -]>}, {++: <S,12>, -: <S,39>, &: <S,44>, *: <S,38>, --: <S,18>, (: <S,34>, STR: <S,42>, NUM: <S,35>, id: <S,30>}, {-: <R,[F7 -> +]>, ++: <R,[F7 -> +]>, id: <R,[F7 -> +]>, STR: <R,[F7 -> +]>, --: <R,[F7 -> +]>, &: <R,[F7 -> +]>, (: <R,[F7 -> +]>, NUM: <R,[F7 -> +]>, *: <R,[F7 -> +]>}, {++: <S,12>, -: <S,39>, &: <S,44>, *: <S,38>, --: <S,18>, (: <S,34>, STR: <S,42>, NUM: <S,35>, id: <S,30>}, {++: <S,12>, -: <S,39>, &: <S,44>, *: <S,38>, --: <S,18>, (: <S,34>, STR: <S,42>, NUM: <S,35>, id: <S,30>}, {-: <R,[F5 -> <]>, ++: <R,[F5 -> <]>, id: <R,[F5 -> <]>, STR: <R,[F5 -> <]>, --: <R,[F5 -> <]>, &: <R,[F5 -> <]>, (: <R,[F5 -> <]>, NUM: <R,[F5 -> <]>, *: <R,[F5 -> <]>}, {-: <R,[F5 -> >]>, ++: <R,[F5 -> >]>, id: <R,[F5 -> >]>, STR: <R,[F5 -> >]>, --: <R,[F5 -> >]>, &: <R,[F5 -> >]>, (: <R,[F5 -> >]>, NUM: <R,[F5 -> >]>, *: <R,[F5 -> >]>}, {++: <S,12>, -: <S,39>, &: <S,44>, *: <S,38>, --: <S,18>, (: <S,34>, STR: <S,42>, NUM: <S,35>, id: <S,30>}, {-: <R,[F5 -> >=]>, ++: <R,[F5 -> >=]>, id: <R,[F5 -> >=]>, STR: <R,[F5 -> >=]>, --: <R,[F5 -> >=]>, &: <R,[F5 -> >=]>, (: <R,[F5 -> >=]>, NUM: <R,[F5 -> >=]>, *: <R,[F5 -> >=]>}, {-: <R,[F5 -> <=]>, ++: <R,[F5 -> <=]>, id: <R,[F5 -> <=]>, STR: <R,[F5 -> <=]>, --: <R,[F5 -> <=]>, &: <R,[F5 -> <=]>, (: <R,[F5 -> <=]>, NUM: <R,[F5 -> <=]>, *: <R,[F5 -> <=]>}, {>>=: <S,60>, =: <S,69>, -=: <S,65>, +=: <S,66>, /=: <S,68>, ): <S,116>, *=: <S,61>, <<=: <S,62>, %=: <S,67>}, {STR: <S,42>, NUM: <S,35>, id: <S,30>, (: <S,34>}, {>>=: <R,[E9 -> E10 F9_1]>, ==: <R,[E9 -> E10 F9_1]>, <<=: <R,[E9 -> E10 F9_1]>, ;: <R,[E9 -> E10 F9_1]>, +=: <R,[E9 -> E10 F9_1]>, <<: <R,[E9 -> E10 F9_1]>, /: <R,[E9 -> E10 F9_1]>, +: <R,[E9 -> E10 F9_1]>, >>: <R,[E9 -> E10 F9_1]>, or: <R,[E9 -> E10 F9_1]>, ): <R,[E9 -> E10 F9_1]>, %: <R,[E9 -> E10 F9_1]>, >: <R,[E9 -> E10 F9_1]>, <=: <R,[E9 -> E10 F9_1]>, !=: <R,[E9 -> E10 F9_1]>, *=: <R,[E9 -> E10 F9_1]>, -=: <R,[E9 -> E10 F9_1]>, *: <R,[E9 -> E10 F9_1]>, -: <R,[E9 -> E10 F9_1]>, <: <R,[E9 -> E10 F9_1]>, %=: <R,[E9 -> E10 F9_1]>, >=: <R,[E9 -> E10 F9_1]>, /=: <R,[E9 -> E10 F9_1]>, =: <R,[E9 -> E10 F9_1]>, and: <R,[E9 -> E10 F9_1]>}, {-: <R,[F4 -> ==]>, ++: <R,[F4 -> ==]>, id: <R,[F4 -> ==]>, STR: <R,[F4 -> ==]>, --: <R,[F4 -> ==]>, &: <R,[F4 -> ==]>, (: <R,[F4 -> ==]>, NUM: <R,[F4 -> ==]>, *: <R,[F4 -> ==]>}, {++: <S,12>, -: <S,39>, &: <S,44>, *: <S,38>, --: <S,18>, (: <S,34>, STR: <S,42>, NUM: <S,35>, id: <S,30>}, {-: <R,[F4 -> !=]>, ++: <R,[F4 -> !=]>, id: <R,[F4 -> !=]>, STR: <R,[F4 -> !=]>, --: <R,[F4 -> !=]>, &: <R,[F4 -> !=]>, (: <R,[F4 -> !=]>, NUM: <R,[F4 -> !=]>, *: <R,[F4 -> !=]>}, {}: <R,[go_sentence -> BREAK ;]>, CONTINUE: <R,[go_sentence -> BREAK ;]>, {: <R,[go_sentence -> BREAK ;]>, void: <R,[go_sentence -> BREAK ;]>, RETURN: <R,[go_sentence -> BREAK ;]>, ++: <R,[go_sentence -> BREAK ;]>, int: <R,[go_sentence -> BREAK ;]>, else: <R,[go_sentence -> BREAK ;]>, --: <R,[go_sentence -> BREAK ;]>, while: <R,[go_sentence -> BREAK ;]>, char: <R,[go_sentence -> BREAK ;]>, if: <R,[go_sentence -> BREAK ;]>, id: <R,[go_sentence -> BREAK ;]>, float: <R,[go_sentence -> BREAK ;]>, (: <R,[go_sentence -> BREAK ;]>, NUM: <R,[go_sentence -> BREAK ;]>, *: <R,[go_sentence -> BREAK ;]>, -: <R,[go_sentence -> BREAK ;]>, STR: <R,[go_sentence -> BREAK ;]>, $: <R,[go_sentence -> BREAK ;]>, BREAK: <R,[go_sentence -> BREAK ;]>, &: <R,[go_sentence -> BREAK ;]>, for: <R,[go_sentence -> BREAK ;]>}, {++: <S,12>, int: <S,16>, -: <S,39>, &: <S,44>, *: <S,38>, --: <S,18>, char: <S,24>, (: <S,34>, STR: <S,42>, NUM: <S,35>, id: <S,30>, float: <S,32>, void: <S,8>}, {;: <S,123>, {: <S,7>}, {id: <S,125>}, {char: <S,24>, int: <S,16>, float: <S,32>, void: <S,8>}, {++: <S,12>, -: <S,39>, &: <S,44>, *: <S,38>, --: <S,18>, (: <S,34>, STR: <S,42>, NUM: <S,35>, id: <S,30>}, {;: <S,131>}, {>>=: <R,[E6 -> E6 F6 E7]>, ==: <R,[E6 -> E6 F6 E7]>, <<=: <R,[E6 -> E6 F6 E7]>, ;: <R,[E6 -> E6 F6 E7]>, +=: <R,[E6 -> E6 F6 E7]>, <<: <R,[E6 -> E6 F6 E7]>, >>: <R,[E6 -> E6 F6 E7]>, or: <R,[E6 -> E6 F6 E7]>, ): <R,[E6 -> E6 F6 E7]>, >: <R,[E6 -> E6 F6 E7]>, <=: <R,[E6 -> E6 F6 E7]>, !=: <R,[E6 -> E6 F6 E7]>, *=: <R,[E6 -> E6 F6 E7]>, -=: <R,[E6 -> E6 F6 E7]>, <: <R,[E6 -> E6 F6 E7]>, %=: <R,[E6 -> E6 F6 E7]>, >=: <R,[E6 -> E6 F6 E7]>, /=: <R,[E6 -> E6 F6 E7]>, =: <R,[E6 -> E6 F6 E7]>, and: <R,[E6 -> E6 F6 E7]>, +: <S,82>, -: <S,80>}, {>>=: <R,[E8 -> E8 F8 E9]>, ==: <R,[E8 -> E8 F8 E9]>, <<=: <R,[E8 -> E8 F8 E9]>, ;: <R,[E8 -> E8 F8 E9]>, +=: <R,[E8 -> E8 F8 E9]>, <<: <R,[E8 -> E8 F8 E9]>, /: <R,[E8 -> E8 F8 E9]>, +: <R,[E8 -> E8 F8 E9]>, >>: <R,[E8 -> E8 F8 E9]>, or: <R,[E8 -> E8 F8 E9]>, ): <R,[E8 -> E8 F8 E9]>, %: <R,[E8 -> E8 F8 E9]>, >: <R,[E8 -> E8 F8 E9]>, <=: <R,[E8 -> E8 F8 E9]>, !=: <R,[E8 -> E8 F8 E9]>, *=: <R,[E8 -> E8 F8 E9]>, -=: <R,[E8 -> E8 F8 E9]>, *: <R,[E8 -> E8 F8 E9]>, -: <R,[E8 -> E8 F8 E9]>, <: <R,[E8 -> E8 F8 E9]>, %=: <R,[E8 -> E8 F8 E9]>, >=: <R,[E8 -> E8 F8 E9]>, /=: <R,[E8 -> E8 F8 E9]>, =: <R,[E8 -> E8 F8 E9]>, and: <R,[E8 -> E8 F8 E9]>}, {}: <R,[complex_sentence -> { sentence_list }]>, CONTINUE: <R,[complex_sentence -> { sentence_list }]>, {: <R,[complex_sentence -> { sentence_list }]>, void: <R,[complex_sentence -> { sentence_list }]>, RETURN: <R,[complex_sentence -> { sentence_list }]>, ++: <R,[complex_sentence -> { sentence_list }]>, int: <R,[complex_sentence -> { sentence_list }]>, else: <R,[complex_sentence -> { sentence_list }]>, --: <R,[complex_sentence -> { sentence_list }]>, while: <R,[complex_sentence -> { sentence_list }]>, char: <R,[complex_sentence -> { sentence_list }]>, if: <R,[complex_sentence -> { sentence_list }]>, id: <R,[complex_sentence -> { sentence_list }]>, float: <R,[complex_sentence -> { sentence_list }]>, (: <R,[complex_sentence -> { sentence_list }]>, NUM: <R,[complex_sentence -> { sentence_list }]>, *: <R,[complex_sentence -> { sentence_list }]>, -: <R,[complex_sentence -> { sentence_list }]>, STR: <R,[complex_sentence -> { sentence_list }]>, $: <R,[complex_sentence -> { sentence_list }]>, BREAK: <R,[complex_sentence -> { sentence_list }]>, &: <R,[complex_sentence -> { sentence_list }]>, for: <R,[complex_sentence -> { sentence_list }]>}, {>>=: <R,[E1 -> E1 F1 E2]>, ): <R,[E1 -> E1 F1 E2]>, *=: <R,[E1 -> E1 F1 E2]>, <<=: <R,[E1 -> E1 F1 E2]>, ;: <R,[E1 -> E1 F1 E2]>, -=: <R,[E1 -> E1 F1 E2]>, +=: <R,[E1 -> E1 F1 E2]>, %=: <R,[E1 -> E1 F1 E2]>, /=: <R,[E1 -> E1 F1 E2]>, =: <R,[E1 -> E1 F1 E2]>, or: <S,74>}, {}: <R,[go_sentence -> RETURN expression ;]>, CONTINUE: <R,[go_sentence -> RETURN expression ;]>, {: <R,[go_sentence -> RETURN expression ;]>, void: <R,[go_sentence -> RETURN expression ;]>, RETURN: <R,[go_sentence -> RETURN expression ;]>, ++: <R,[go_sentence -> RETURN expression ;]>, int: <R,[go_sentence -> RETURN expression ;]>, else: <R,[go_sentence -> RETURN expression ;]>, --: <R,[go_sentence -> RETURN expression ;]>, while: <R,[go_sentence -> RETURN expression ;]>, char: <R,[go_sentence -> RETURN expression ;]>, if: <R,[go_sentence -> RETURN expression ;]>, id: <R,[go_sentence -> RETURN expression ;]>, float: <R,[go_sentence -> RETURN expression ;]>, (: <R,[go_sentence -> RETURN expression ;]>, NUM: <R,[go_sentence -> RETURN expression ;]>, *: <R,[go_sentence -> RETURN expression ;]>, -: <R,[go_sentence -> RETURN expression ;]>, STR: <R,[go_sentence -> RETURN expression ;]>, $: <R,[go_sentence -> RETURN expression ;]>, BREAK: <R,[go_sentence -> RETURN expression ;]>, &: <R,[go_sentence -> RETURN expression ;]>, for: <R,[go_sentence -> RETURN expression ;]>}, {and: <S,79>, >>=: <R,[E2 -> E2 F2 E3]>, *=: <R,[E2 -> E2 F2 E3]>, <<=: <R,[E2 -> E2 F2 E3]>, ;: <R,[E2 -> E2 F2 E3]>, -=: <R,[E2 -> E2 F2 E3]>, +=: <R,[E2 -> E2 F2 E3]>, or: <R,[E2 -> E2 F2 E3]>, ): <R,[E2 -> E2 F2 E3]>, %=: <R,[E2 -> E2 F2 E3]>, /=: <R,[E2 -> E2 F2 E3]>, =: <R,[E2 -> E2 F2 E3]>}, {): <S,132>}, {>>=: <R,[E11 -> E11 , E]>, ==: <R,[E11 -> E11 , E]>, ,: <R,[E11 -> E11 , E]>, <<=: <R,[E11 -> E11 , E]>, ;: <R,[E11 -> E11 , E]>, +=: <R,[E11 -> E11 , E]>, <<: <R,[E11 -> E11 , E]>, /: <R,[E11 -> E11 , E]>, +: <R,[E11 -> E11 , E]>, >>: <R,[E11 -> E11 , E]>, or: <R,[E11 -> E11 , E]>, ++: <R,[E11 -> E11 , E]>, ): <R,[E11 -> E11 , E]>, [: <R,[E11 -> E11 , E]>, %: <R,[E11 -> E11 , E]>, >: <R,[E11 -> E11 , E]>, --: <R,[E11 -> E11 , E]>, <=: <R,[E11 -> E11 , E]>, !=: <R,[E11 -> E11 , E]>, *=: <R,[E11 -> E11 , E]>, -=: <R,[E11 -> E11 , E]>, *: <R,[E11 -> E11 , E]>, -: <R,[E11 -> E11 , E]>, <: <R,[E11 -> E11 , E]>, ]: <R,[E11 -> E11 , E]>, %=: <R,[E11 -> E11 , E]>, >=: <R,[E11 -> E11 , E]>, /=: <R,[E11 -> E11 , E]>, =: <R,[E11 -> E11 , E]>, and: <R,[E11 -> E11 , E]>}, {>>=: <R,[E3 -> E3 F3 E4]>, *=: <R,[E3 -> E3 F3 E4]>, <<=: <R,[E3 -> E3 F3 E4]>, ;: <R,[E3 -> E3 F3 E4]>, -=: <R,[E3 -> E3 F3 E4]>, +=: <R,[E3 -> E3 F3 E4]>, or: <R,[E3 -> E3 F3 E4]>, ): <R,[E3 -> E3 F3 E4]>, %=: <R,[E3 -> E3 F3 E4]>, /=: <R,[E3 -> E3 F3 E4]>, =: <R,[E3 -> E3 F3 E4]>, and: <R,[E3 -> E3 F3 E4]>, !=: <S,95>, ==: <S,93>}, {/: <S,57>, *: <S,58>, %: <S,55>, >>=: <R,[E7 -> E7 F7 E8]>, ==: <R,[E7 -> E7 F7 E8]>, <<=: <R,[E7 -> E7 F7 E8]>, ;: <R,[E7 -> E7 F7 E8]>, +=: <R,[E7 -> E7 F7 E8]>, <<: <R,[E7 -> E7 F7 E8]>, +: <R,[E7 -> E7 F7 E8]>, >>: <R,[E7 -> E7 F7 E8]>, or: <R,[E7 -> E7 F7 E8]>, ): <R,[E7 -> E7 F7 E8]>, >: <R,[E7 -> E7 F7 E8]>, <=: <R,[E7 -> E7 F7 E8]>, !=: <R,[E7 -> E7 F7 E8]>, *=: <R,[E7 -> E7 F7 E8]>, -=: <R,[E7 -> E7 F7 E8]>, -: <R,[E7 -> E7 F7 E8]>, <: <R,[E7 -> E7 F7 E8]>, %=: <R,[E7 -> E7 F7 E8]>, >=: <R,[E7 -> E7 F7 E8]>, /=: <R,[E7 -> E7 F7 E8]>, =: <R,[E7 -> E7 F7 E8]>, and: <R,[E7 -> E7 F7 E8]>}, {>>=: <S,60>, ): <S,133>, =: <S,69>, -=: <S,65>, +=: <S,66>, /=: <S,68>, *=: <S,61>, <<=: <S,62>, %=: <S,67>}, {>>=: <S,60>, ): <S,134>, =: <S,69>, -=: <S,65>, +=: <S,66>, /=: <S,68>, *=: <S,61>, <<=: <S,62>, %=: <S,67>}, {>>: <S,54>, >>=: <R,[E5 -> E5 F5 E6]>, *=: <R,[E5 -> E5 F5 E6]>, ==: <R,[E5 -> E5 F5 E6]>, <<=: <R,[E5 -> E5 F5 E6]>, ;: <R,[E5 -> E5 F5 E6]>, -=: <R,[E5 -> E5 F5 E6]>, +=: <R,[E5 -> E5 F5 E6]>, or: <R,[E5 -> E5 F5 E6]>, <: <R,[E5 -> E5 F5 E6]>, ): <R,[E5 -> E5 F5 E6]>, >: <R,[E5 -> E5 F5 E6]>, %=: <R,[E5 -> E5 F5 E6]>, >=: <R,[E5 -> E5 F5 E6]>, /=: <R,[E5 -> E5 F5 E6]>, <=: <R,[E5 -> E5 F5 E6]>, =: <R,[E5 -> E5 F5 E6]>, !=: <R,[E5 -> E5 F5 E6]>, and: <R,[E5 -> E5 F5 E6]>, <<: <S,53>}, {>>=: <R,[E -> ( E1 )]>, ==: <R,[E -> ( E1 )]>, ,: <R,[E -> ( E1 )]>, <<=: <R,[E -> ( E1 )]>, ;: <R,[E -> ( E1 )]>, +=: <R,[E -> ( E1 )]>, <<: <R,[E -> ( E1 )]>, /: <R,[E -> ( E1 )]>, +: <R,[E -> ( E1 )]>, >>: <R,[E -> ( E1 )]>, or: <R,[E -> ( E1 )]>, ++: <R,[E -> ( E1 )]>, ): <R,[E -> ( E1 )]>, [: <R,[E -> ( E1 )]>, %: <R,[E -> ( E1 )]>, >: <R,[E -> ( E1 )]>, --: <R,[E -> ( E1 )]>, <=: <R,[E -> ( E1 )]>, !=: <R,[E -> ( E1 )]>, *=: <R,[E -> ( E1 )]>, -=: <R,[E -> ( E1 )]>, *: <R,[E -> ( E1 )]>, -: <R,[E -> ( E1 )]>, <: <R,[E -> ( E1 )]>, ]: <R,[E -> ( E1 )]>, %=: <R,[E -> ( E1 )]>, >=: <R,[E -> ( E1 )]>, /=: <R,[E -> ( E1 )]>, =: <R,[E -> ( E1 )]>, and: <R,[E -> ( E1 )]>}, {]: <S,135>, [: <S,91>}, {>: <S,86>, <=: <S,89>, <: <S,85>, >>=: <R,[E4 -> E4 F4 E5]>, *=: <R,[E4 -> E4 F4 E5]>, ==: <R,[E4 -> E4 F4 E5]>, <<=: <R,[E4 -> E4 F4 E5]>, ;: <R,[E4 -> E4 F4 E5]>, -=: <R,[E4 -> E4 F4 E5]>, +=: <R,[E4 -> E4 F4 E5]>, or: <R,[E4 -> E4 F4 E5]>, ): <R,[E4 -> E4 F4 E5]>, %=: <R,[E4 -> E4 F4 E5]>, /=: <R,[E4 -> E4 F4 E5]>, =: <R,[E4 -> E4 F4 E5]>, !=: <R,[E4 -> E4 F4 E5]>, and: <R,[E4 -> E4 F4 E5]>, >=: <S,88>}, {id: <S,125>}, {id: <R,[loop_control_sentence -> type_declare_sentence]>, float: <R,[loop_control_sentence -> type_declare_sentence]>, (: <R,[loop_control_sentence -> type_declare_sentence]>, NUM: <R,[loop_control_sentence -> type_declare_sentence]>, void: <R,[loop_control_sentence -> type_declare_sentence]>, *: <R,[loop_control_sentence -> type_declare_sentence]>, -: <R,[loop_control_sentence -> type_declare_sentence]>, ++: <R,[loop_control_sentence -> type_declare_sentence]>, ): <R,[loop_control_sentence -> type_declare_sentence]>, int: <R,[loop_control_sentence -> type_declare_sentence]>, STR: <R,[loop_control_sentence -> type_declare_sentence]>, --: <R,[loop_control_sentence -> type_declare_sentence]>, &: <R,[loop_control_sentence -> type_declare_sentence]>, char: <R,[loop_control_sentence -> type_declare_sentence]>}, {id: <R,[loop_control_sentence -> expression_sentence]>, float: <R,[loop_control_sentence -> expression_sentence]>, (: <R,[loop_control_sentence -> expression_sentence]>, NUM: <R,[loop_control_sentence -> expression_sentence]>, void: <R,[loop_control_sentence -> expression_sentence]>, *: <R,[loop_control_sentence -> expression_sentence]>, -: <R,[loop_control_sentence -> expression_sentence]>, ++: <R,[loop_control_sentence -> expression_sentence]>, ): <R,[loop_control_sentence -> expression_sentence]>, int: <R,[loop_control_sentence -> expression_sentence]>, STR: <R,[loop_control_sentence -> expression_sentence]>, --: <R,[loop_control_sentence -> expression_sentence]>, &: <R,[loop_control_sentence -> expression_sentence]>, char: <R,[loop_control_sentence -> expression_sentence]>}, {++: <S,12>, int: <S,16>, ): <S,136>, -: <S,39>, &: <S,44>, *: <S,38>, --: <S,18>, char: <S,24>, (: <S,34>, STR: <S,42>, NUM: <S,35>, id: <S,30>, float: <S,32>, void: <S,8>}, {}: <R,[func_declare -> type_statement id parameter_list ;]>, CONTINUE: <R,[func_declare -> type_statement id parameter_list ;]>, {: <R,[func_declare -> type_statement id parameter_list ;]>, void: <R,[func_declare -> type_statement id parameter_list ;]>, RETURN: <R,[func_declare -> type_statement id parameter_list ;]>, ++: <R,[func_declare -> type_statement id parameter_list ;]>, int: <R,[func_declare -> type_statement id parameter_list ;]>, else: <R,[func_declare -> type_statement id parameter_list ;]>, --: <R,[func_declare -> type_statement id parameter_list ;]>, while: <R,[func_declare -> type_statement id parameter_list ;]>, char: <R,[func_declare -> type_statement id parameter_list ;]>, if: <R,[func_declare -> type_statement id parameter_list ;]>, id: <R,[func_declare -> type_statement id parameter_list ;]>, float: <R,[func_declare -> type_statement id parameter_list ;]>, (: <R,[func_declare -> type_statement id parameter_list ;]>, NUM: <R,[func_declare -> type_statement id parameter_list ;]>, *: <R,[func_declare -> type_statement id parameter_list ;]>, -: <R,[func_declare -> type_statement id parameter_list ;]>, STR: <R,[func_declare -> type_statement id parameter_list ;]>, $: <R,[func_declare -> type_statement id parameter_list ;]>, BREAK: <R,[func_declare -> type_statement id parameter_list ;]>, &: <R,[func_declare -> type_statement id parameter_list ;]>, for: <R,[func_declare -> type_statement id parameter_list ;]>}, {}: <R,[func_define -> type_statement id parameter_list complex_sentence]>, CONTINUE: <R,[func_define -> type_statement id parameter_list complex_sentence]>, {: <R,[func_define -> type_statement id parameter_list complex_sentence]>, void: <R,[func_define -> type_statement id parameter_list complex_sentence]>, RETURN: <R,[func_define -> type_statement id parameter_list complex_sentence]>, ++: <R,[func_define -> type_statement id parameter_list complex_sentence]>, int: <R,[func_define -> type_statement id parameter_list complex_sentence]>, else: <R,[func_define -> type_statement id parameter_list complex_sentence]>, --: <R,[func_define -> type_statement id parameter_list complex_sentence]>, while: <R,[func_define -> type_statement id parameter_list complex_sentence]>, char: <R,[func_define -> type_statement id parameter_list complex_sentence]>, if: <R,[func_define -> type_statement id parameter_list complex_sentence]>, id: <R,[func_define -> type_statement id parameter_list complex_sentence]>, float: <R,[func_define -> type_statement id parameter_list complex_sentence]>, (: <R,[func_define -> type_statement id parameter_list complex_sentence]>, NUM: <R,[func_define -> type_statement id parameter_list complex_sentence]>, *: <R,[func_define -> type_statement id parameter_list complex_sentence]>, -: <R,[func_define -> type_statement id parameter_list complex_sentence]>, STR: <R,[func_define -> type_statement id parameter_list complex_sentence]>, $: <R,[func_define -> type_statement id parameter_list complex_sentence]>, BREAK: <R,[func_define -> type_statement id parameter_list complex_sentence]>, &: <R,[func_define -> type_statement id parameter_list complex_sentence]>, for: <R,[func_define -> type_statement id parameter_list complex_sentence]>}, {;: <R,[id_list -> id]>, =: <R,[id_list -> id]>, ,: <S,99>}, {;: <R,[id_list -> id , id_list]>, =: <R,[id_list -> id , id_list]>}, {id: <S,138>, ,: <R,[parameter -> type_statement]>, ): <R,[parameter -> type_statement]>}, {,: <S,140>, ): <S,139>}, {,: <R,[list -> parameter]>, ): <R,[list -> parameter]>}, {;: <R,[initialize -> = E1]>, >>=: <S,60>, =: <S,69>, -=: <S,65>, +=: <S,66>, /=: <S,68>, *=: <S,61>, <<=: <S,62>, %=: <S,67>}, {}: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, CONTINUE: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, {: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, void: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, RETURN: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, ++: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, ): <R,[type_declare_sentence -> type_statement id_list initialize ;]>, int: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, else: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, --: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, while: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, char: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, if: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, id: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, float: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, (: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, NUM: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, *: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, -: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, STR: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, $: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, BREAK: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, &: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, for: <R,[type_declare_sentence -> type_statement id_list initialize ;]>}, {if: <S,25>, ++: <S,12>, while: <S,19>, int: <S,16>, for: <S,46>, -: <S,39>, &: <S,44>, *: <S,38>, --: <S,18>, RETURN: <S,11>, char: <S,24>, (: <S,34>, CONTINUE: <S,2>, STR: <S,42>, NUM: <S,35>, id: <S,30>, {: <S,7>, float: <S,32>, void: <S,8>, BREAK: <S,43>}, {if: <S,25>, ++: <S,12>, while: <S,19>, int: <S,16>, for: <S,46>, -: <S,39>, &: <S,44>, *: <S,38>, --: <S,18>, RETURN: <S,11>, char: <S,24>, (: <S,34>, CONTINUE: <S,2>, STR: <S,42>, NUM: <S,35>, id: <S,30>, {: <S,7>, float: <S,32>, void: <S,8>, BREAK: <S,43>}, {>>=: <R,[E -> id ( E1 )]>, ==: <R,[E -> id ( E1 )]>, ,: <R,[E -> id ( E1 )]>, <<=: <R,[E -> id ( E1 )]>, ;: <R,[E -> id ( E1 )]>, +=: <R,[E -> id ( E1 )]>, <<: <R,[E -> id ( E1 )]>, /: <R,[E -> id ( E1 )]>, +: <R,[E -> id ( E1 )]>, >>: <R,[E -> id ( E1 )]>, or: <R,[E -> id ( E1 )]>, ++: <R,[E -> id ( E1 )]>, ): <R,[E -> id ( E1 )]>, [: <R,[E -> id ( E1 )]>, %: <R,[E -> id ( E1 )]>, >: <R,[E -> id ( E1 )]>, --: <R,[E -> id ( E1 )]>, <=: <R,[E -> id ( E1 )]>, !=: <R,[E -> id ( E1 )]>, *=: <R,[E -> id ( E1 )]>, -=: <R,[E -> id ( E1 )]>, *: <R,[E -> id ( E1 )]>, -: <R,[E -> id ( E1 )]>, <: <R,[E -> id ( E1 )]>, ]: <R,[E -> id ( E1 )]>, %=: <R,[E -> id ( E1 )]>, >=: <R,[E -> id ( E1 )]>, /=: <R,[E -> id ( E1 )]>, =: <R,[E -> id ( E1 )]>, and: <R,[E -> id ( E1 )]>}, {>>=: <R,[E10 -> E10 [ E10 ]]>, ==: <R,[E10 -> E10 [ E10 ]]>, <<=: <R,[E10 -> E10 [ E10 ]]>, ;: <R,[E10 -> E10 [ E10 ]]>, +=: <R,[E10 -> E10 [ E10 ]]>, <<: <R,[E10 -> E10 [ E10 ]]>, /: <R,[E10 -> E10 [ E10 ]]>, +: <R,[E10 -> E10 [ E10 ]]>, >>: <R,[E10 -> E10 [ E10 ]]>, or: <R,[E10 -> E10 [ E10 ]]>, ++: <R,[E10 -> E10 [ E10 ]]>, ): <R,[E10 -> E10 [ E10 ]]>, [: <R,[E10 -> E10 [ E10 ]]>, %: <R,[E10 -> E10 [ E10 ]]>, >: <R,[E10 -> E10 [ E10 ]]>, --: <R,[E10 -> E10 [ E10 ]]>, <=: <R,[E10 -> E10 [ E10 ]]>, !=: <R,[E10 -> E10 [ E10 ]]>, *=: <R,[E10 -> E10 [ E10 ]]>, -=: <R,[E10 -> E10 [ E10 ]]>, *: <R,[E10 -> E10 [ E10 ]]>, -: <R,[E10 -> E10 [ E10 ]]>, <: <R,[E10 -> E10 [ E10 ]]>, ]: <R,[E10 -> E10 [ E10 ]]>, %=: <R,[E10 -> E10 [ E10 ]]>, >=: <R,[E10 -> E10 [ E10 ]]>, /=: <R,[E10 -> E10 [ E10 ]]>, =: <R,[E10 -> E10 [ E10 ]]>, and: <R,[E10 -> E10 [ E10 ]]>}, {if: <S,25>, ++: <S,12>, while: <S,19>, int: <S,16>, for: <S,46>, -: <S,39>, &: <S,44>, *: <S,38>, --: <S,18>, RETURN: <S,11>, char: <S,24>, (: <S,34>, CONTINUE: <S,2>, STR: <S,42>, NUM: <S,35>, id: <S,30>, {: <S,7>, float: <S,32>, void: <S,8>, BREAK: <S,43>}, {++: <S,12>, int: <S,16>, -: <S,39>, &: <S,44>, *: <S,38>, --: <S,18>, char: <S,24>, (: <S,34>, STR: <S,42>, NUM: <S,35>, id: <S,30>, float: <S,32>, void: <S,8>}, {,: <R,[parameter -> type_statement id]>, ): <R,[parameter -> type_statement id]>}, {;: <R,[parameter_list -> ( list )]>, {: <R,[parameter_list -> ( list )]>}, {int: <S,16>, float: <S,32>, char: <S,24>, void: <S,8>}, {}: <R,[state -> complex_sentence]>, CONTINUE: <R,[state -> complex_sentence]>, {: <R,[state -> complex_sentence]>, void: <R,[state -> complex_sentence]>, RETURN: <R,[state -> complex_sentence]>, ++: <R,[state -> complex_sentence]>, int: <R,[state -> complex_sentence]>, else: <R,[state -> complex_sentence]>, --: <R,[state -> complex_sentence]>, while: <R,[state -> complex_sentence]>, char: <R,[state -> complex_sentence]>, if: <R,[state -> complex_sentence]>, id: <R,[state -> complex_sentence]>, float: <R,[state -> complex_sentence]>, (: <R,[state -> complex_sentence]>, NUM: <R,[state -> complex_sentence]>, *: <R,[state -> complex_sentence]>, -: <R,[state -> complex_sentence]>, STR: <R,[state -> complex_sentence]>, $: <R,[state -> complex_sentence]>, BREAK: <R,[state -> complex_sentence]>, &: <R,[state -> complex_sentence]>, for: <R,[state -> complex_sentence]>}, {}: <R,[state -> sentence]>, CONTINUE: <R,[state -> sentence]>, {: <R,[state -> sentence]>, void: <R,[state -> sentence]>, RETURN: <R,[state -> sentence]>, ++: <R,[state -> sentence]>, int: <R,[state -> sentence]>, else: <R,[state -> sentence]>, --: <R,[state -> sentence]>, while: <R,[state -> sentence]>, char: <R,[state -> sentence]>, if: <R,[state -> sentence]>, id: <R,[state -> sentence]>, float: <R,[state -> sentence]>, (: <R,[state -> sentence]>, NUM: <R,[state -> sentence]>, *: <R,[state -> sentence]>, -: <R,[state -> sentence]>, STR: <R,[state -> sentence]>, $: <R,[state -> sentence]>, BREAK: <R,[state -> sentence]>, &: <R,[state -> sentence]>, for: <R,[state -> sentence]>}, {}: <R,[while_sentence -> while ( expression ) state]>, CONTINUE: <R,[while_sentence -> while ( expression ) state]>, {: <R,[while_sentence -> while ( expression ) state]>, void: <R,[while_sentence -> while ( expression ) state]>, RETURN: <R,[while_sentence -> while ( expression ) state]>, ++: <R,[while_sentence -> while ( expression ) state]>, int: <R,[while_sentence -> while ( expression ) state]>, else: <R,[while_sentence -> while ( expression ) state]>, --: <R,[while_sentence -> while ( expression ) state]>, while: <R,[while_sentence -> while ( expression ) state]>, char: <R,[while_sentence -> while ( expression ) state]>, if: <R,[while_sentence -> while ( expression ) state]>, id: <R,[while_sentence -> while ( expression ) state]>, float: <R,[while_sentence -> while ( expression ) state]>, (: <R,[while_sentence -> while ( expression ) state]>, NUM: <R,[while_sentence -> while ( expression ) state]>, *: <R,[while_sentence -> while ( expression ) state]>, -: <R,[while_sentence -> while ( expression ) state]>, STR: <R,[while_sentence -> while ( expression ) state]>, $: <R,[while_sentence -> while ( expression ) state]>, BREAK: <R,[while_sentence -> while ( expression ) state]>, &: <R,[while_sentence -> while ( expression ) state]>, for: <R,[while_sentence -> while ( expression ) state]>}, {}: <R,[if_sentence -> if ( E1 ) state]>, CONTINUE: <R,[if_sentence -> if ( E1 ) state]>, {: <R,[if_sentence -> if ( E1 ) state]>, void: <R,[if_sentence -> if ( E1 ) state]>, RETURN: <R,[if_sentence -> if ( E1 ) state]>, ++: <R,[if_sentence -> if ( E1 ) state]>, int: <R,[if_sentence -> if ( E1 ) state]>, else: <S,148>, --: <R,[if_sentence -> if ( E1 ) state]>, while: <R,[if_sentence -> if ( E1 ) state]>, char: <R,[if_sentence -> if ( E1 ) state]>, if: <R,[if_sentence -> if ( E1 ) state]>, id: <R,[if_sentence -> if ( E1 ) state]>, float: <R,[if_sentence -> if ( E1 ) state]>, (: <R,[if_sentence -> if ( E1 ) state]>, NUM: <R,[if_sentence -> if ( E1 ) state]>, *: <R,[if_sentence -> if ( E1 ) state]>, -: <R,[if_sentence -> if ( E1 ) state]>, STR: <R,[if_sentence -> if ( E1 ) state]>, $: <R,[if_sentence -> if ( E1 ) state]>, BREAK: <R,[if_sentence -> if ( E1 ) state]>, &: <R,[if_sentence -> if ( E1 ) state]>, for: <R,[if_sentence -> if ( E1 ) state]>}, {}: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, CONTINUE: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, {: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, void: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, RETURN: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, ++: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, int: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, else: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, --: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, while: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, char: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, if: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, id: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, float: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, (: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, NUM: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, *: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, -: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, STR: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, $: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, BREAK: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, &: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>, for: <R,[for_sentence -> for ( loop_control_sentence ) sentence]>}, {): <S,149>}, {,: <R,[list -> list , parameter]>, ): <R,[list -> list , parameter]>}, {if: <S,25>, ++: <S,12>, while: <S,19>, int: <S,16>, for: <S,46>, -: <S,39>, &: <S,44>, *: <S,38>, --: <S,18>, RETURN: <S,11>, char: <S,24>, (: <S,34>, CONTINUE: <S,2>, STR: <S,42>, NUM: <S,35>, id: <S,30>, {: <S,7>, float: <S,32>, void: <S,8>, BREAK: <S,43>}, {{: <S,7>}, {}: <R,[if_sentence -> if ( E1 ) state else state]>, CONTINUE: <R,[if_sentence -> if ( E1 ) state else state]>, {: <R,[if_sentence -> if ( E1 ) state else state]>, void: <R,[if_sentence -> if ( E1 ) state else state]>, RETURN: <R,[if_sentence -> if ( E1 ) state else state]>, ++: <R,[if_sentence -> if ( E1 ) state else state]>, int: <R,[if_sentence -> if ( E1 ) state else state]>, else: <R,[if_sentence -> if ( E1 ) state else state]>, --: <R,[if_sentence -> if ( E1 ) state else state]>, while: <R,[if_sentence -> if ( E1 ) state else state]>, char: <R,[if_sentence -> if ( E1 ) state else state]>, if: <R,[if_sentence -> if ( E1 ) state else state]>, id: <R,[if_sentence -> if ( E1 ) state else state]>, float: <R,[if_sentence -> if ( E1 ) state else state]>, (: <R,[if_sentence -> if ( E1 ) state else state]>, NUM: <R,[if_sentence -> if ( E1 ) state else state]>, *: <R,[if_sentence -> if ( E1 ) state else state]>, -: <R,[if_sentence -> if ( E1 ) state else state]>, STR: <R,[if_sentence -> if ( E1 ) state else state]>, $: <R,[if_sentence -> if ( E1 ) state else state]>, BREAK: <R,[if_sentence -> if ( E1 ) state else state]>, &: <R,[if_sentence -> if ( E1 ) state else state]>, for: <R,[if_sentence -> if ( E1 ) state else state]>}, {}: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, CONTINUE: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, {: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, void: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, RETURN: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, ++: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, int: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, else: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, --: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, while: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, char: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, if: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, id: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, float: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, (: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, NUM: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, *: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, -: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, STR: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, $: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, BREAK: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, &: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, for: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>}]

GOTO TABLE:
[{F9_1: 1, type_statement: 3, func_declare: 4, E6: 5, E8: 6, E1: 9, complex_sentence: 10, F9_2: 13, E2: 14, for_sentence: 15, sentence: 17, E11: 20, E3: 21, func_define: 22, E7: 23, E9: 26, type_declare_sentence: 27, expression_sentence: 28, sentence_list: 29, go_sentence: 31, E5: 33, E: 36, while_sentence: 37, E10: 40, E4: 41, S: 45, if_sentence: 47}, {E10: 48, E11: 20, E: 36}, {}, {id_list: 51}, {}, {F6: 52}, {F8: 56}, {F9_1: 1, type_statement: 3, func_declare: 4, E6: 5, E8: 6, E1: 9, complex_sentence: 10, F9_2: 13, E2: 14, for_sentence: 15, sentence: 17, E11: 20, E3: 21, func_define: 22, E7: 23, E9: 26, type_declare_sentence: 27, expression_sentence: 28, sentence_list: 59, go_sentence: 31, E5: 33, E: 36, while_sentence: 37, E10: 40, E4: 41, if_sentence: 47}, {}, {F1: 64}, {}, {}, {}, {E10: 72, E11: 20, E: 36}, {F2: 73}, {}, {}, {F9_1: 1, type_statement: 3, func_declare: 4, E6: 5, E8: 6, E1: 9, complex_sentence: 10, F9_2: 13, E2: 14, for_sentence: 15, sentence: 17, E11: 20, E3: 21, func_define: 22, E7: 23, E9: 26, type_declare_sentence: 27, expression_sentence: 28, sentence_list: 75, go_sentence: 31, E5: 33, E: 36, while_sentence: 37, E10: 40, E4: 41, if_sentence: 47}, {}, {}, {}, {F3: 78}, {}, {F7: 81}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {F5: 87}, {F9_1: 1, E6: 5, E8: 6, E1: 90, F9_2: 13, E2: 14, E11: 20, E3: 21, E9: 26, E5: 33, E: 36, E10: 40, E4: 41, E7: 23}, {}, {}, {}, {}, {}, {F9_1: 92}, {F4: 94}, {}, {}, {}, {}, {}, {}, {}, {}, {parameter_list: 98}, {initialize: 102}, {F9_1: 1, E8: 6, F9_2: 13, E11: 20, E9: 26, E: 36, E10: 40, E7: 103}, {}, {}, {}, {F9_1: 1, F9_2: 13, E11: 20, E9: 104, E: 36, E10: 40}, {}, {}, {}, {}, {}, {}, {}, {F9_1: 1, E6: 5, E8: 6, F9_2: 13, E2: 106, E11: 20, E3: 21, E9: 26, E5: 33, E: 36, E10: 40, E4: 41, E7: 23}, {}, {}, {}, {}, {}, {}, {}, {}, {F9_1: 1, E6: 5, E8: 6, F9_2: 13, E11: 20, E3: 108, E9: 26, E5: 33, E: 36, E10: 40, E4: 41, E7: 23}, {}, {}, {}, {E: 110}, {F9_1: 1, E6: 5, E8: 6, F9_2: 13, E11: 20, E9: 26, E5: 33, E: 36, E10: 40, E4: 111, E7: 23}, {}, {}, {F9_1: 1, E8: 112, F9_2: 13, E11: 20, E9: 26, E: 36, E10: 40}, {}, {F9_1: 1, E6: 5, E8: 6, E1: 113, F9_2: 13, E2: 14, E11: 20, E3: 21, E9: 26, E5: 33, E: 36, E10: 40, E4: 41, E7: 23}, {F9_1: 1, E6: 5, E8: 6, E1: 114, F9_2: 13, E2: 14, E11: 20, E3: 21, E9: 26, E5: 33, E: 36, E10: 40, E4: 41, E7: 23}, {}, {}, {F9_1: 1, E6: 115, E8: 6, F9_2: 13, E11: 20, E9: 26, E: 36, E10: 40, E7: 23}, {}, {}, {F1: 64}, {E10: 117, E11: 20, E: 36}, {}, {}, {F9_1: 1, E6: 5, E8: 6, F9_2: 13, E11: 20, E9: 26, E5: 118, E: 36, E10: 40, E7: 23}, {}, {}, {F9_1: 1, type_statement: 119, E6: 5, E8: 6, E1: 9, F9_2: 13, E2: 14, E11: 20, E3: 21, E9: 26, type_declare_sentence: 120, expression_sentence: 121, E5: 33, loop_control_sentence: 122, E: 36, E10: 40, E4: 41, E7: 23}, {complex_sentence: 124}, {id_list: 126}, {type_statement: 127, list: 128, parameter: 129}, {F9_1: 1, E6: 5, E8: 6, E1: 130, F9_2: 13, E2: 14, E11: 20, E3: 21, E9: 26, E5: 33, E: 36, E10: 40, E4: 41, E7: 23}, {}, {F7: 81}, {}, {}, {F2: 73}, {}, {F3: 78}, {}, {}, {F4: 94}, {F8: 56}, {F1: 64}, {F1: 64}, {F6: 52}, {}, {}, {F5: 87}, {id_list: 51}, {}, {}, {F9_1: 1, type_statement: 119, E6: 5, E8: 6, E1: 9, F9_2: 13, E2: 14, E11: 20, E3: 21, E7: 23, E9: 26, type_declare_sentence: 120, expression_sentence: 121, E5: 33, loop_control_sentence: 137, E: 36, E10: 40, E4: 41}, {}, {}, {}, {}, {}, {}, {}, {F1: 64}, {}, {F9_1: 1, type_statement: 3, func_declare: 4, E6: 5, E8: 6, E1: 9, complex_sentence: 141, F9_2: 13, E2: 14, for_sentence: 15, sentence: 142, E11: 20, E3: 21, func_define: 22, E7: 23, E9: 26, type_declare_sentence: 27, expression_sentence: 28, go_sentence: 31, state: 143, E5: 33, E: 36, while_sentence: 37, E10: 40, E4: 41, if_sentence: 47}, {F9_1: 1, type_statement: 3, func_declare: 4, E6: 5, E8: 6, E1: 9, complex_sentence: 141, F9_2: 13, E2: 14, for_sentence: 15, sentence: 142, E11: 20, E3: 21, func_define: 22, E7: 23, E9: 26, type_declare_sentence: 27, expression_sentence: 28, go_sentence: 31, state: 144, E5: 33, E: 36, while_sentence: 37, E10: 40, E4: 41, if_sentence: 47}, {}, {}, {F9_1: 1, type_statement: 3, func_declare: 4, E6: 5, E8: 6, E1: 9, complex_sentence: 10, F9_2: 13, E2: 14, for_sentence: 15, sentence: 145, E11: 20, E3: 21, func_define: 22, E7: 23, E9: 26, type_declare_sentence: 27, expression_sentence: 28, go_sentence: 31, E5: 33, E: 36, while_sentence: 37, E10: 40, E4: 41, if_sentence: 47}, {F9_1: 1, type_statement: 119, E6: 5, E8: 6, E1: 9, F9_2: 13, E2: 14, E11: 20, E3: 21, E7: 23, E9: 26, type_declare_sentence: 120, expression_sentence: 121, E5: 33, loop_control_sentence: 146, E: 36, E10: 40, E4: 41}, {}, {}, {type_statement: 127, parameter: 147}, {}, {}, {}, {}, {}, {}, {}, {F9_1: 1, type_statement: 3, func_declare: 4, E6: 5, E8: 6, E1: 9, complex_sentence: 141, F9_2: 13, E2: 14, for_sentence: 15, sentence: 142, E11: 20, E3: 21, func_define: 22, E7: 23, E9: 26, type_declare_sentence: 27, expression_sentence: 28, go_sentence: 31, state: 150, E5: 33, E: 36, while_sentence: 37, E10: 40, E4: 41, if_sentence: 47}, {complex_sentence: 151}, {}, {}]

输入: [[<postion object : 0, 4>, 'int', 'int'], [<postion object : 0, 8>, 'id', 'num1'], [<postion object : 0, 9>, ',', ','], [<postion object : 0, 13>, 'id', 'num2'], [<postion object : 0, 14>, ',', ','], [<postion object : 0, 16>, 'id', 'op'], [<postion object : 0, 17>, ',', ','], [<postion object : 0, 21>, 'id', 'ans'], [<postion object : 0, 22>, '=', '='], [<postion object : 0, 24>, 'NUM', '1'], [<postion object : 0, 25>, ',', ','], [<postion object : 0, 26>, 'NUM', '2'], [<postion object : 0, 27>, ',', ','], [<postion object : 0, 28>, 'NUM', '3'], [<postion object : 0, 29>, ',', ','], [<postion object : 0, 30>, 'NUM', '4'], [<postion object : 0, 31>, ';', ';']]

归约方式:
                                                                                                                                                                                            
                                                                                                                                                                                            
                                                                                                                                                                                            
                                                                                                                                                                                            
                                                                                                                                                                                            
                                                                                                                                                                                            
                                                        ┆┄ type_statement ┄┄ int                                                                                                            
                                                        ┆                                                                                                                                   
                                                        ┆                                                                                                                                   
                                                        ┆                                                                                                                                   
                                                        ┆          ┆┄ id                                                                                                                    
                                                        ┆          ┆                                                                                                                        
                                                        ┆          ┆                                                                                                                        
                                                        ┆          ┆                                                                                                                        
                                                        ┆          ┆┄ ,                                                                                                                     
                                                        ┆          ┆                                                                                                                        
                                                        ┆          ┆                                                                                                                        
                                                        ┆┄ id_list ┆                                                                                                                        
                                                        ┆          ┆          ┆┄ id                                                                                                         
                                                        ┆          ┆          ┆                                                                                                             
                                                        ┆          ┆          ┆                                                                                                             
                                                        ┆          ┆          ┆                                                                                                             
                                                        ┆          ┆          ┆┄ ,                                                                                                          
                                                        ┆          ┆          ┆                                                                                                             
                                                        ┆          ┆┄ id_list ┆                                                                                                             
                                                        ┆                     ┆                                                                                                             
                                                        ┆                     ┆          ┆┄ id                                                                                              
                                                        ┆                     ┆          ┆                                                                                                  
                                                        ┆                     ┆          ┆                                                                                                  
                                                        ┆                     ┆          ┆                                                                                                  
                                                        ┆                     ┆┄ id_list ┆┄ ,                                                                                               
                                                        ┆                                ┆                                                                                                  
                                                        ┆                                ┆                                                                                                  
                                                        ┆                                ┆                                                                                                  
                                                        ┆                                ┆┄ id_list ┄┄ id                                                                                   
                                                        ┆                                                                                                                                   
                                                        ┆                                                                                                                                   
                                                        ┆                                                                                                                                   
                   ┆┄ sentence ┄┄ type_declare_sentence ┆             ┆┄ =                                                                                                                  
                   ┆                                    ┆             ┆                                                                                                                     
                   ┆                                    ┆             ┆                                                                                                                     
                   ┆                                    ┆             ┆                                                                                                                     
                   ┆                                    ┆             ┆                                                                                 ┆┄ E11 ┄┄ E ┄┄ NUM                  
                   ┆                                    ┆             ┆                                                                                 ┆                                   
                   ┆                                    ┆             ┆                                                                                 ┆                                   
                   ┆                                    ┆             ┆                                                                                 ┆                                   
                   ┆                                    ┆             ┆                                                                          ┆┄ E11 ┆┄ ,                                
                   ┆                                    ┆             ┆                                                                          ┆      ┆                                   
                   ┆                                    ┆┄ initialize ┆                                                                          ┆      ┆                                   
                   ┆                                    ┆             ┆                                                                          ┆      ┆                                   
                   ┆                                    ┆             ┆                                                                          ┆      ┆┄ E ┄┄ NUM                         
                   ┆                                    ┆             ┆                                                                          ┆                                          
                   ┆                                    ┆             ┆                                                                   ┆┄ E11 ┆                                          
                   ┆                                    ┆             ┆                                                                   ┆      ┆                                          
                   ┆                                    ┆             ┆                                                                   ┆      ┆┄ ,                                       
                   ┆                                    ┆             ┆                                                                   ┆      ┆                                          
S ┄┄ sentence_list ┆                                    ┆             ┆                                                                   ┆      ┆                                          
                   ┆                                    ┆             ┆                                                                   ┆      ┆                                          
                   ┆                                    ┆             ┆                                                                   ┆      ┆┄ E ┄┄ NUM                                
                   ┆                                    ┆             ┆┄ E1 ┄┄ E2 ┄┄ E3 ┄┄ E4 ┄┄ E5 ┄┄ E6 ┄┄ E7 ┄┄ E8 ┄┄ E9 ┄┄ E10 ┄┄ E11 ┆                                                 
                   ┆                                    ┆                                                                                 ┆                                                 
                   ┆                                    ┆                                                                                 ┆                                                 
                   ┆                                    ┆                                                                                 ┆┄ ,                                              
                   ┆                                    ┆                                                                                 ┆                                                 
                   ┆                                    ┆                                                                                 ┆                                                 
                   ┆                                    ┆                                                                                 ┆                                                 
                   ┆                                    ┆                                                                                 ┆┄ E ┄┄ NUM                                       
                   ┆                                    ┆                                                                                                                                   
                   ┆                                    ┆                                                                                                                                   
                   ┆                                    ┆                                                                                                                                   
                   ┆                                    ┆┄ ;                                                                                                                                
                   ┆                                                                                                                                                                        
                   ┆                                                                                                                                                                        
                   ┆                                                                                                                                                                        
                   ┆┄ sentence_list                                                                                                                                                         
                                                                                                                                                                                            
                                                                                                                                                                                            
                                                                                                                                                                                            
                                                                                                                                                                                            
                                                                                                                                                                                            
                                                                                                                                                                                            
                                                                                                                                                                                            
                                                                                                                                                                                            
                                                                                                                                                                                            
                                                                                                                                                                                            
                                                                                                                                                                                            
                                                                                                                                                                                            
                                                                                                                                                                                            
                                                                                                                                                                                            

ADD TO SYMBOL TABLE: <num1, int>
ADD TO SYMBOL TABLE: <num2, int>
ADD TO SYMBOL TABLE: <op, int>
ADD TO SYMBOL TABLE: <ans, int>
