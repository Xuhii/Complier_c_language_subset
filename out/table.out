ACTION TABEL:
{CONTINUE: <S,23>, BREAK: <S,27>, void: <S,8>, id: <S,36>, {: <S,41>, ++: <R,[E -> ]>, while: <S,39>, if: <S,29>, NUM: <S,20>, !=: <R,[E -> ]>, >=: <R,[E -> ]>, /=: <R,[E -> ]>, <<=: <R,[E -> ]>, *: <S,9>, -: <S,10>, --: <S,12>, =: <R,[E -> ]>, >>: <R,[E -> ]>, %=: <R,[E -> ]>, [: <R,[E -> ]>, +=: <R,[E -> ]>, >>=: <R,[E -> ]>, <: <R,[E -> ]>, +: <R,[E -> ]>, ]: <R,[E -> ]>, <<: <R,[E -> ]>, ,: <R,[E -> ]>, >: <R,[E -> ]>, *=: <R,[E -> ]>, and: <R,[E -> ]>, or: <R,[E -> ]>, ==: <R,[E -> ]>, ;: <R,[E -> ]>, <=: <R,[E -> ]>, /: <R,[E -> ]>, -=: <R,[E -> ]>, ): <R,[E -> ]>, %: <R,[E -> ]>, float: <S,44>, RETURN: <S,33>, STR: <S,21>, int: <S,15>, $: <R,[sentence_list -> ]>, }: <R,[sentence_list -> ]>, (: <S,7>, char: <S,47>, for: <S,45>, boolen: <S,19>, &: <S,30>}
{!=: <R,[sentence -> type_declare_sentence]>, else: <R,[sentence -> type_declare_sentence]>, ++: <R,[sentence -> type_declare_sentence]>, >=: <R,[sentence -> type_declare_sentence]>, /=: <R,[sentence -> type_declare_sentence]>, $: <R,[sentence -> type_declare_sentence]>, <<=: <R,[sentence -> type_declare_sentence]>, >>: <R,[sentence -> type_declare_sentence]>, +=: <R,[sentence -> type_declare_sentence]>, <<: <R,[sentence -> type_declare_sentence]>, BREAK: <R,[sentence -> type_declare_sentence]>, >: <R,[sentence -> type_declare_sentence]>, &: <R,[sentence -> type_declare_sentence]>, ==: <R,[sentence -> type_declare_sentence]>, ;: <R,[sentence -> type_declare_sentence]>, {: <R,[sentence -> type_declare_sentence]>, for: <R,[sentence -> type_declare_sentence]>, -=: <R,[sentence -> type_declare_sentence]>, %: <R,[sentence -> type_declare_sentence]>, (: <R,[sentence -> type_declare_sentence]>, void: <R,[sentence -> type_declare_sentence]>, *: <R,[sentence -> type_declare_sentence]>, --: <R,[sentence -> type_declare_sentence]>, -: <R,[sentence -> type_declare_sentence]>, }: <R,[sentence -> type_declare_sentence]>, =: <R,[sentence -> type_declare_sentence]>, int: <R,[sentence -> type_declare_sentence]>, %=: <R,[sentence -> type_declare_sentence]>, [: <R,[sentence -> type_declare_sentence]>, boolen: <R,[sentence -> type_declare_sentence]>, >>=: <R,[sentence -> type_declare_sentence]>, <: <R,[sentence -> type_declare_sentence]>, +: <R,[sentence -> type_declare_sentence]>, NUM: <R,[sentence -> type_declare_sentence]>, STR: <R,[sentence -> type_declare_sentence]>, CONTINUE: <R,[sentence -> type_declare_sentence]>, ,: <R,[sentence -> type_declare_sentence]>, *=: <R,[sentence -> type_declare_sentence]>, if: <R,[sentence -> type_declare_sentence]>, or: <R,[sentence -> type_declare_sentence]>, and: <R,[sentence -> type_declare_sentence]>, RETURN: <R,[sentence -> type_declare_sentence]>, while: <R,[sentence -> type_declare_sentence]>, id: <R,[sentence -> type_declare_sentence]>, <=: <R,[sentence -> type_declare_sentence]>, /: <R,[sentence -> type_declare_sentence]>, float: <R,[sentence -> type_declare_sentence]>, char: <R,[sentence -> type_declare_sentence]>}
{$: <ACC,-1>}
{+: <S,49>, -: <S,50>, !=: <R,[E6 -> E7]>, >=: <R,[E6 -> E7]>, /=: <R,[E6 -> E7]>, <<=: <R,[E6 -> E7]>, =: <R,[E6 -> E7]>, >>: <R,[E6 -> E7]>, %=: <R,[E6 -> E7]>, +=: <R,[E6 -> E7]>, >>=: <R,[E6 -> E7]>, <: <R,[E6 -> E7]>, <<: <R,[E6 -> E7]>, ,: <R,[E6 -> E7]>, >: <R,[E6 -> E7]>, *=: <R,[E6 -> E7]>, and: <R,[E6 -> E7]>, or: <R,[E6 -> E7]>, ==: <R,[E6 -> E7]>, ;: <R,[E6 -> E7]>, <=: <R,[E6 -> E7]>, -=: <R,[E6 -> E7]>, ): <R,[E6 -> E7]>}
{!=: <R,[F9_1 -> ++]>, >=: <R,[F9_1 -> ++]>, /=: <R,[F9_1 -> ++]>, <<=: <R,[F9_1 -> ++]>, (: <R,[F9_1 -> ++]>, *: <R,[F9_1 -> ++]>, -: <R,[F9_1 -> ++]>, =: <R,[F9_1 -> ++]>, >>: <R,[F9_1 -> ++]>, %=: <R,[F9_1 -> ++]>, [: <R,[F9_1 -> ++]>, +=: <R,[F9_1 -> ++]>, >>=: <R,[F9_1 -> ++]>, <: <R,[F9_1 -> ++]>, +: <R,[F9_1 -> ++]>, NUM: <R,[F9_1 -> ++]>, <<: <R,[F9_1 -> ++]>, STR: <R,[F9_1 -> ++]>, ,: <R,[F9_1 -> ++]>, >: <R,[F9_1 -> ++]>, *=: <R,[F9_1 -> ++]>, and: <R,[F9_1 -> ++]>, or: <R,[F9_1 -> ++]>, ==: <R,[F9_1 -> ++]>, ;: <R,[F9_1 -> ++]>, id: <R,[F9_1 -> ++]>, <=: <R,[F9_1 -> ++]>, /: <R,[F9_1 -> ++]>, -=: <R,[F9_1 -> ++]>, ): <R,[F9_1 -> ++]>, %: <R,[F9_1 -> ++]>}
{!=: <R,[sentence -> expression_sentence]>, else: <R,[sentence -> expression_sentence]>, ++: <R,[sentence -> expression_sentence]>, >=: <R,[sentence -> expression_sentence]>, /=: <R,[sentence -> expression_sentence]>, $: <R,[sentence -> expression_sentence]>, <<=: <R,[sentence -> expression_sentence]>, >>: <R,[sentence -> expression_sentence]>, +=: <R,[sentence -> expression_sentence]>, <<: <R,[sentence -> expression_sentence]>, BREAK: <R,[sentence -> expression_sentence]>, >: <R,[sentence -> expression_sentence]>, &: <R,[sentence -> expression_sentence]>, ==: <R,[sentence -> expression_sentence]>, ;: <R,[sentence -> expression_sentence]>, {: <R,[sentence -> expression_sentence]>, for: <R,[sentence -> expression_sentence]>, -=: <R,[sentence -> expression_sentence]>, %: <R,[sentence -> expression_sentence]>, (: <R,[sentence -> expression_sentence]>, void: <R,[sentence -> expression_sentence]>, *: <R,[sentence -> expression_sentence]>, --: <R,[sentence -> expression_sentence]>, -: <R,[sentence -> expression_sentence]>, }: <R,[sentence -> expression_sentence]>, =: <R,[sentence -> expression_sentence]>, int: <R,[sentence -> expression_sentence]>, %=: <R,[sentence -> expression_sentence]>, [: <R,[sentence -> expression_sentence]>, boolen: <R,[sentence -> expression_sentence]>, >>=: <R,[sentence -> expression_sentence]>, <: <R,[sentence -> expression_sentence]>, +: <R,[sentence -> expression_sentence]>, NUM: <R,[sentence -> expression_sentence]>, STR: <R,[sentence -> expression_sentence]>, CONTINUE: <R,[sentence -> expression_sentence]>, ,: <R,[sentence -> expression_sentence]>, *=: <R,[sentence -> expression_sentence]>, if: <R,[sentence -> expression_sentence]>, or: <R,[sentence -> expression_sentence]>, and: <R,[sentence -> expression_sentence]>, RETURN: <R,[sentence -> expression_sentence]>, while: <R,[sentence -> expression_sentence]>, id: <R,[sentence -> expression_sentence]>, <=: <R,[sentence -> expression_sentence]>, /: <R,[sentence -> expression_sentence]>, float: <R,[sentence -> expression_sentence]>, char: <R,[sentence -> expression_sentence]>}
{++: <S,4>, !=: <R,[E9 -> E10]>, >=: <R,[E9 -> E10]>, /=: <R,[E9 -> E10]>, <<=: <R,[E9 -> E10]>, *: <R,[E9 -> E10]>, -: <R,[E9 -> E10]>, =: <R,[E9 -> E10]>, >>: <R,[E9 -> E10]>, %=: <R,[E9 -> E10]>, +=: <R,[E9 -> E10]>, >>=: <R,[E9 -> E10]>, <: <R,[E9 -> E10]>, +: <R,[E9 -> E10]>, <<: <R,[E9 -> E10]>, ,: <R,[E9 -> E10]>, >: <R,[E9 -> E10]>, *=: <R,[E9 -> E10]>, and: <R,[E9 -> E10]>, or: <R,[E9 -> E10]>, ==: <R,[E9 -> E10]>, ;: <R,[E9 -> E10]>, <=: <R,[E9 -> E10]>, /: <R,[E9 -> E10]>, -=: <R,[E9 -> E10]>, ): <R,[E9 -> E10]>, %: <R,[E9 -> E10]>, [: <S,51>, --: <S,12>}
{id: <S,36>, ++: <R,[E -> ]>, NUM: <S,20>, !=: <R,[E -> ]>, >=: <R,[E -> ]>, /=: <R,[E -> ]>, <<=: <R,[E -> ]>, *: <S,9>, -: <S,10>, --: <S,12>, =: <R,[E -> ]>, >>: <R,[E -> ]>, %=: <R,[E -> ]>, [: <R,[E -> ]>, +=: <R,[E -> ]>, >>=: <R,[E -> ]>, <: <R,[E -> ]>, +: <R,[E -> ]>, ]: <R,[E -> ]>, <<: <R,[E -> ]>, ,: <R,[E -> ]>, >: <R,[E -> ]>, *=: <R,[E -> ]>, and: <R,[E -> ]>, or: <R,[E -> ]>, ==: <R,[E -> ]>, ;: <R,[E -> ]>, <=: <R,[E -> ]>, /: <R,[E -> ]>, -=: <R,[E -> ]>, ): <R,[E -> ]>, %: <R,[E -> ]>, STR: <S,21>, (: <S,7>, &: <S,30>}
{): <R,[type_statement -> void]>, id: <R,[type_statement -> void]>, ,: <R,[type_statement -> void]>}
{!=: <R,[F9_2 -> *]>, >=: <R,[F9_2 -> *]>, /=: <R,[F9_2 -> *]>, <<=: <R,[F9_2 -> *]>, (: <R,[F9_2 -> *]>, *: <R,[F9_2 -> *]>, -: <R,[F9_2 -> *]>, =: <R,[F9_2 -> *]>, >>: <R,[F9_2 -> *]>, %=: <R,[F9_2 -> *]>, [: <R,[F9_2 -> *]>, +=: <R,[F9_2 -> *]>, >>=: <R,[F9_2 -> *]>, <: <R,[F9_2 -> *]>, +: <R,[F9_2 -> *]>, NUM: <R,[F9_2 -> *]>, <<: <R,[F9_2 -> *]>, STR: <R,[F9_2 -> *]>, ,: <R,[F9_2 -> *]>, >: <R,[F9_2 -> *]>, *=: <R,[F9_2 -> *]>, and: <R,[F9_2 -> *]>, or: <R,[F9_2 -> *]>, ==: <R,[F9_2 -> *]>, ;: <R,[F9_2 -> *]>, id: <R,[F9_2 -> *]>, <=: <R,[F9_2 -> *]>, /: <R,[F9_2 -> *]>, -=: <R,[F9_2 -> *]>, ): <R,[F9_2 -> *]>, %: <R,[F9_2 -> *]>}
{!=: <R,[F9_2 -> -]>, >=: <R,[F9_2 -> -]>, /=: <R,[F9_2 -> -]>, <<=: <R,[F9_2 -> -]>, (: <R,[F9_2 -> -]>, *: <R,[F9_2 -> -]>, -: <R,[F9_2 -> -]>, =: <R,[F9_2 -> -]>, >>: <R,[F9_2 -> -]>, %=: <R,[F9_2 -> -]>, [: <R,[F9_2 -> -]>, +=: <R,[F9_2 -> -]>, >>=: <R,[F9_2 -> -]>, <: <R,[F9_2 -> -]>, +: <R,[F9_2 -> -]>, NUM: <R,[F9_2 -> -]>, <<: <R,[F9_2 -> -]>, STR: <R,[F9_2 -> -]>, ,: <R,[F9_2 -> -]>, >: <R,[F9_2 -> -]>, *=: <R,[F9_2 -> -]>, and: <R,[F9_2 -> -]>, or: <R,[F9_2 -> -]>, ==: <R,[F9_2 -> -]>, ;: <R,[F9_2 -> -]>, id: <R,[F9_2 -> -]>, <=: <R,[F9_2 -> -]>, /: <R,[F9_2 -> -]>, -=: <R,[F9_2 -> -]>, ): <R,[F9_2 -> -]>, %: <R,[F9_2 -> -]>}
{NUM: <S,20>, (: <S,7>, !=: <R,[E -> ]>, ++: <R,[E -> ]>, >=: <R,[E -> ]>, /=: <R,[E -> ]>, <<=: <R,[E -> ]>, *: <R,[E -> ]>, -: <R,[E -> ]>, --: <R,[E -> ]>, =: <R,[E -> ]>, >>: <R,[E -> ]>, %=: <R,[E -> ]>, [: <R,[E -> ]>, +=: <R,[E -> ]>, >>=: <R,[E -> ]>, <: <R,[E -> ]>, +: <R,[E -> ]>, ]: <R,[E -> ]>, <<: <R,[E -> ]>, ,: <R,[E -> ]>, >: <R,[E -> ]>, *=: <R,[E -> ]>, and: <R,[E -> ]>, or: <R,[E -> ]>, ==: <R,[E -> ]>, ;: <R,[E -> ]>, <=: <R,[E -> ]>, /: <R,[E -> ]>, -=: <R,[E -> ]>, ): <R,[E -> ]>, %: <R,[E -> ]>, id: <S,36>, STR: <S,21>}
{!=: <R,[F9_1 -> --]>, >=: <R,[F9_1 -> --]>, /=: <R,[F9_1 -> --]>, <<=: <R,[F9_1 -> --]>, (: <R,[F9_1 -> --]>, *: <R,[F9_1 -> --]>, -: <R,[F9_1 -> --]>, =: <R,[F9_1 -> --]>, >>: <R,[F9_1 -> --]>, %=: <R,[F9_1 -> --]>, [: <R,[F9_1 -> --]>, +=: <R,[F9_1 -> --]>, >>=: <R,[F9_1 -> --]>, <: <R,[F9_1 -> --]>, +: <R,[F9_1 -> --]>, NUM: <R,[F9_1 -> --]>, <<: <R,[F9_1 -> --]>, STR: <R,[F9_1 -> --]>, ,: <R,[F9_1 -> --]>, >: <R,[F9_1 -> --]>, *=: <R,[F9_1 -> --]>, and: <R,[F9_1 -> --]>, or: <R,[F9_1 -> --]>, ==: <R,[F9_1 -> --]>, ;: <R,[F9_1 -> --]>, id: <R,[F9_1 -> --]>, <=: <R,[F9_1 -> --]>, /: <R,[F9_1 -> --]>, -=: <R,[F9_1 -> --]>, ): <R,[F9_1 -> --]>, %: <R,[F9_1 -> --]>}
{!=: <R,[sentence -> go_sentence]>, else: <R,[sentence -> go_sentence]>, ++: <R,[sentence -> go_sentence]>, >=: <R,[sentence -> go_sentence]>, /=: <R,[sentence -> go_sentence]>, $: <R,[sentence -> go_sentence]>, <<=: <R,[sentence -> go_sentence]>, >>: <R,[sentence -> go_sentence]>, +=: <R,[sentence -> go_sentence]>, <<: <R,[sentence -> go_sentence]>, BREAK: <R,[sentence -> go_sentence]>, >: <R,[sentence -> go_sentence]>, &: <R,[sentence -> go_sentence]>, ==: <R,[sentence -> go_sentence]>, ;: <R,[sentence -> go_sentence]>, {: <R,[sentence -> go_sentence]>, for: <R,[sentence -> go_sentence]>, -=: <R,[sentence -> go_sentence]>, %: <R,[sentence -> go_sentence]>, (: <R,[sentence -> go_sentence]>, void: <R,[sentence -> go_sentence]>, *: <R,[sentence -> go_sentence]>, --: <R,[sentence -> go_sentence]>, -: <R,[sentence -> go_sentence]>, }: <R,[sentence -> go_sentence]>, =: <R,[sentence -> go_sentence]>, int: <R,[sentence -> go_sentence]>, %=: <R,[sentence -> go_sentence]>, [: <R,[sentence -> go_sentence]>, boolen: <R,[sentence -> go_sentence]>, >>=: <R,[sentence -> go_sentence]>, <: <R,[sentence -> go_sentence]>, +: <R,[sentence -> go_sentence]>, NUM: <R,[sentence -> go_sentence]>, STR: <R,[sentence -> go_sentence]>, CONTINUE: <R,[sentence -> go_sentence]>, ,: <R,[sentence -> go_sentence]>, *=: <R,[sentence -> go_sentence]>, if: <R,[sentence -> go_sentence]>, or: <R,[sentence -> go_sentence]>, and: <R,[sentence -> go_sentence]>, RETURN: <R,[sentence -> go_sentence]>, while: <R,[sentence -> go_sentence]>, id: <R,[sentence -> go_sentence]>, <=: <R,[sentence -> go_sentence]>, /: <R,[sentence -> go_sentence]>, float: <R,[sentence -> go_sentence]>, char: <R,[sentence -> go_sentence]>}
{!=: <R,[E10 -> E]>, ++: <R,[E10 -> E]>, >=: <R,[E10 -> E]>, /=: <R,[E10 -> E]>, <<=: <R,[E10 -> E]>, *: <R,[E10 -> E]>, -: <R,[E10 -> E]>, --: <R,[E10 -> E]>, =: <R,[E10 -> E]>, >>: <R,[E10 -> E]>, %=: <R,[E10 -> E]>, [: <R,[E10 -> E]>, +=: <R,[E10 -> E]>, >>=: <R,[E10 -> E]>, <: <R,[E10 -> E]>, +: <R,[E10 -> E]>, ]: <R,[E10 -> E]>, <<: <R,[E10 -> E]>, ,: <R,[E10 -> E]>, >: <R,[E10 -> E]>, *=: <R,[E10 -> E]>, and: <R,[E10 -> E]>, or: <R,[E10 -> E]>, ==: <R,[E10 -> E]>, ;: <R,[E10 -> E]>, <=: <R,[E10 -> E]>, /: <R,[E10 -> E]>, -=: <R,[E10 -> E]>, ): <R,[E10 -> E]>, %: <R,[E10 -> E]>}
{): <R,[type_statement -> int]>, id: <R,[type_statement -> int]>, ,: <R,[type_statement -> int]>}
{id: <S,56>}
{NUM: <S,20>, (: <S,7>, !=: <R,[E -> ]>, ++: <R,[E -> ]>, >=: <R,[E -> ]>, /=: <R,[E -> ]>, <<=: <R,[E -> ]>, *: <R,[E -> ]>, -: <R,[E -> ]>, --: <R,[E -> ]>, =: <R,[E -> ]>, >>: <R,[E -> ]>, %=: <R,[E -> ]>, [: <R,[E -> ]>, +=: <R,[E -> ]>, >>=: <R,[E -> ]>, <: <R,[E -> ]>, +: <R,[E -> ]>, ]: <R,[E -> ]>, <<: <R,[E -> ]>, ,: <R,[E -> ]>, >: <R,[E -> ]>, *=: <R,[E -> ]>, and: <R,[E -> ]>, or: <R,[E -> ]>, ==: <R,[E -> ]>, ;: <R,[E -> ]>, <=: <R,[E -> ]>, /: <R,[E -> ]>, -=: <R,[E -> ]>, ): <R,[E -> ]>, %: <R,[E -> ]>, id: <S,36>, STR: <S,21>}
{and: <S,59>, *=: <R,[E2 -> E3]>, or: <R,[E2 -> E3]>, /=: <R,[E2 -> E3]>, <<=: <R,[E2 -> E3]>, =: <R,[E2 -> E3]>, ;: <R,[E2 -> E3]>, %=: <R,[E2 -> E3]>, +=: <R,[E2 -> E3]>, >>=: <R,[E2 -> E3]>, -=: <R,[E2 -> E3]>, ): <R,[E2 -> E3]>, ,: <R,[E2 -> E3]>}
{): <R,[type_statement -> boolen]>, id: <R,[type_statement -> boolen]>, ,: <R,[type_statement -> boolen]>}
{!=: <R,[E -> NUM]>, ++: <R,[E -> NUM]>, >=: <R,[E -> NUM]>, /=: <R,[E -> NUM]>, <<=: <R,[E -> NUM]>, *: <R,[E -> NUM]>, -: <R,[E -> NUM]>, --: <R,[E -> NUM]>, =: <R,[E -> NUM]>, >>: <R,[E -> NUM]>, %=: <R,[E -> NUM]>, [: <R,[E -> NUM]>, +=: <R,[E -> NUM]>, >>=: <R,[E -> NUM]>, <: <R,[E -> NUM]>, +: <R,[E -> NUM]>, ]: <R,[E -> NUM]>, <<: <R,[E -> NUM]>, ,: <R,[E -> NUM]>, >: <R,[E -> NUM]>, *=: <R,[E -> NUM]>, and: <R,[E -> NUM]>, or: <R,[E -> NUM]>, ==: <R,[E -> NUM]>, ;: <R,[E -> NUM]>, <=: <R,[E -> NUM]>, /: <R,[E -> NUM]>, -=: <R,[E -> NUM]>, ): <R,[E -> NUM]>, %: <R,[E -> NUM]>}
{!=: <R,[E -> STR]>, ++: <R,[E -> STR]>, >=: <R,[E -> STR]>, /=: <R,[E -> STR]>, <<=: <R,[E -> STR]>, *: <R,[E -> STR]>, -: <R,[E -> STR]>, --: <R,[E -> STR]>, =: <R,[E -> STR]>, >>: <R,[E -> STR]>, %=: <R,[E -> STR]>, [: <R,[E -> STR]>, +=: <R,[E -> STR]>, >>=: <R,[E -> STR]>, <: <R,[E -> STR]>, +: <R,[E -> STR]>, ]: <R,[E -> STR]>, <<: <R,[E -> STR]>, ,: <R,[E -> STR]>, >: <R,[E -> STR]>, *=: <R,[E -> STR]>, and: <R,[E -> STR]>, or: <R,[E -> STR]>, ==: <R,[E -> STR]>, ;: <R,[E -> STR]>, <=: <R,[E -> STR]>, /: <R,[E -> STR]>, -=: <R,[E -> STR]>, ): <R,[E -> STR]>, %: <R,[E -> STR]>}
{>>: <S,60>, !=: <R,[E5 -> E6]>, >: <R,[E5 -> E6]>, *=: <R,[E5 -> E6]>, and: <R,[E5 -> E6]>, >=: <R,[E5 -> E6]>, ==: <R,[E5 -> E6]>, or: <R,[E5 -> E6]>, /=: <R,[E5 -> E6]>, <<=: <R,[E5 -> E6]>, =: <R,[E5 -> E6]>, ;: <R,[E5 -> E6]>, <=: <R,[E5 -> E6]>, %=: <R,[E5 -> E6]>, +=: <R,[E5 -> E6]>, >>=: <R,[E5 -> E6]>, -=: <R,[E5 -> E6]>, <: <R,[E5 -> E6]>, ): <R,[E5 -> E6]>, ,: <R,[E5 -> E6]>, <<: <S,62>}
{;: <S,63>}
{!=: <R,[sentence -> complex_sentence]>, else: <R,[sentence -> complex_sentence]>, ++: <R,[sentence -> complex_sentence]>, >=: <R,[sentence -> complex_sentence]>, /=: <R,[sentence -> complex_sentence]>, $: <R,[sentence -> complex_sentence]>, <<=: <R,[sentence -> complex_sentence]>, >>: <R,[sentence -> complex_sentence]>, +=: <R,[sentence -> complex_sentence]>, <<: <R,[sentence -> complex_sentence]>, BREAK: <R,[sentence -> complex_sentence]>, >: <R,[sentence -> complex_sentence]>, &: <R,[sentence -> complex_sentence]>, ==: <R,[sentence -> complex_sentence]>, ;: <R,[sentence -> complex_sentence]>, {: <R,[sentence -> complex_sentence]>, for: <R,[sentence -> complex_sentence]>, -=: <R,[sentence -> complex_sentence]>, %: <R,[sentence -> complex_sentence]>, (: <R,[sentence -> complex_sentence]>, void: <R,[sentence -> complex_sentence]>, *: <R,[sentence -> complex_sentence]>, --: <R,[sentence -> complex_sentence]>, -: <R,[sentence -> complex_sentence]>, }: <R,[sentence -> complex_sentence]>, =: <R,[sentence -> complex_sentence]>, int: <R,[sentence -> complex_sentence]>, %=: <R,[sentence -> complex_sentence]>, [: <R,[sentence -> complex_sentence]>, boolen: <R,[sentence -> complex_sentence]>, >>=: <R,[sentence -> complex_sentence]>, <: <R,[sentence -> complex_sentence]>, +: <R,[sentence -> complex_sentence]>, NUM: <R,[sentence -> complex_sentence]>, STR: <R,[sentence -> complex_sentence]>, CONTINUE: <R,[sentence -> complex_sentence]>, ,: <R,[sentence -> complex_sentence]>, *=: <R,[sentence -> complex_sentence]>, if: <R,[sentence -> complex_sentence]>, or: <R,[sentence -> complex_sentence]>, and: <R,[sentence -> complex_sentence]>, RETURN: <R,[sentence -> complex_sentence]>, while: <R,[sentence -> complex_sentence]>, id: <R,[sentence -> complex_sentence]>, <=: <R,[sentence -> complex_sentence]>, /: <R,[sentence -> complex_sentence]>, float: <R,[sentence -> complex_sentence]>, char: <R,[sentence -> complex_sentence]>}
{!=: <R,[E8 -> E9]>, >=: <R,[E8 -> E9]>, /=: <R,[E8 -> E9]>, <<=: <R,[E8 -> E9]>, *: <R,[E8 -> E9]>, -: <R,[E8 -> E9]>, =: <R,[E8 -> E9]>, >>: <R,[E8 -> E9]>, %=: <R,[E8 -> E9]>, +=: <R,[E8 -> E9]>, >>=: <R,[E8 -> E9]>, <: <R,[E8 -> E9]>, +: <R,[E8 -> E9]>, <<: <R,[E8 -> E9]>, ,: <R,[E8 -> E9]>, >: <R,[E8 -> E9]>, *=: <R,[E8 -> E9]>, and: <R,[E8 -> E9]>, or: <R,[E8 -> E9]>, ==: <R,[E8 -> E9]>, ;: <R,[E8 -> E9]>, <=: <R,[E8 -> E9]>, /: <R,[E8 -> E9]>, -=: <R,[E8 -> E9]>, ): <R,[E8 -> E9]>, %: <R,[E8 -> E9]>}
{>>=: <S,71>, ;: <S,64>, -=: <S,72>, +=: <S,68>, /=: <S,70>, <<=: <S,73>, *=: <S,69>, =: <S,66>, %=: <S,67>}
{;: <S,74>}
{!=: <R,[sentence -> for_sentence]>, else: <R,[sentence -> for_sentence]>, ++: <R,[sentence -> for_sentence]>, >=: <R,[sentence -> for_sentence]>, /=: <R,[sentence -> for_sentence]>, $: <R,[sentence -> for_sentence]>, <<=: <R,[sentence -> for_sentence]>, >>: <R,[sentence -> for_sentence]>, +=: <R,[sentence -> for_sentence]>, <<: <R,[sentence -> for_sentence]>, BREAK: <R,[sentence -> for_sentence]>, >: <R,[sentence -> for_sentence]>, &: <R,[sentence -> for_sentence]>, ==: <R,[sentence -> for_sentence]>, ;: <R,[sentence -> for_sentence]>, {: <R,[sentence -> for_sentence]>, for: <R,[sentence -> for_sentence]>, -=: <R,[sentence -> for_sentence]>, %: <R,[sentence -> for_sentence]>, (: <R,[sentence -> for_sentence]>, void: <R,[sentence -> for_sentence]>, *: <R,[sentence -> for_sentence]>, --: <R,[sentence -> for_sentence]>, -: <R,[sentence -> for_sentence]>, }: <R,[sentence -> for_sentence]>, =: <R,[sentence -> for_sentence]>, int: <R,[sentence -> for_sentence]>, %=: <R,[sentence -> for_sentence]>, [: <R,[sentence -> for_sentence]>, boolen: <R,[sentence -> for_sentence]>, >>=: <R,[sentence -> for_sentence]>, <: <R,[sentence -> for_sentence]>, +: <R,[sentence -> for_sentence]>, NUM: <R,[sentence -> for_sentence]>, STR: <R,[sentence -> for_sentence]>, CONTINUE: <R,[sentence -> for_sentence]>, ,: <R,[sentence -> for_sentence]>, *=: <R,[sentence -> for_sentence]>, if: <R,[sentence -> for_sentence]>, or: <R,[sentence -> for_sentence]>, and: <R,[sentence -> for_sentence]>, RETURN: <R,[sentence -> for_sentence]>, while: <R,[sentence -> for_sentence]>, id: <R,[sentence -> for_sentence]>, <=: <R,[sentence -> for_sentence]>, /: <R,[sentence -> for_sentence]>, float: <R,[sentence -> for_sentence]>, char: <R,[sentence -> for_sentence]>}
{(: <S,75>}
{!=: <R,[F9_2 -> &]>, >=: <R,[F9_2 -> &]>, /=: <R,[F9_2 -> &]>, <<=: <R,[F9_2 -> &]>, (: <R,[F9_2 -> &]>, *: <R,[F9_2 -> &]>, -: <R,[F9_2 -> &]>, =: <R,[F9_2 -> &]>, >>: <R,[F9_2 -> &]>, %=: <R,[F9_2 -> &]>, [: <R,[F9_2 -> &]>, +=: <R,[F9_2 -> &]>, >>=: <R,[F9_2 -> &]>, <: <R,[F9_2 -> &]>, +: <R,[F9_2 -> &]>, NUM: <R,[F9_2 -> &]>, <<: <R,[F9_2 -> &]>, STR: <R,[F9_2 -> &]>, ,: <R,[F9_2 -> &]>, >: <R,[F9_2 -> &]>, *=: <R,[F9_2 -> &]>, and: <R,[F9_2 -> &]>, or: <R,[F9_2 -> &]>, ==: <R,[F9_2 -> &]>, ;: <R,[F9_2 -> &]>, id: <R,[F9_2 -> &]>, <=: <R,[F9_2 -> &]>, /: <R,[F9_2 -> &]>, -=: <R,[F9_2 -> &]>, ): <R,[F9_2 -> &]>, %: <R,[F9_2 -> &]>}
{CONTINUE: <S,23>, BREAK: <S,27>, void: <S,8>, id: <S,36>, {: <S,41>, ++: <R,[E -> ]>, while: <S,39>, if: <S,29>, NUM: <S,20>, float: <S,44>, !=: <R,[E -> ]>, >=: <R,[E -> ]>, /=: <R,[E -> ]>, <<=: <R,[E -> ]>, *: <S,9>, -: <S,10>, --: <S,12>, =: <R,[E -> ]>, >>: <R,[E -> ]>, %=: <R,[E -> ]>, [: <R,[E -> ]>, +=: <R,[E -> ]>, >>=: <R,[E -> ]>, <: <R,[E -> ]>, +: <R,[E -> ]>, ]: <R,[E -> ]>, <<: <R,[E -> ]>, ,: <R,[E -> ]>, >: <R,[E -> ]>, *=: <R,[E -> ]>, and: <R,[E -> ]>, or: <R,[E -> ]>, ==: <R,[E -> ]>, ;: <R,[E -> ]>, <=: <R,[E -> ]>, /: <R,[E -> ]>, -=: <R,[E -> ]>, ): <R,[E -> ]>, %: <R,[E -> ]>, RETURN: <S,33>, STR: <S,21>, int: <S,15>, $: <R,[sentence_list -> sentence]>, }: <R,[sentence_list -> sentence]>, (: <S,7>, char: <S,47>, for: <S,45>, boolen: <S,19>, &: <S,30>}
{*=: <R,[E3 -> E4]>, or: <R,[E3 -> E4]>, and: <R,[E3 -> E4]>, /=: <R,[E3 -> E4]>, <<=: <R,[E3 -> E4]>, =: <R,[E3 -> E4]>, ;: <R,[E3 -> E4]>, %=: <R,[E3 -> E4]>, +=: <R,[E3 -> E4]>, >>=: <R,[E3 -> E4]>, -=: <R,[E3 -> E4]>, ): <R,[E3 -> E4]>, ,: <R,[E3 -> E4]>, ==: <S,79>, !=: <S,77>}
{id: <S,36>, ++: <R,[E -> ]>, NUM: <S,20>, !=: <R,[E -> ]>, >=: <R,[E -> ]>, /=: <R,[E -> ]>, <<=: <R,[E -> ]>, *: <S,9>, -: <S,10>, --: <S,12>, =: <R,[E -> ]>, >>: <R,[E -> ]>, %=: <R,[E -> ]>, [: <R,[E -> ]>, +=: <R,[E -> ]>, >>=: <R,[E -> ]>, <: <R,[E -> ]>, +: <R,[E -> ]>, ]: <R,[E -> ]>, <<: <R,[E -> ]>, ,: <R,[E -> ]>, >: <R,[E -> ]>, *=: <R,[E -> ]>, and: <R,[E -> ]>, or: <R,[E -> ]>, ==: <R,[E -> ]>, ;: <S,81>, <=: <R,[E -> ]>, /: <R,[E -> ]>, -=: <R,[E -> ]>, ): <R,[E -> ]>, %: <R,[E -> ]>, STR: <S,21>, (: <S,7>, &: <S,30>}
{,: <S,83>, =: <R,[E1 -> E_dot_exp]>, ;: <R,[E1 -> E_dot_exp]>, %=: <R,[E1 -> E_dot_exp]>, *=: <R,[E1 -> E_dot_exp]>, +=: <R,[E1 -> E_dot_exp]>, /=: <R,[E1 -> E_dot_exp]>, <<=: <R,[E1 -> E_dot_exp]>, -=: <R,[E1 -> E_dot_exp]>, >>=: <R,[E1 -> E_dot_exp]>}
{or: <S,84>, *=: <R,[E_dot_exp -> E2]>, /=: <R,[E_dot_exp -> E2]>, <<=: <R,[E_dot_exp -> E2]>, =: <R,[E_dot_exp -> E2]>, ;: <R,[E_dot_exp -> E2]>, %=: <R,[E_dot_exp -> E2]>, +=: <R,[E_dot_exp -> E2]>, >>=: <R,[E_dot_exp -> E2]>, -=: <R,[E_dot_exp -> E2]>, ): <R,[E_dot_exp -> E2]>, ,: <R,[E_dot_exp -> E2]>}
{(: <S,86>, !=: <R,[E -> id]>, ++: <R,[E -> id]>, >=: <R,[E -> id]>, /=: <R,[E -> id]>, <<=: <R,[E -> id]>, *: <R,[E -> id]>, -: <R,[E -> id]>, --: <R,[E -> id]>, =: <R,[E -> id]>, >>: <R,[E -> id]>, %=: <R,[E -> id]>, [: <R,[E -> id]>, +=: <R,[E -> id]>, >>=: <R,[E -> id]>, <: <R,[E -> id]>, +: <R,[E -> id]>, ]: <R,[E -> id]>, <<: <R,[E -> id]>, ,: <R,[E -> id]>, >: <R,[E -> id]>, *=: <R,[E -> id]>, and: <R,[E -> id]>, or: <R,[E -> id]>, ==: <R,[E -> id]>, ;: <R,[E -> id]>, <=: <R,[E -> id]>, /: <R,[E -> id]>, -=: <R,[E -> id]>, ): <R,[E -> id]>, %: <R,[E -> id]>}
{/: <S,87>, *: <S,90>, !=: <R,[E7 -> E8]>, >=: <R,[E7 -> E8]>, /=: <R,[E7 -> E8]>, <<=: <R,[E7 -> E8]>, -: <R,[E7 -> E8]>, =: <R,[E7 -> E8]>, >>: <R,[E7 -> E8]>, %=: <R,[E7 -> E8]>, +=: <R,[E7 -> E8]>, >>=: <R,[E7 -> E8]>, <: <R,[E7 -> E8]>, +: <R,[E7 -> E8]>, <<: <R,[E7 -> E8]>, ,: <R,[E7 -> E8]>, >: <R,[E7 -> E8]>, *=: <R,[E7 -> E8]>, and: <R,[E7 -> E8]>, or: <R,[E7 -> E8]>, ==: <R,[E7 -> E8]>, ;: <R,[E7 -> E8]>, <=: <R,[E7 -> E8]>, -=: <R,[E7 -> E8]>, ): <R,[E7 -> E8]>, %: <S,88>}
{!=: <R,[sentence -> while_sentence]>, else: <R,[sentence -> while_sentence]>, ++: <R,[sentence -> while_sentence]>, >=: <R,[sentence -> while_sentence]>, /=: <R,[sentence -> while_sentence]>, $: <R,[sentence -> while_sentence]>, <<=: <R,[sentence -> while_sentence]>, >>: <R,[sentence -> while_sentence]>, +=: <R,[sentence -> while_sentence]>, <<: <R,[sentence -> while_sentence]>, BREAK: <R,[sentence -> while_sentence]>, >: <R,[sentence -> while_sentence]>, &: <R,[sentence -> while_sentence]>, ==: <R,[sentence -> while_sentence]>, ;: <R,[sentence -> while_sentence]>, {: <R,[sentence -> while_sentence]>, for: <R,[sentence -> while_sentence]>, -=: <R,[sentence -> while_sentence]>, %: <R,[sentence -> while_sentence]>, (: <R,[sentence -> while_sentence]>, void: <R,[sentence -> while_sentence]>, *: <R,[sentence -> while_sentence]>, --: <R,[sentence -> while_sentence]>, -: <R,[sentence -> while_sentence]>, }: <R,[sentence -> while_sentence]>, =: <R,[sentence -> while_sentence]>, int: <R,[sentence -> while_sentence]>, %=: <R,[sentence -> while_sentence]>, [: <R,[sentence -> while_sentence]>, boolen: <R,[sentence -> while_sentence]>, >>=: <R,[sentence -> while_sentence]>, <: <R,[sentence -> while_sentence]>, +: <R,[sentence -> while_sentence]>, NUM: <R,[sentence -> while_sentence]>, STR: <R,[sentence -> while_sentence]>, CONTINUE: <R,[sentence -> while_sentence]>, ,: <R,[sentence -> while_sentence]>, *=: <R,[sentence -> while_sentence]>, if: <R,[sentence -> while_sentence]>, or: <R,[sentence -> while_sentence]>, and: <R,[sentence -> while_sentence]>, RETURN: <R,[sentence -> while_sentence]>, while: <R,[sentence -> while_sentence]>, id: <R,[sentence -> while_sentence]>, <=: <R,[sentence -> while_sentence]>, /: <R,[sentence -> while_sentence]>, float: <R,[sentence -> while_sentence]>, char: <R,[sentence -> while_sentence]>}
{(: <S,91>}
{!=: <R,[sentence -> if_sentence]>, else: <R,[sentence -> if_sentence]>, ++: <R,[sentence -> if_sentence]>, >=: <R,[sentence -> if_sentence]>, /=: <R,[sentence -> if_sentence]>, $: <R,[sentence -> if_sentence]>, <<=: <R,[sentence -> if_sentence]>, >>: <R,[sentence -> if_sentence]>, +=: <R,[sentence -> if_sentence]>, <<: <R,[sentence -> if_sentence]>, BREAK: <R,[sentence -> if_sentence]>, >: <R,[sentence -> if_sentence]>, &: <R,[sentence -> if_sentence]>, ==: <R,[sentence -> if_sentence]>, ;: <R,[sentence -> if_sentence]>, {: <R,[sentence -> if_sentence]>, for: <R,[sentence -> if_sentence]>, -=: <R,[sentence -> if_sentence]>, %: <R,[sentence -> if_sentence]>, (: <R,[sentence -> if_sentence]>, void: <R,[sentence -> if_sentence]>, *: <R,[sentence -> if_sentence]>, --: <R,[sentence -> if_sentence]>, -: <R,[sentence -> if_sentence]>, }: <R,[sentence -> if_sentence]>, =: <R,[sentence -> if_sentence]>, int: <R,[sentence -> if_sentence]>, %=: <R,[sentence -> if_sentence]>, [: <R,[sentence -> if_sentence]>, boolen: <R,[sentence -> if_sentence]>, >>=: <R,[sentence -> if_sentence]>, <: <R,[sentence -> if_sentence]>, +: <R,[sentence -> if_sentence]>, NUM: <R,[sentence -> if_sentence]>, STR: <R,[sentence -> if_sentence]>, CONTINUE: <R,[sentence -> if_sentence]>, ,: <R,[sentence -> if_sentence]>, *=: <R,[sentence -> if_sentence]>, if: <R,[sentence -> if_sentence]>, or: <R,[sentence -> if_sentence]>, and: <R,[sentence -> if_sentence]>, RETURN: <R,[sentence -> if_sentence]>, while: <R,[sentence -> if_sentence]>, id: <R,[sentence -> if_sentence]>, <=: <R,[sentence -> if_sentence]>, /: <R,[sentence -> if_sentence]>, float: <R,[sentence -> if_sentence]>, char: <R,[sentence -> if_sentence]>}
{CONTINUE: <S,23>, BREAK: <S,27>, void: <S,8>, id: <S,36>, {: <S,41>, ++: <R,[E -> ]>, while: <S,39>, if: <S,29>, NUM: <S,20>, !=: <R,[E -> ]>, >=: <R,[E -> ]>, /=: <R,[E -> ]>, <<=: <R,[E -> ]>, *: <S,9>, -: <S,10>, --: <S,12>, =: <R,[E -> ]>, >>: <R,[E -> ]>, %=: <R,[E -> ]>, [: <R,[E -> ]>, +=: <R,[E -> ]>, >>=: <R,[E -> ]>, <: <R,[E -> ]>, +: <R,[E -> ]>, ]: <R,[E -> ]>, <<: <R,[E -> ]>, ,: <R,[E -> ]>, >: <R,[E -> ]>, *=: <R,[E -> ]>, and: <R,[E -> ]>, or: <R,[E -> ]>, ==: <R,[E -> ]>, ;: <R,[E -> ]>, <=: <R,[E -> ]>, /: <R,[E -> ]>, -=: <R,[E -> ]>, ): <R,[E -> ]>, %: <R,[E -> ]>, float: <S,44>, RETURN: <S,33>, STR: <S,21>, int: <S,15>, $: <R,[sentence_list -> ]>, }: <R,[sentence_list -> ]>, (: <S,7>, char: <S,47>, for: <S,45>, boolen: <S,19>, &: <S,30>}
{<: <S,97>, <=: <S,94>, >: <S,93>, !=: <R,[E4 -> E5]>, *=: <R,[E4 -> E5]>, or: <R,[E4 -> E5]>, and: <R,[E4 -> E5]>, ==: <R,[E4 -> E5]>, /=: <R,[E4 -> E5]>, <<=: <R,[E4 -> E5]>, =: <R,[E4 -> E5]>, ;: <R,[E4 -> E5]>, %=: <R,[E4 -> E5]>, +=: <R,[E4 -> E5]>, >>=: <R,[E4 -> E5]>, -=: <R,[E4 -> E5]>, ): <R,[E4 -> E5]>, ,: <R,[E4 -> E5]>, >=: <S,96>}
{$: <R,[S -> sentence_list]>}
{): <R,[type_statement -> float]>, id: <R,[type_statement -> float]>, ,: <R,[type_statement -> float]>}
{(: <S,98>}
{!=: <R,[sentence -> func_define]>, else: <R,[sentence -> func_define]>, ++: <R,[sentence -> func_define]>, >=: <R,[sentence -> func_define]>, /=: <R,[sentence -> func_define]>, $: <R,[sentence -> func_define]>, <<=: <R,[sentence -> func_define]>, >>: <R,[sentence -> func_define]>, +=: <R,[sentence -> func_define]>, <<: <R,[sentence -> func_define]>, BREAK: <R,[sentence -> func_define]>, >: <R,[sentence -> func_define]>, &: <R,[sentence -> func_define]>, ==: <R,[sentence -> func_define]>, ;: <R,[sentence -> func_define]>, {: <R,[sentence -> func_define]>, for: <R,[sentence -> func_define]>, -=: <R,[sentence -> func_define]>, %: <R,[sentence -> func_define]>, (: <R,[sentence -> func_define]>, void: <R,[sentence -> func_define]>, *: <R,[sentence -> func_define]>, --: <R,[sentence -> func_define]>, -: <R,[sentence -> func_define]>, }: <R,[sentence -> func_define]>, =: <R,[sentence -> func_define]>, int: <R,[sentence -> func_define]>, %=: <R,[sentence -> func_define]>, [: <R,[sentence -> func_define]>, boolen: <R,[sentence -> func_define]>, >>=: <R,[sentence -> func_define]>, <: <R,[sentence -> func_define]>, +: <R,[sentence -> func_define]>, NUM: <R,[sentence -> func_define]>, STR: <R,[sentence -> func_define]>, CONTINUE: <R,[sentence -> func_define]>, ,: <R,[sentence -> func_define]>, *=: <R,[sentence -> func_define]>, if: <R,[sentence -> func_define]>, or: <R,[sentence -> func_define]>, and: <R,[sentence -> func_define]>, RETURN: <R,[sentence -> func_define]>, while: <R,[sentence -> func_define]>, id: <R,[sentence -> func_define]>, <=: <R,[sentence -> func_define]>, /: <R,[sentence -> func_define]>, float: <R,[sentence -> func_define]>, char: <R,[sentence -> func_define]>}
{): <R,[type_statement -> char]>, id: <R,[type_statement -> char]>, ,: <R,[type_statement -> char]>}
{id: <S,36>, ++: <R,[E -> ]>, NUM: <S,20>, !=: <R,[E -> ]>, >=: <R,[E -> ]>, /=: <R,[E -> ]>, <<=: <R,[E -> ]>, *: <S,9>, -: <S,10>, --: <S,12>, =: <R,[E -> ]>, >>: <R,[E -> ]>, %=: <R,[E -> ]>, [: <R,[E -> ]>, +=: <R,[E -> ]>, >>=: <R,[E -> ]>, <: <R,[E -> ]>, +: <R,[E -> ]>, ]: <R,[E -> ]>, <<: <R,[E -> ]>, ,: <R,[E -> ]>, >: <R,[E -> ]>, *=: <R,[E -> ]>, and: <R,[E -> ]>, or: <R,[E -> ]>, ==: <R,[E -> ]>, ;: <R,[E -> ]>, <=: <R,[E -> ]>, /: <R,[E -> ]>, -=: <R,[E -> ]>, ): <R,[E -> ]>, %: <R,[E -> ]>, STR: <S,21>, (: <S,7>, &: <S,30>}
{!=: <R,[F7 -> +]>, ++: <R,[F7 -> +]>, >=: <R,[F7 -> +]>, /=: <R,[F7 -> +]>, <<=: <R,[F7 -> +]>, (: <R,[F7 -> +]>, *: <R,[F7 -> +]>, -: <R,[F7 -> +]>, --: <R,[F7 -> +]>, =: <R,[F7 -> +]>, >>: <R,[F7 -> +]>, %=: <R,[F7 -> +]>, [: <R,[F7 -> +]>, +=: <R,[F7 -> +]>, >>=: <R,[F7 -> +]>, <: <R,[F7 -> +]>, +: <R,[F7 -> +]>, NUM: <R,[F7 -> +]>, <<: <R,[F7 -> +]>, STR: <R,[F7 -> +]>, ,: <R,[F7 -> +]>, >: <R,[F7 -> +]>, *=: <R,[F7 -> +]>, and: <R,[F7 -> +]>, &: <R,[F7 -> +]>, ==: <R,[F7 -> +]>, or: <R,[F7 -> +]>, ;: <R,[F7 -> +]>, id: <R,[F7 -> +]>, <=: <R,[F7 -> +]>, /: <R,[F7 -> +]>, -=: <R,[F7 -> +]>, ): <R,[F7 -> +]>, %: <R,[F7 -> +]>}
{!=: <R,[F7 -> -]>, ++: <R,[F7 -> -]>, >=: <R,[F7 -> -]>, /=: <R,[F7 -> -]>, <<=: <R,[F7 -> -]>, (: <R,[F7 -> -]>, *: <R,[F7 -> -]>, -: <R,[F7 -> -]>, --: <R,[F7 -> -]>, =: <R,[F7 -> -]>, >>: <R,[F7 -> -]>, %=: <R,[F7 -> -]>, [: <R,[F7 -> -]>, +=: <R,[F7 -> -]>, >>=: <R,[F7 -> -]>, <: <R,[F7 -> -]>, +: <R,[F7 -> -]>, NUM: <R,[F7 -> -]>, <<: <R,[F7 -> -]>, STR: <R,[F7 -> -]>, ,: <R,[F7 -> -]>, >: <R,[F7 -> -]>, *=: <R,[F7 -> -]>, and: <R,[F7 -> -]>, &: <R,[F7 -> -]>, ==: <R,[F7 -> -]>, or: <R,[F7 -> -]>, ;: <R,[F7 -> -]>, id: <R,[F7 -> -]>, <=: <R,[F7 -> -]>, /: <R,[F7 -> -]>, -=: <R,[F7 -> -]>, ): <R,[F7 -> -]>, %: <R,[F7 -> -]>}
{NUM: <S,20>, (: <S,7>, !=: <R,[E -> ]>, ++: <R,[E -> ]>, >=: <R,[E -> ]>, /=: <R,[E -> ]>, <<=: <R,[E -> ]>, *: <R,[E -> ]>, -: <R,[E -> ]>, --: <R,[E -> ]>, =: <R,[E -> ]>, >>: <R,[E -> ]>, %=: <R,[E -> ]>, [: <R,[E -> ]>, +=: <R,[E -> ]>, >>=: <R,[E -> ]>, <: <R,[E -> ]>, +: <R,[E -> ]>, ]: <R,[E -> ]>, <<: <R,[E -> ]>, ,: <R,[E -> ]>, >: <R,[E -> ]>, *=: <R,[E -> ]>, and: <R,[E -> ]>, or: <R,[E -> ]>, ==: <R,[E -> ]>, ;: <R,[E -> ]>, <=: <R,[E -> ]>, /: <R,[E -> ]>, -=: <R,[E -> ]>, ): <R,[E -> ]>, %: <R,[E -> ]>, id: <S,36>, STR: <S,21>}
{!=: <R,[E9 -> E10 F9_1]>, >=: <R,[E9 -> E10 F9_1]>, /=: <R,[E9 -> E10 F9_1]>, <<=: <R,[E9 -> E10 F9_1]>, *: <R,[E9 -> E10 F9_1]>, -: <R,[E9 -> E10 F9_1]>, =: <R,[E9 -> E10 F9_1]>, >>: <R,[E9 -> E10 F9_1]>, %=: <R,[E9 -> E10 F9_1]>, +=: <R,[E9 -> E10 F9_1]>, >>=: <R,[E9 -> E10 F9_1]>, <: <R,[E9 -> E10 F9_1]>, +: <R,[E9 -> E10 F9_1]>, <<: <R,[E9 -> E10 F9_1]>, ,: <R,[E9 -> E10 F9_1]>, >: <R,[E9 -> E10 F9_1]>, *=: <R,[E9 -> E10 F9_1]>, and: <R,[E9 -> E10 F9_1]>, or: <R,[E9 -> E10 F9_1]>, ==: <R,[E9 -> E10 F9_1]>, ;: <R,[E9 -> E10 F9_1]>, <=: <R,[E9 -> E10 F9_1]>, /: <R,[E9 -> E10 F9_1]>, -=: <R,[E9 -> E10 F9_1]>, ): <R,[E9 -> E10 F9_1]>, %: <R,[E9 -> E10 F9_1]>}
{or: <S,84>, ): <S,101>}
{[: <S,51>, !=: <R,[E9 -> F9_2 E10]>, >=: <R,[E9 -> F9_2 E10]>, /=: <R,[E9 -> F9_2 E10]>, <<=: <R,[E9 -> F9_2 E10]>, *: <R,[E9 -> F9_2 E10]>, -: <R,[E9 -> F9_2 E10]>, =: <R,[E9 -> F9_2 E10]>, >>: <R,[E9 -> F9_2 E10]>, %=: <R,[E9 -> F9_2 E10]>, +=: <R,[E9 -> F9_2 E10]>, >>=: <R,[E9 -> F9_2 E10]>, <: <R,[E9 -> F9_2 E10]>, +: <R,[E9 -> F9_2 E10]>, <<: <R,[E9 -> F9_2 E10]>, ,: <R,[E9 -> F9_2 E10]>, >: <R,[E9 -> F9_2 E10]>, *=: <R,[E9 -> F9_2 E10]>, and: <R,[E9 -> F9_2 E10]>, or: <R,[E9 -> F9_2 E10]>, ==: <R,[E9 -> F9_2 E10]>, ;: <R,[E9 -> F9_2 E10]>, <=: <R,[E9 -> F9_2 E10]>, /: <R,[E9 -> F9_2 E10]>, -=: <R,[E9 -> F9_2 E10]>, ): <R,[E9 -> F9_2 E10]>, %: <R,[E9 -> F9_2 E10]>}
{;: <R,[initialize -> ]>, =: <S,102>}
{(: <S,104>, ,: <S,105>, =: <R,[id_list -> id]>, ;: <R,[id_list -> id]>}
{[: <S,51>, !=: <R,[E9 -> F9_1 E10]>, >=: <R,[E9 -> F9_1 E10]>, /=: <R,[E9 -> F9_1 E10]>, <<=: <R,[E9 -> F9_1 E10]>, *: <R,[E9 -> F9_1 E10]>, -: <R,[E9 -> F9_1 E10]>, =: <R,[E9 -> F9_1 E10]>, >>: <R,[E9 -> F9_1 E10]>, %=: <R,[E9 -> F9_1 E10]>, +=: <R,[E9 -> F9_1 E10]>, >>=: <R,[E9 -> F9_1 E10]>, <: <R,[E9 -> F9_1 E10]>, +: <R,[E9 -> F9_1 E10]>, <<: <R,[E9 -> F9_1 E10]>, ,: <R,[E9 -> F9_1 E10]>, >: <R,[E9 -> F9_1 E10]>, *=: <R,[E9 -> F9_1 E10]>, and: <R,[E9 -> F9_1 E10]>, or: <R,[E9 -> F9_1 E10]>, ==: <R,[E9 -> F9_1 E10]>, ;: <R,[E9 -> F9_1 E10]>, <=: <R,[E9 -> F9_1 E10]>, /: <R,[E9 -> F9_1 E10]>, -=: <R,[E9 -> F9_1 E10]>, ): <R,[E9 -> F9_1 E10]>, %: <R,[E9 -> F9_1 E10]>}
{id: <S,36>, ++: <R,[E -> ]>, NUM: <S,20>, !=: <R,[E -> ]>, >=: <R,[E -> ]>, /=: <R,[E -> ]>, <<=: <R,[E -> ]>, *: <S,9>, -: <S,10>, --: <S,12>, =: <R,[E -> ]>, >>: <R,[E -> ]>, %=: <R,[E -> ]>, [: <R,[E -> ]>, +=: <R,[E -> ]>, >>=: <R,[E -> ]>, <: <R,[E -> ]>, +: <R,[E -> ]>, ]: <R,[E -> ]>, <<: <R,[E -> ]>, ,: <R,[E -> ]>, >: <R,[E -> ]>, *=: <R,[E -> ]>, and: <R,[E -> ]>, or: <R,[E -> ]>, ==: <R,[E -> ]>, ;: <R,[E -> ]>, <=: <R,[E -> ]>, /: <R,[E -> ]>, -=: <R,[E -> ]>, ): <R,[E -> ]>, %: <R,[E -> ]>, STR: <S,21>, (: <S,7>, &: <S,30>}
{!=: <R,[F3 -> and]>, ++: <R,[F3 -> and]>, >=: <R,[F3 -> and]>, /=: <R,[F3 -> and]>, <<=: <R,[F3 -> and]>, (: <R,[F3 -> and]>, *: <R,[F3 -> and]>, --: <R,[F3 -> and]>, -: <R,[F3 -> and]>, =: <R,[F3 -> and]>, >>: <R,[F3 -> and]>, %=: <R,[F3 -> and]>, [: <R,[F3 -> and]>, +=: <R,[F3 -> and]>, >>=: <R,[F3 -> and]>, <: <R,[F3 -> and]>, +: <R,[F3 -> and]>, NUM: <R,[F3 -> and]>, STR: <R,[F3 -> and]>, <<: <R,[F3 -> and]>, ,: <R,[F3 -> and]>, >: <R,[F3 -> and]>, *=: <R,[F3 -> and]>, and: <R,[F3 -> and]>, &: <R,[F3 -> and]>, ==: <R,[F3 -> and]>, or: <R,[F3 -> and]>, ;: <R,[F3 -> and]>, id: <R,[F3 -> and]>, <=: <R,[F3 -> and]>, /: <R,[F3 -> and]>, -=: <R,[F3 -> and]>, ): <R,[F3 -> and]>, %: <R,[F3 -> and]>}
{!=: <R,[F6 -> >>]>, ++: <R,[F6 -> >>]>, >=: <R,[F6 -> >>]>, /=: <R,[F6 -> >>]>, <<=: <R,[F6 -> >>]>, (: <R,[F6 -> >>]>, *: <R,[F6 -> >>]>, -: <R,[F6 -> >>]>, --: <R,[F6 -> >>]>, =: <R,[F6 -> >>]>, >>: <R,[F6 -> >>]>, %=: <R,[F6 -> >>]>, [: <R,[F6 -> >>]>, +=: <R,[F6 -> >>]>, >>=: <R,[F6 -> >>]>, <: <R,[F6 -> >>]>, +: <R,[F6 -> >>]>, NUM: <R,[F6 -> >>]>, <<: <R,[F6 -> >>]>, STR: <R,[F6 -> >>]>, ,: <R,[F6 -> >>]>, >: <R,[F6 -> >>]>, *=: <R,[F6 -> >>]>, and: <R,[F6 -> >>]>, &: <R,[F6 -> >>]>, ==: <R,[F6 -> >>]>, or: <R,[F6 -> >>]>, ;: <R,[F6 -> >>]>, id: <R,[F6 -> >>]>, <=: <R,[F6 -> >>]>, /: <R,[F6 -> >>]>, -=: <R,[F6 -> >>]>, ): <R,[F6 -> >>]>, %: <R,[F6 -> >>]>}
{id: <S,36>, ++: <R,[E -> ]>, NUM: <S,20>, !=: <R,[E -> ]>, >=: <R,[E -> ]>, /=: <R,[E -> ]>, <<=: <R,[E -> ]>, *: <S,9>, -: <S,10>, --: <S,12>, =: <R,[E -> ]>, >>: <R,[E -> ]>, %=: <R,[E -> ]>, [: <R,[E -> ]>, +=: <R,[E -> ]>, >>=: <R,[E -> ]>, <: <R,[E -> ]>, +: <R,[E -> ]>, ]: <R,[E -> ]>, <<: <R,[E -> ]>, ,: <R,[E -> ]>, >: <R,[E -> ]>, *=: <R,[E -> ]>, and: <R,[E -> ]>, or: <R,[E -> ]>, ==: <R,[E -> ]>, ;: <R,[E -> ]>, <=: <R,[E -> ]>, /: <R,[E -> ]>, -=: <R,[E -> ]>, ): <R,[E -> ]>, %: <R,[E -> ]>, STR: <S,21>, (: <S,7>, &: <S,30>}
{!=: <R,[F6 -> <<]>, ++: <R,[F6 -> <<]>, >=: <R,[F6 -> <<]>, /=: <R,[F6 -> <<]>, <<=: <R,[F6 -> <<]>, (: <R,[F6 -> <<]>, *: <R,[F6 -> <<]>, -: <R,[F6 -> <<]>, --: <R,[F6 -> <<]>, =: <R,[F6 -> <<]>, >>: <R,[F6 -> <<]>, %=: <R,[F6 -> <<]>, [: <R,[F6 -> <<]>, +=: <R,[F6 -> <<]>, >>=: <R,[F6 -> <<]>, <: <R,[F6 -> <<]>, +: <R,[F6 -> <<]>, NUM: <R,[F6 -> <<]>, <<: <R,[F6 -> <<]>, STR: <R,[F6 -> <<]>, ,: <R,[F6 -> <<]>, >: <R,[F6 -> <<]>, *=: <R,[F6 -> <<]>, and: <R,[F6 -> <<]>, &: <R,[F6 -> <<]>, ==: <R,[F6 -> <<]>, or: <R,[F6 -> <<]>, ;: <R,[F6 -> <<]>, id: <R,[F6 -> <<]>, <=: <R,[F6 -> <<]>, /: <R,[F6 -> <<]>, -=: <R,[F6 -> <<]>, ): <R,[F6 -> <<]>, %: <R,[F6 -> <<]>}
{!=: <R,[go_sentence -> CONTINUE ;]>, else: <R,[go_sentence -> CONTINUE ;]>, ++: <R,[go_sentence -> CONTINUE ;]>, >=: <R,[go_sentence -> CONTINUE ;]>, /=: <R,[go_sentence -> CONTINUE ;]>, $: <R,[go_sentence -> CONTINUE ;]>, <<=: <R,[go_sentence -> CONTINUE ;]>, >>: <R,[go_sentence -> CONTINUE ;]>, +=: <R,[go_sentence -> CONTINUE ;]>, <<: <R,[go_sentence -> CONTINUE ;]>, BREAK: <R,[go_sentence -> CONTINUE ;]>, >: <R,[go_sentence -> CONTINUE ;]>, &: <R,[go_sentence -> CONTINUE ;]>, ==: <R,[go_sentence -> CONTINUE ;]>, ;: <R,[go_sentence -> CONTINUE ;]>, {: <R,[go_sentence -> CONTINUE ;]>, for: <R,[go_sentence -> CONTINUE ;]>, -=: <R,[go_sentence -> CONTINUE ;]>, %: <R,[go_sentence -> CONTINUE ;]>, (: <R,[go_sentence -> CONTINUE ;]>, void: <R,[go_sentence -> CONTINUE ;]>, *: <R,[go_sentence -> CONTINUE ;]>, --: <R,[go_sentence -> CONTINUE ;]>, -: <R,[go_sentence -> CONTINUE ;]>, }: <R,[go_sentence -> CONTINUE ;]>, =: <R,[go_sentence -> CONTINUE ;]>, int: <R,[go_sentence -> CONTINUE ;]>, %=: <R,[go_sentence -> CONTINUE ;]>, [: <R,[go_sentence -> CONTINUE ;]>, boolen: <R,[go_sentence -> CONTINUE ;]>, >>=: <R,[go_sentence -> CONTINUE ;]>, <: <R,[go_sentence -> CONTINUE ;]>, +: <R,[go_sentence -> CONTINUE ;]>, NUM: <R,[go_sentence -> CONTINUE ;]>, STR: <R,[go_sentence -> CONTINUE ;]>, CONTINUE: <R,[go_sentence -> CONTINUE ;]>, ,: <R,[go_sentence -> CONTINUE ;]>, *=: <R,[go_sentence -> CONTINUE ;]>, if: <R,[go_sentence -> CONTINUE ;]>, or: <R,[go_sentence -> CONTINUE ;]>, and: <R,[go_sentence -> CONTINUE ;]>, RETURN: <R,[go_sentence -> CONTINUE ;]>, while: <R,[go_sentence -> CONTINUE ;]>, id: <R,[go_sentence -> CONTINUE ;]>, <=: <R,[go_sentence -> CONTINUE ;]>, /: <R,[go_sentence -> CONTINUE ;]>, float: <R,[go_sentence -> CONTINUE ;]>, char: <R,[go_sentence -> CONTINUE ;]>}
{!=: <R,[expression_sentence -> E1 ;]>, else: <R,[expression_sentence -> E1 ;]>, ++: <R,[expression_sentence -> E1 ;]>, >=: <R,[expression_sentence -> E1 ;]>, /=: <R,[expression_sentence -> E1 ;]>, $: <R,[expression_sentence -> E1 ;]>, <<=: <R,[expression_sentence -> E1 ;]>, >>: <R,[expression_sentence -> E1 ;]>, +=: <R,[expression_sentence -> E1 ;]>, <<: <R,[expression_sentence -> E1 ;]>, BREAK: <R,[expression_sentence -> E1 ;]>, >: <R,[expression_sentence -> E1 ;]>, &: <R,[expression_sentence -> E1 ;]>, ==: <R,[expression_sentence -> E1 ;]>, ;: <R,[expression_sentence -> E1 ;]>, {: <R,[expression_sentence -> E1 ;]>, for: <R,[expression_sentence -> E1 ;]>, -=: <R,[expression_sentence -> E1 ;]>, ): <R,[expression_sentence -> E1 ;]>, %: <R,[expression_sentence -> E1 ;]>, (: <R,[expression_sentence -> E1 ;]>, void: <R,[expression_sentence -> E1 ;]>, *: <R,[expression_sentence -> E1 ;]>, -: <R,[expression_sentence -> E1 ;]>, --: <R,[expression_sentence -> E1 ;]>, }: <R,[expression_sentence -> E1 ;]>, =: <R,[expression_sentence -> E1 ;]>, int: <R,[expression_sentence -> E1 ;]>, %=: <R,[expression_sentence -> E1 ;]>, [: <R,[expression_sentence -> E1 ;]>, boolen: <R,[expression_sentence -> E1 ;]>, >>=: <R,[expression_sentence -> E1 ;]>, <: <R,[expression_sentence -> E1 ;]>, +: <R,[expression_sentence -> E1 ;]>, NUM: <R,[expression_sentence -> E1 ;]>, STR: <R,[expression_sentence -> E1 ;]>, CONTINUE: <R,[expression_sentence -> E1 ;]>, ,: <R,[expression_sentence -> E1 ;]>, *=: <R,[expression_sentence -> E1 ;]>, if: <R,[expression_sentence -> E1 ;]>, or: <R,[expression_sentence -> E1 ;]>, and: <R,[expression_sentence -> E1 ;]>, RETURN: <R,[expression_sentence -> E1 ;]>, id: <R,[expression_sentence -> E1 ;]>, <=: <R,[expression_sentence -> E1 ;]>, while: <R,[expression_sentence -> E1 ;]>, /: <R,[expression_sentence -> E1 ;]>, float: <R,[expression_sentence -> E1 ;]>, char: <R,[expression_sentence -> E1 ;]>}
{id: <S,36>, ++: <R,[E -> ]>, NUM: <S,20>, !=: <R,[E -> ]>, >=: <R,[E -> ]>, /=: <R,[E -> ]>, <<=: <R,[E -> ]>, *: <S,9>, -: <S,10>, --: <S,12>, =: <R,[E -> ]>, >>: <R,[E -> ]>, %=: <R,[E -> ]>, [: <R,[E -> ]>, +=: <R,[E -> ]>, >>=: <R,[E -> ]>, <: <R,[E -> ]>, +: <R,[E -> ]>, ]: <R,[E -> ]>, <<: <R,[E -> ]>, ,: <R,[E -> ]>, >: <R,[E -> ]>, *=: <R,[E -> ]>, and: <R,[E -> ]>, or: <R,[E -> ]>, ==: <R,[E -> ]>, ;: <R,[E -> ]>, <=: <R,[E -> ]>, /: <R,[E -> ]>, -=: <R,[E -> ]>, ): <R,[E -> ]>, %: <R,[E -> ]>, STR: <S,21>, (: <S,7>, &: <S,30>}
{!=: <R,[F1 -> =]>, ++: <R,[F1 -> =]>, >=: <R,[F1 -> =]>, /=: <R,[F1 -> =]>, <<=: <R,[F1 -> =]>, (: <R,[F1 -> =]>, *: <R,[F1 -> =]>, --: <R,[F1 -> =]>, -: <R,[F1 -> =]>, =: <R,[F1 -> =]>, >>: <R,[F1 -> =]>, %=: <R,[F1 -> =]>, [: <R,[F1 -> =]>, +=: <R,[F1 -> =]>, >>=: <R,[F1 -> =]>, <: <R,[F1 -> =]>, +: <R,[F1 -> =]>, NUM: <R,[F1 -> =]>, STR: <R,[F1 -> =]>, <<: <R,[F1 -> =]>, ,: <R,[F1 -> =]>, >: <R,[F1 -> =]>, *=: <R,[F1 -> =]>, or: <R,[F1 -> =]>, &: <R,[F1 -> =]>, and: <R,[F1 -> =]>, ==: <R,[F1 -> =]>, ;: <R,[F1 -> =]>, id: <R,[F1 -> =]>, <=: <R,[F1 -> =]>, /: <R,[F1 -> =]>, -=: <R,[F1 -> =]>, %: <R,[F1 -> =]>}
{!=: <R,[F1 -> %=]>, ++: <R,[F1 -> %=]>, >=: <R,[F1 -> %=]>, /=: <R,[F1 -> %=]>, <<=: <R,[F1 -> %=]>, (: <R,[F1 -> %=]>, *: <R,[F1 -> %=]>, --: <R,[F1 -> %=]>, -: <R,[F1 -> %=]>, =: <R,[F1 -> %=]>, >>: <R,[F1 -> %=]>, %=: <R,[F1 -> %=]>, [: <R,[F1 -> %=]>, +=: <R,[F1 -> %=]>, >>=: <R,[F1 -> %=]>, <: <R,[F1 -> %=]>, +: <R,[F1 -> %=]>, NUM: <R,[F1 -> %=]>, STR: <R,[F1 -> %=]>, <<: <R,[F1 -> %=]>, ,: <R,[F1 -> %=]>, >: <R,[F1 -> %=]>, *=: <R,[F1 -> %=]>, or: <R,[F1 -> %=]>, &: <R,[F1 -> %=]>, and: <R,[F1 -> %=]>, ==: <R,[F1 -> %=]>, ;: <R,[F1 -> %=]>, id: <R,[F1 -> %=]>, <=: <R,[F1 -> %=]>, /: <R,[F1 -> %=]>, -=: <R,[F1 -> %=]>, %: <R,[F1 -> %=]>}
{!=: <R,[F1 -> +=]>, ++: <R,[F1 -> +=]>, >=: <R,[F1 -> +=]>, /=: <R,[F1 -> +=]>, <<=: <R,[F1 -> +=]>, (: <R,[F1 -> +=]>, *: <R,[F1 -> +=]>, --: <R,[F1 -> +=]>, -: <R,[F1 -> +=]>, =: <R,[F1 -> +=]>, >>: <R,[F1 -> +=]>, %=: <R,[F1 -> +=]>, [: <R,[F1 -> +=]>, +=: <R,[F1 -> +=]>, >>=: <R,[F1 -> +=]>, <: <R,[F1 -> +=]>, +: <R,[F1 -> +=]>, NUM: <R,[F1 -> +=]>, STR: <R,[F1 -> +=]>, <<: <R,[F1 -> +=]>, ,: <R,[F1 -> +=]>, >: <R,[F1 -> +=]>, *=: <R,[F1 -> +=]>, or: <R,[F1 -> +=]>, &: <R,[F1 -> +=]>, and: <R,[F1 -> +=]>, ==: <R,[F1 -> +=]>, ;: <R,[F1 -> +=]>, id: <R,[F1 -> +=]>, <=: <R,[F1 -> +=]>, /: <R,[F1 -> +=]>, -=: <R,[F1 -> +=]>, %: <R,[F1 -> +=]>}
{!=: <R,[F1 -> *=]>, ++: <R,[F1 -> *=]>, >=: <R,[F1 -> *=]>, /=: <R,[F1 -> *=]>, <<=: <R,[F1 -> *=]>, (: <R,[F1 -> *=]>, *: <R,[F1 -> *=]>, --: <R,[F1 -> *=]>, -: <R,[F1 -> *=]>, =: <R,[F1 -> *=]>, >>: <R,[F1 -> *=]>, %=: <R,[F1 -> *=]>, [: <R,[F1 -> *=]>, +=: <R,[F1 -> *=]>, >>=: <R,[F1 -> *=]>, <: <R,[F1 -> *=]>, +: <R,[F1 -> *=]>, NUM: <R,[F1 -> *=]>, STR: <R,[F1 -> *=]>, <<: <R,[F1 -> *=]>, ,: <R,[F1 -> *=]>, >: <R,[F1 -> *=]>, *=: <R,[F1 -> *=]>, or: <R,[F1 -> *=]>, &: <R,[F1 -> *=]>, and: <R,[F1 -> *=]>, ==: <R,[F1 -> *=]>, ;: <R,[F1 -> *=]>, id: <R,[F1 -> *=]>, <=: <R,[F1 -> *=]>, /: <R,[F1 -> *=]>, -=: <R,[F1 -> *=]>, %: <R,[F1 -> *=]>}
{!=: <R,[F1 -> /=]>, ++: <R,[F1 -> /=]>, >=: <R,[F1 -> /=]>, /=: <R,[F1 -> /=]>, <<=: <R,[F1 -> /=]>, (: <R,[F1 -> /=]>, *: <R,[F1 -> /=]>, --: <R,[F1 -> /=]>, -: <R,[F1 -> /=]>, =: <R,[F1 -> /=]>, >>: <R,[F1 -> /=]>, %=: <R,[F1 -> /=]>, [: <R,[F1 -> /=]>, +=: <R,[F1 -> /=]>, >>=: <R,[F1 -> /=]>, <: <R,[F1 -> /=]>, +: <R,[F1 -> /=]>, NUM: <R,[F1 -> /=]>, STR: <R,[F1 -> /=]>, <<: <R,[F1 -> /=]>, ,: <R,[F1 -> /=]>, >: <R,[F1 -> /=]>, *=: <R,[F1 -> /=]>, or: <R,[F1 -> /=]>, &: <R,[F1 -> /=]>, and: <R,[F1 -> /=]>, ==: <R,[F1 -> /=]>, ;: <R,[F1 -> /=]>, id: <R,[F1 -> /=]>, <=: <R,[F1 -> /=]>, /: <R,[F1 -> /=]>, -=: <R,[F1 -> /=]>, %: <R,[F1 -> /=]>}
{!=: <R,[F1 -> >>=]>, ++: <R,[F1 -> >>=]>, >=: <R,[F1 -> >>=]>, /=: <R,[F1 -> >>=]>, <<=: <R,[F1 -> >>=]>, (: <R,[F1 -> >>=]>, *: <R,[F1 -> >>=]>, --: <R,[F1 -> >>=]>, -: <R,[F1 -> >>=]>, =: <R,[F1 -> >>=]>, >>: <R,[F1 -> >>=]>, %=: <R,[F1 -> >>=]>, [: <R,[F1 -> >>=]>, +=: <R,[F1 -> >>=]>, >>=: <R,[F1 -> >>=]>, <: <R,[F1 -> >>=]>, +: <R,[F1 -> >>=]>, NUM: <R,[F1 -> >>=]>, STR: <R,[F1 -> >>=]>, <<: <R,[F1 -> >>=]>, ,: <R,[F1 -> >>=]>, >: <R,[F1 -> >>=]>, *=: <R,[F1 -> >>=]>, or: <R,[F1 -> >>=]>, &: <R,[F1 -> >>=]>, and: <R,[F1 -> >>=]>, ==: <R,[F1 -> >>=]>, ;: <R,[F1 -> >>=]>, id: <R,[F1 -> >>=]>, <=: <R,[F1 -> >>=]>, /: <R,[F1 -> >>=]>, -=: <R,[F1 -> >>=]>, %: <R,[F1 -> >>=]>}
{!=: <R,[F1 -> -=]>, ++: <R,[F1 -> -=]>, >=: <R,[F1 -> -=]>, /=: <R,[F1 -> -=]>, <<=: <R,[F1 -> -=]>, (: <R,[F1 -> -=]>, *: <R,[F1 -> -=]>, --: <R,[F1 -> -=]>, -: <R,[F1 -> -=]>, =: <R,[F1 -> -=]>, >>: <R,[F1 -> -=]>, %=: <R,[F1 -> -=]>, [: <R,[F1 -> -=]>, +=: <R,[F1 -> -=]>, >>=: <R,[F1 -> -=]>, <: <R,[F1 -> -=]>, +: <R,[F1 -> -=]>, NUM: <R,[F1 -> -=]>, STR: <R,[F1 -> -=]>, <<: <R,[F1 -> -=]>, ,: <R,[F1 -> -=]>, >: <R,[F1 -> -=]>, *=: <R,[F1 -> -=]>, or: <R,[F1 -> -=]>, &: <R,[F1 -> -=]>, and: <R,[F1 -> -=]>, ==: <R,[F1 -> -=]>, ;: <R,[F1 -> -=]>, id: <R,[F1 -> -=]>, <=: <R,[F1 -> -=]>, /: <R,[F1 -> -=]>, -=: <R,[F1 -> -=]>, %: <R,[F1 -> -=]>}
{!=: <R,[F1 -> <<=]>, ++: <R,[F1 -> <<=]>, >=: <R,[F1 -> <<=]>, /=: <R,[F1 -> <<=]>, <<=: <R,[F1 -> <<=]>, (: <R,[F1 -> <<=]>, *: <R,[F1 -> <<=]>, --: <R,[F1 -> <<=]>, -: <R,[F1 -> <<=]>, =: <R,[F1 -> <<=]>, >>: <R,[F1 -> <<=]>, %=: <R,[F1 -> <<=]>, [: <R,[F1 -> <<=]>, +=: <R,[F1 -> <<=]>, >>=: <R,[F1 -> <<=]>, <: <R,[F1 -> <<=]>, +: <R,[F1 -> <<=]>, NUM: <R,[F1 -> <<=]>, STR: <R,[F1 -> <<=]>, <<: <R,[F1 -> <<=]>, ,: <R,[F1 -> <<=]>, >: <R,[F1 -> <<=]>, *=: <R,[F1 -> <<=]>, or: <R,[F1 -> <<=]>, &: <R,[F1 -> <<=]>, and: <R,[F1 -> <<=]>, ==: <R,[F1 -> <<=]>, ;: <R,[F1 -> <<=]>, id: <R,[F1 -> <<=]>, <=: <R,[F1 -> <<=]>, /: <R,[F1 -> <<=]>, -=: <R,[F1 -> <<=]>, %: <R,[F1 -> <<=]>}
{!=: <R,[go_sentence -> BREAK ;]>, else: <R,[go_sentence -> BREAK ;]>, ++: <R,[go_sentence -> BREAK ;]>, >=: <R,[go_sentence -> BREAK ;]>, /=: <R,[go_sentence -> BREAK ;]>, $: <R,[go_sentence -> BREAK ;]>, <<=: <R,[go_sentence -> BREAK ;]>, >>: <R,[go_sentence -> BREAK ;]>, +=: <R,[go_sentence -> BREAK ;]>, <<: <R,[go_sentence -> BREAK ;]>, BREAK: <R,[go_sentence -> BREAK ;]>, >: <R,[go_sentence -> BREAK ;]>, &: <R,[go_sentence -> BREAK ;]>, ==: <R,[go_sentence -> BREAK ;]>, ;: <R,[go_sentence -> BREAK ;]>, {: <R,[go_sentence -> BREAK ;]>, for: <R,[go_sentence -> BREAK ;]>, -=: <R,[go_sentence -> BREAK ;]>, %: <R,[go_sentence -> BREAK ;]>, (: <R,[go_sentence -> BREAK ;]>, void: <R,[go_sentence -> BREAK ;]>, *: <R,[go_sentence -> BREAK ;]>, --: <R,[go_sentence -> BREAK ;]>, -: <R,[go_sentence -> BREAK ;]>, }: <R,[go_sentence -> BREAK ;]>, =: <R,[go_sentence -> BREAK ;]>, int: <R,[go_sentence -> BREAK ;]>, %=: <R,[go_sentence -> BREAK ;]>, [: <R,[go_sentence -> BREAK ;]>, boolen: <R,[go_sentence -> BREAK ;]>, >>=: <R,[go_sentence -> BREAK ;]>, <: <R,[go_sentence -> BREAK ;]>, +: <R,[go_sentence -> BREAK ;]>, NUM: <R,[go_sentence -> BREAK ;]>, STR: <R,[go_sentence -> BREAK ;]>, CONTINUE: <R,[go_sentence -> BREAK ;]>, ,: <R,[go_sentence -> BREAK ;]>, *=: <R,[go_sentence -> BREAK ;]>, if: <R,[go_sentence -> BREAK ;]>, or: <R,[go_sentence -> BREAK ;]>, and: <R,[go_sentence -> BREAK ;]>, RETURN: <R,[go_sentence -> BREAK ;]>, while: <R,[go_sentence -> BREAK ;]>, id: <R,[go_sentence -> BREAK ;]>, <=: <R,[go_sentence -> BREAK ;]>, /: <R,[go_sentence -> BREAK ;]>, float: <R,[go_sentence -> BREAK ;]>, char: <R,[go_sentence -> BREAK ;]>}
{id: <S,36>, ++: <R,[E -> ]>, NUM: <S,20>, !=: <R,[E -> ]>, >=: <R,[E -> ]>, /=: <R,[E -> ]>, <<=: <R,[E -> ]>, *: <S,9>, -: <S,10>, --: <S,12>, =: <R,[E -> ]>, >>: <R,[E -> ]>, %=: <R,[E -> ]>, [: <R,[E -> ]>, +=: <R,[E -> ]>, >>=: <R,[E -> ]>, <: <R,[E -> ]>, +: <R,[E -> ]>, ]: <R,[E -> ]>, <<: <R,[E -> ]>, ,: <R,[E -> ]>, >: <R,[E -> ]>, *=: <R,[E -> ]>, and: <R,[E -> ]>, or: <R,[E -> ]>, ==: <R,[E -> ]>, ;: <R,[E -> ]>, <=: <R,[E -> ]>, /: <R,[E -> ]>, -=: <R,[E -> ]>, ): <R,[E -> ]>, %: <R,[E -> ]>, STR: <S,21>, (: <S,7>, &: <S,30>}
{$: <R,[sentence_list -> sentence sentence_list]>, }: <R,[sentence_list -> sentence sentence_list]>}
{!=: <R,[F4 -> !=]>, ++: <R,[F4 -> !=]>, >=: <R,[F4 -> !=]>, /=: <R,[F4 -> !=]>, <<=: <R,[F4 -> !=]>, (: <R,[F4 -> !=]>, *: <R,[F4 -> !=]>, --: <R,[F4 -> !=]>, -: <R,[F4 -> !=]>, =: <R,[F4 -> !=]>, >>: <R,[F4 -> !=]>, %=: <R,[F4 -> !=]>, [: <R,[F4 -> !=]>, +=: <R,[F4 -> !=]>, >>=: <R,[F4 -> !=]>, <: <R,[F4 -> !=]>, +: <R,[F4 -> !=]>, NUM: <R,[F4 -> !=]>, STR: <R,[F4 -> !=]>, <<: <R,[F4 -> !=]>, ,: <R,[F4 -> !=]>, >: <R,[F4 -> !=]>, *=: <R,[F4 -> !=]>, and: <R,[F4 -> !=]>, &: <R,[F4 -> !=]>, ==: <R,[F4 -> !=]>, or: <R,[F4 -> !=]>, ;: <R,[F4 -> !=]>, id: <R,[F4 -> !=]>, <=: <R,[F4 -> !=]>, /: <R,[F4 -> !=]>, -=: <R,[F4 -> !=]>, ): <R,[F4 -> !=]>, %: <R,[F4 -> !=]>}
{id: <S,36>, ++: <R,[E -> ]>, NUM: <S,20>, !=: <R,[E -> ]>, >=: <R,[E -> ]>, /=: <R,[E -> ]>, <<=: <R,[E -> ]>, *: <S,9>, -: <S,10>, --: <S,12>, =: <R,[E -> ]>, >>: <R,[E -> ]>, %=: <R,[E -> ]>, [: <R,[E -> ]>, +=: <R,[E -> ]>, >>=: <R,[E -> ]>, <: <R,[E -> ]>, +: <R,[E -> ]>, ]: <R,[E -> ]>, <<: <R,[E -> ]>, ,: <R,[E -> ]>, >: <R,[E -> ]>, *=: <R,[E -> ]>, and: <R,[E -> ]>, or: <R,[E -> ]>, ==: <R,[E -> ]>, ;: <R,[E -> ]>, <=: <R,[E -> ]>, /: <R,[E -> ]>, -=: <R,[E -> ]>, ): <R,[E -> ]>, %: <R,[E -> ]>, STR: <S,21>, (: <S,7>, &: <S,30>}
{!=: <R,[F4 -> ==]>, ++: <R,[F4 -> ==]>, >=: <R,[F4 -> ==]>, /=: <R,[F4 -> ==]>, <<=: <R,[F4 -> ==]>, (: <R,[F4 -> ==]>, *: <R,[F4 -> ==]>, --: <R,[F4 -> ==]>, -: <R,[F4 -> ==]>, =: <R,[F4 -> ==]>, >>: <R,[F4 -> ==]>, %=: <R,[F4 -> ==]>, [: <R,[F4 -> ==]>, +=: <R,[F4 -> ==]>, >>=: <R,[F4 -> ==]>, <: <R,[F4 -> ==]>, +: <R,[F4 -> ==]>, NUM: <R,[F4 -> ==]>, STR: <R,[F4 -> ==]>, <<: <R,[F4 -> ==]>, ,: <R,[F4 -> ==]>, >: <R,[F4 -> ==]>, *=: <R,[F4 -> ==]>, and: <R,[F4 -> ==]>, &: <R,[F4 -> ==]>, ==: <R,[F4 -> ==]>, or: <R,[F4 -> ==]>, ;: <R,[F4 -> ==]>, id: <R,[F4 -> ==]>, <=: <R,[F4 -> ==]>, /: <R,[F4 -> ==]>, -=: <R,[F4 -> ==]>, ): <R,[F4 -> ==]>, %: <R,[F4 -> ==]>}
{or: <S,84>, ;: <S,111>}
{!=: <R,[go_sentence -> RETURN ;]>, else: <R,[go_sentence -> RETURN ;]>, ++: <R,[go_sentence -> RETURN ;]>, >=: <R,[go_sentence -> RETURN ;]>, /=: <R,[go_sentence -> RETURN ;]>, $: <R,[go_sentence -> RETURN ;]>, <<=: <R,[go_sentence -> RETURN ;]>, >>: <R,[go_sentence -> RETURN ;]>, +=: <R,[go_sentence -> RETURN ;]>, <<: <R,[go_sentence -> RETURN ;]>, BREAK: <R,[go_sentence -> RETURN ;]>, >: <R,[go_sentence -> RETURN ;]>, &: <R,[go_sentence -> RETURN ;]>, ==: <R,[go_sentence -> RETURN ;]>, ;: <R,[go_sentence -> RETURN ;]>, {: <R,[go_sentence -> RETURN ;]>, for: <R,[go_sentence -> RETURN ;]>, -=: <R,[go_sentence -> RETURN ;]>, %: <R,[go_sentence -> RETURN ;]>, (: <R,[go_sentence -> RETURN ;]>, void: <R,[go_sentence -> RETURN ;]>, *: <R,[go_sentence -> RETURN ;]>, --: <R,[go_sentence -> RETURN ;]>, -: <R,[go_sentence -> RETURN ;]>, }: <R,[go_sentence -> RETURN ;]>, =: <R,[go_sentence -> RETURN ;]>, int: <R,[go_sentence -> RETURN ;]>, %=: <R,[go_sentence -> RETURN ;]>, [: <R,[go_sentence -> RETURN ;]>, boolen: <R,[go_sentence -> RETURN ;]>, >>=: <R,[go_sentence -> RETURN ;]>, <: <R,[go_sentence -> RETURN ;]>, +: <R,[go_sentence -> RETURN ;]>, NUM: <R,[go_sentence -> RETURN ;]>, STR: <R,[go_sentence -> RETURN ;]>, CONTINUE: <R,[go_sentence -> RETURN ;]>, ,: <R,[go_sentence -> RETURN ;]>, *=: <R,[go_sentence -> RETURN ;]>, if: <R,[go_sentence -> RETURN ;]>, or: <R,[go_sentence -> RETURN ;]>, and: <R,[go_sentence -> RETURN ;]>, RETURN: <R,[go_sentence -> RETURN ;]>, while: <R,[go_sentence -> RETURN ;]>, id: <R,[go_sentence -> RETURN ;]>, <=: <R,[go_sentence -> RETURN ;]>, /: <R,[go_sentence -> RETURN ;]>, float: <R,[go_sentence -> RETURN ;]>, char: <R,[go_sentence -> RETURN ;]>}
{id: <S,36>, ++: <R,[E -> ]>, NUM: <S,20>, !=: <R,[E -> ]>, >=: <R,[E -> ]>, /=: <R,[E -> ]>, <<=: <R,[E -> ]>, *: <S,9>, -: <S,10>, --: <S,12>, =: <R,[E -> ]>, >>: <R,[E -> ]>, %=: <R,[E -> ]>, [: <R,[E -> ]>, +=: <R,[E -> ]>, >>=: <R,[E -> ]>, <: <R,[E -> ]>, +: <R,[E -> ]>, ]: <R,[E -> ]>, <<: <R,[E -> ]>, ,: <R,[E -> ]>, >: <R,[E -> ]>, *=: <R,[E -> ]>, and: <R,[E -> ]>, or: <R,[E -> ]>, ==: <R,[E -> ]>, ;: <R,[E -> ]>, <=: <R,[E -> ]>, /: <R,[E -> ]>, -=: <R,[E -> ]>, ): <R,[E -> ]>, %: <R,[E -> ]>, STR: <S,21>, (: <S,7>, &: <S,30>}
{!=: <R,[F_dot_exp -> ,]>, ++: <R,[F_dot_exp -> ,]>, >=: <R,[F_dot_exp -> ,]>, /=: <R,[F_dot_exp -> ,]>, <<=: <R,[F_dot_exp -> ,]>, (: <R,[F_dot_exp -> ,]>, *: <R,[F_dot_exp -> ,]>, --: <R,[F_dot_exp -> ,]>, -: <R,[F_dot_exp -> ,]>, =: <R,[F_dot_exp -> ,]>, >>: <R,[F_dot_exp -> ,]>, %=: <R,[F_dot_exp -> ,]>, [: <R,[F_dot_exp -> ,]>, +=: <R,[F_dot_exp -> ,]>, >>=: <R,[F_dot_exp -> ,]>, <: <R,[F_dot_exp -> ,]>, +: <R,[F_dot_exp -> ,]>, NUM: <R,[F_dot_exp -> ,]>, STR: <R,[F_dot_exp -> ,]>, <<: <R,[F_dot_exp -> ,]>, ,: <R,[F_dot_exp -> ,]>, >: <R,[F_dot_exp -> ,]>, *=: <R,[F_dot_exp -> ,]>, or: <R,[F_dot_exp -> ,]>, &: <R,[F_dot_exp -> ,]>, and: <R,[F_dot_exp -> ,]>, ==: <R,[F_dot_exp -> ,]>, ;: <R,[F_dot_exp -> ,]>, id: <R,[F_dot_exp -> ,]>, <=: <R,[F_dot_exp -> ,]>, /: <R,[F_dot_exp -> ,]>, -=: <R,[F_dot_exp -> ,]>, ): <R,[F_dot_exp -> ,]>, %: <R,[F_dot_exp -> ,]>}
{!=: <R,[F2 -> or]>, ++: <R,[F2 -> or]>, >=: <R,[F2 -> or]>, /=: <R,[F2 -> or]>, <<=: <R,[F2 -> or]>, (: <R,[F2 -> or]>, *: <R,[F2 -> or]>, --: <R,[F2 -> or]>, -: <R,[F2 -> or]>, =: <R,[F2 -> or]>, >>: <R,[F2 -> or]>, %=: <R,[F2 -> or]>, [: <R,[F2 -> or]>, +=: <R,[F2 -> or]>, >>=: <R,[F2 -> or]>, <: <R,[F2 -> or]>, +: <R,[F2 -> or]>, NUM: <R,[F2 -> or]>, STR: <R,[F2 -> or]>, <<: <R,[F2 -> or]>, ,: <R,[F2 -> or]>, >: <R,[F2 -> or]>, *=: <R,[F2 -> or]>, and: <R,[F2 -> or]>, &: <R,[F2 -> or]>, ==: <R,[F2 -> or]>, or: <R,[F2 -> or]>, ;: <R,[F2 -> or]>, id: <R,[F2 -> or]>, <=: <R,[F2 -> or]>, /: <R,[F2 -> or]>, -=: <R,[F2 -> or]>, ): <R,[F2 -> or]>, %: <R,[F2 -> or]>}
{id: <S,36>, ++: <R,[E -> ]>, NUM: <S,20>, !=: <R,[E -> ]>, >=: <R,[E -> ]>, /=: <R,[E -> ]>, <<=: <R,[E -> ]>, *: <S,9>, -: <S,10>, --: <S,12>, =: <R,[E -> ]>, >>: <R,[E -> ]>, %=: <R,[E -> ]>, [: <R,[E -> ]>, +=: <R,[E -> ]>, >>=: <R,[E -> ]>, <: <R,[E -> ]>, +: <R,[E -> ]>, ]: <R,[E -> ]>, <<: <R,[E -> ]>, ,: <R,[E -> ]>, >: <R,[E -> ]>, *=: <R,[E -> ]>, and: <R,[E -> ]>, or: <R,[E -> ]>, ==: <R,[E -> ]>, ;: <R,[E -> ]>, <=: <R,[E -> ]>, /: <R,[E -> ]>, -=: <R,[E -> ]>, ): <R,[E -> ]>, %: <R,[E -> ]>, STR: <S,21>, (: <S,7>, &: <S,30>}
{id: <S,36>, ++: <R,[E -> ]>, NUM: <S,20>, !=: <R,[E -> ]>, >=: <R,[E -> ]>, /=: <R,[E -> ]>, <<=: <R,[E -> ]>, *: <S,9>, -: <S,10>, --: <S,12>, =: <R,[E -> ]>, >>: <R,[E -> ]>, %=: <R,[E -> ]>, [: <R,[E -> ]>, +=: <R,[E -> ]>, >>=: <R,[E -> ]>, <: <R,[E -> ]>, +: <R,[E -> ]>, ]: <R,[E -> ]>, <<: <R,[E -> ]>, ,: <R,[E -> ]>, >: <R,[E -> ]>, *=: <R,[E -> ]>, and: <R,[E -> ]>, or: <R,[E -> ]>, ==: <R,[E -> ]>, ;: <R,[E -> ]>, <=: <R,[E -> ]>, /: <R,[E -> ]>, -=: <R,[E -> ]>, ): <R,[E -> ]>, %: <R,[E -> ]>, STR: <S,21>, (: <S,7>, &: <S,30>}
{!=: <R,[F8 -> /]>, ++: <R,[F8 -> /]>, >=: <R,[F8 -> /]>, /=: <R,[F8 -> /]>, <<=: <R,[F8 -> /]>, (: <R,[F8 -> /]>, *: <R,[F8 -> /]>, --: <R,[F8 -> /]>, -: <R,[F8 -> /]>, =: <R,[F8 -> /]>, >>: <R,[F8 -> /]>, %=: <R,[F8 -> /]>, [: <R,[F8 -> /]>, +=: <R,[F8 -> /]>, >>=: <R,[F8 -> /]>, <: <R,[F8 -> /]>, +: <R,[F8 -> /]>, NUM: <R,[F8 -> /]>, <<: <R,[F8 -> /]>, STR: <R,[F8 -> /]>, ,: <R,[F8 -> /]>, >: <R,[F8 -> /]>, *=: <R,[F8 -> /]>, and: <R,[F8 -> /]>, &: <R,[F8 -> /]>, ==: <R,[F8 -> /]>, or: <R,[F8 -> /]>, ;: <R,[F8 -> /]>, id: <R,[F8 -> /]>, <=: <R,[F8 -> /]>, /: <R,[F8 -> /]>, -=: <R,[F8 -> /]>, ): <R,[F8 -> /]>, %: <R,[F8 -> /]>}
{!=: <R,[F8 -> %]>, ++: <R,[F8 -> %]>, >=: <R,[F8 -> %]>, /=: <R,[F8 -> %]>, <<=: <R,[F8 -> %]>, (: <R,[F8 -> %]>, *: <R,[F8 -> %]>, --: <R,[F8 -> %]>, -: <R,[F8 -> %]>, =: <R,[F8 -> %]>, >>: <R,[F8 -> %]>, %=: <R,[F8 -> %]>, [: <R,[F8 -> %]>, +=: <R,[F8 -> %]>, >>=: <R,[F8 -> %]>, <: <R,[F8 -> %]>, +: <R,[F8 -> %]>, NUM: <R,[F8 -> %]>, <<: <R,[F8 -> %]>, STR: <R,[F8 -> %]>, ,: <R,[F8 -> %]>, >: <R,[F8 -> %]>, *=: <R,[F8 -> %]>, and: <R,[F8 -> %]>, &: <R,[F8 -> %]>, ==: <R,[F8 -> %]>, or: <R,[F8 -> %]>, ;: <R,[F8 -> %]>, id: <R,[F8 -> %]>, <=: <R,[F8 -> %]>, /: <R,[F8 -> %]>, -=: <R,[F8 -> %]>, ): <R,[F8 -> %]>, %: <R,[F8 -> %]>}
{NUM: <S,20>, (: <S,7>, &: <S,30>, !=: <R,[E -> ]>, ++: <S,4>, >=: <R,[E -> ]>, /=: <R,[E -> ]>, <<=: <R,[E -> ]>, *: <S,9>, -: <S,10>, --: <S,12>, =: <R,[E -> ]>, >>: <R,[E -> ]>, %=: <R,[E -> ]>, [: <R,[E -> ]>, +=: <R,[E -> ]>, >>=: <R,[E -> ]>, <: <R,[E -> ]>, +: <R,[E -> ]>, ]: <R,[E -> ]>, <<: <R,[E -> ]>, ,: <R,[E -> ]>, >: <R,[E -> ]>, *=: <R,[E -> ]>, and: <R,[E -> ]>, or: <R,[E -> ]>, ==: <R,[E -> ]>, ;: <R,[E -> ]>, <=: <R,[E -> ]>, /: <R,[E -> ]>, -=: <R,[E -> ]>, ): <R,[E -> ]>, %: <R,[E -> ]>, id: <S,36>, STR: <S,21>}
{!=: <R,[F8 -> *]>, ++: <R,[F8 -> *]>, >=: <R,[F8 -> *]>, /=: <R,[F8 -> *]>, <<=: <R,[F8 -> *]>, (: <R,[F8 -> *]>, *: <R,[F8 -> *]>, --: <R,[F8 -> *]>, -: <R,[F8 -> *]>, =: <R,[F8 -> *]>, >>: <R,[F8 -> *]>, %=: <R,[F8 -> *]>, [: <R,[F8 -> *]>, +=: <R,[F8 -> *]>, >>=: <R,[F8 -> *]>, <: <R,[F8 -> *]>, +: <R,[F8 -> *]>, NUM: <R,[F8 -> *]>, <<: <R,[F8 -> *]>, STR: <R,[F8 -> *]>, ,: <R,[F8 -> *]>, >: <R,[F8 -> *]>, *=: <R,[F8 -> *]>, and: <R,[F8 -> *]>, &: <R,[F8 -> *]>, ==: <R,[F8 -> *]>, or: <R,[F8 -> *]>, ;: <R,[F8 -> *]>, id: <R,[F8 -> *]>, <=: <R,[F8 -> *]>, /: <R,[F8 -> *]>, -=: <R,[F8 -> *]>, ): <R,[F8 -> *]>, %: <R,[F8 -> *]>}
{id: <S,36>, ++: <R,[E -> ]>, NUM: <S,20>, !=: <R,[E -> ]>, >=: <R,[E -> ]>, /=: <R,[E -> ]>, <<=: <R,[E -> ]>, *: <S,9>, -: <S,10>, --: <S,12>, =: <R,[E -> ]>, >>: <R,[E -> ]>, %=: <R,[E -> ]>, [: <R,[E -> ]>, +=: <R,[E -> ]>, >>=: <R,[E -> ]>, <: <R,[E -> ]>, +: <R,[E -> ]>, ]: <R,[E -> ]>, <<: <R,[E -> ]>, ,: <R,[E -> ]>, >: <R,[E -> ]>, *=: <R,[E -> ]>, and: <R,[E -> ]>, or: <R,[E -> ]>, ==: <R,[E -> ]>, ;: <R,[E -> ]>, <=: <R,[E -> ]>, /: <R,[E -> ]>, -=: <R,[E -> ]>, ): <R,[E -> ]>, %: <R,[E -> ]>, STR: <S,21>, (: <S,7>, &: <S,30>}
{}: <S,117>}
{!=: <R,[F5 -> >]>, ++: <R,[F5 -> >]>, >=: <R,[F5 -> >]>, /=: <R,[F5 -> >]>, <<=: <R,[F5 -> >]>, (: <R,[F5 -> >]>, *: <R,[F5 -> >]>, -: <R,[F5 -> >]>, --: <R,[F5 -> >]>, =: <R,[F5 -> >]>, >>: <R,[F5 -> >]>, %=: <R,[F5 -> >]>, [: <R,[F5 -> >]>, +=: <R,[F5 -> >]>, >>=: <R,[F5 -> >]>, <: <R,[F5 -> >]>, +: <R,[F5 -> >]>, NUM: <R,[F5 -> >]>, <<: <R,[F5 -> >]>, STR: <R,[F5 -> >]>, ,: <R,[F5 -> >]>, >: <R,[F5 -> >]>, *=: <R,[F5 -> >]>, and: <R,[F5 -> >]>, &: <R,[F5 -> >]>, ==: <R,[F5 -> >]>, or: <R,[F5 -> >]>, ;: <R,[F5 -> >]>, id: <R,[F5 -> >]>, <=: <R,[F5 -> >]>, /: <R,[F5 -> >]>, -=: <R,[F5 -> >]>, ): <R,[F5 -> >]>, %: <R,[F5 -> >]>}
{!=: <R,[F5 -> <=]>, ++: <R,[F5 -> <=]>, >=: <R,[F5 -> <=]>, /=: <R,[F5 -> <=]>, <<=: <R,[F5 -> <=]>, (: <R,[F5 -> <=]>, *: <R,[F5 -> <=]>, -: <R,[F5 -> <=]>, --: <R,[F5 -> <=]>, =: <R,[F5 -> <=]>, >>: <R,[F5 -> <=]>, %=: <R,[F5 -> <=]>, [: <R,[F5 -> <=]>, +=: <R,[F5 -> <=]>, >>=: <R,[F5 -> <=]>, <: <R,[F5 -> <=]>, +: <R,[F5 -> <=]>, NUM: <R,[F5 -> <=]>, <<: <R,[F5 -> <=]>, STR: <R,[F5 -> <=]>, ,: <R,[F5 -> <=]>, >: <R,[F5 -> <=]>, *=: <R,[F5 -> <=]>, and: <R,[F5 -> <=]>, &: <R,[F5 -> <=]>, ==: <R,[F5 -> <=]>, or: <R,[F5 -> <=]>, ;: <R,[F5 -> <=]>, id: <R,[F5 -> <=]>, <=: <R,[F5 -> <=]>, /: <R,[F5 -> <=]>, -=: <R,[F5 -> <=]>, ): <R,[F5 -> <=]>, %: <R,[F5 -> <=]>}
{id: <S,36>, ++: <R,[E -> ]>, NUM: <S,20>, !=: <R,[E -> ]>, >=: <R,[E -> ]>, /=: <R,[E -> ]>, <<=: <R,[E -> ]>, *: <S,9>, -: <S,10>, --: <S,12>, =: <R,[E -> ]>, >>: <R,[E -> ]>, %=: <R,[E -> ]>, [: <R,[E -> ]>, +=: <R,[E -> ]>, >>=: <R,[E -> ]>, <: <R,[E -> ]>, +: <R,[E -> ]>, ]: <R,[E -> ]>, <<: <R,[E -> ]>, ,: <R,[E -> ]>, >: <R,[E -> ]>, *=: <R,[E -> ]>, and: <R,[E -> ]>, or: <R,[E -> ]>, ==: <R,[E -> ]>, ;: <R,[E -> ]>, <=: <R,[E -> ]>, /: <R,[E -> ]>, -=: <R,[E -> ]>, ): <R,[E -> ]>, %: <R,[E -> ]>, STR: <S,21>, (: <S,7>, &: <S,30>}
{!=: <R,[F5 -> >=]>, ++: <R,[F5 -> >=]>, >=: <R,[F5 -> >=]>, /=: <R,[F5 -> >=]>, <<=: <R,[F5 -> >=]>, (: <R,[F5 -> >=]>, *: <R,[F5 -> >=]>, -: <R,[F5 -> >=]>, --: <R,[F5 -> >=]>, =: <R,[F5 -> >=]>, >>: <R,[F5 -> >=]>, %=: <R,[F5 -> >=]>, [: <R,[F5 -> >=]>, +=: <R,[F5 -> >=]>, >>=: <R,[F5 -> >=]>, <: <R,[F5 -> >=]>, +: <R,[F5 -> >=]>, NUM: <R,[F5 -> >=]>, <<: <R,[F5 -> >=]>, STR: <R,[F5 -> >=]>, ,: <R,[F5 -> >=]>, >: <R,[F5 -> >=]>, *=: <R,[F5 -> >=]>, and: <R,[F5 -> >=]>, &: <R,[F5 -> >=]>, ==: <R,[F5 -> >=]>, or: <R,[F5 -> >=]>, ;: <R,[F5 -> >=]>, id: <R,[F5 -> >=]>, <=: <R,[F5 -> >=]>, /: <R,[F5 -> >=]>, -=: <R,[F5 -> >=]>, ): <R,[F5 -> >=]>, %: <R,[F5 -> >=]>}
{!=: <R,[F5 -> <]>, ++: <R,[F5 -> <]>, >=: <R,[F5 -> <]>, /=: <R,[F5 -> <]>, <<=: <R,[F5 -> <]>, (: <R,[F5 -> <]>, *: <R,[F5 -> <]>, -: <R,[F5 -> <]>, --: <R,[F5 -> <]>, =: <R,[F5 -> <]>, >>: <R,[F5 -> <]>, %=: <R,[F5 -> <]>, [: <R,[F5 -> <]>, +=: <R,[F5 -> <]>, >>=: <R,[F5 -> <]>, <: <R,[F5 -> <]>, +: <R,[F5 -> <]>, NUM: <R,[F5 -> <]>, <<: <R,[F5 -> <]>, STR: <R,[F5 -> <]>, ,: <R,[F5 -> <]>, >: <R,[F5 -> <]>, *=: <R,[F5 -> <]>, and: <R,[F5 -> <]>, &: <R,[F5 -> <]>, ==: <R,[F5 -> <]>, or: <R,[F5 -> <]>, ;: <R,[F5 -> <]>, id: <R,[F5 -> <]>, <=: <R,[F5 -> <]>, /: <R,[F5 -> <]>, -=: <R,[F5 -> <]>, ): <R,[F5 -> <]>, %: <R,[F5 -> <]>}
{void: <S,8>, id: <S,36>, ++: <R,[E -> ]>, NUM: <S,20>, !=: <R,[E -> ]>, >=: <R,[E -> ]>, /=: <R,[E -> ]>, <<=: <R,[E -> ]>, *: <S,9>, -: <S,10>, --: <S,12>, =: <R,[E -> ]>, >>: <R,[E -> ]>, %=: <R,[E -> ]>, [: <R,[E -> ]>, +=: <R,[E -> ]>, >>=: <R,[E -> ]>, <: <R,[E -> ]>, +: <R,[E -> ]>, ]: <R,[E -> ]>, <<: <R,[E -> ]>, ,: <R,[E -> ]>, >: <R,[E -> ]>, *=: <R,[E -> ]>, and: <R,[E -> ]>, or: <R,[E -> ]>, ==: <R,[E -> ]>, ;: <R,[E -> ]>, <=: <R,[E -> ]>, /: <R,[E -> ]>, -=: <R,[E -> ]>, ): <R,[E -> ]>, %: <R,[E -> ]>, float: <S,44>, STR: <S,21>, int: <S,15>, (: <S,7>, char: <S,47>, boolen: <S,19>, &: <S,30>}
{!=: <R,[E7 -> E7 F7 E8]>, >=: <R,[E7 -> E7 F7 E8]>, /=: <R,[E7 -> E7 F7 E8]>, <<=: <R,[E7 -> E7 F7 E8]>, -: <R,[E7 -> E7 F7 E8]>, =: <R,[E7 -> E7 F7 E8]>, >>: <R,[E7 -> E7 F7 E8]>, %=: <R,[E7 -> E7 F7 E8]>, +=: <R,[E7 -> E7 F7 E8]>, >>=: <R,[E7 -> E7 F7 E8]>, <: <R,[E7 -> E7 F7 E8]>, +: <R,[E7 -> E7 F7 E8]>, <<: <R,[E7 -> E7 F7 E8]>, ,: <R,[E7 -> E7 F7 E8]>, >: <R,[E7 -> E7 F7 E8]>, *=: <R,[E7 -> E7 F7 E8]>, and: <R,[E7 -> E7 F7 E8]>, or: <R,[E7 -> E7 F7 E8]>, ==: <R,[E7 -> E7 F7 E8]>, ;: <R,[E7 -> E7 F7 E8]>, <=: <R,[E7 -> E7 F7 E8]>, -=: <R,[E7 -> E7 F7 E8]>, ): <R,[E7 -> E7 F7 E8]>, /: <S,87>, *: <S,90>, %: <S,88>}
{]: <S,123>, [: <S,51>}
{!=: <R,[E -> ( E2 )]>, ++: <R,[E -> ( E2 )]>, >=: <R,[E -> ( E2 )]>, /=: <R,[E -> ( E2 )]>, <<=: <R,[E -> ( E2 )]>, *: <R,[E -> ( E2 )]>, -: <R,[E -> ( E2 )]>, --: <R,[E -> ( E2 )]>, =: <R,[E -> ( E2 )]>, >>: <R,[E -> ( E2 )]>, %=: <R,[E -> ( E2 )]>, [: <R,[E -> ( E2 )]>, +=: <R,[E -> ( E2 )]>, >>=: <R,[E -> ( E2 )]>, <: <R,[E -> ( E2 )]>, +: <R,[E -> ( E2 )]>, ]: <R,[E -> ( E2 )]>, <<: <R,[E -> ( E2 )]>, ,: <R,[E -> ( E2 )]>, >: <R,[E -> ( E2 )]>, *=: <R,[E -> ( E2 )]>, and: <R,[E -> ( E2 )]>, or: <R,[E -> ( E2 )]>, ==: <R,[E -> ( E2 )]>, ;: <R,[E -> ( E2 )]>, <=: <R,[E -> ( E2 )]>, /: <R,[E -> ( E2 )]>, -=: <R,[E -> ( E2 )]>, ): <R,[E -> ( E2 )]>, %: <R,[E -> ( E2 )]>}
{id: <S,36>, ++: <R,[E -> ]>, NUM: <S,20>, !=: <R,[E -> ]>, >=: <R,[E -> ]>, /=: <R,[E -> ]>, <<=: <R,[E -> ]>, *: <S,9>, -: <S,10>, --: <S,12>, =: <R,[E -> ]>, >>: <R,[E -> ]>, %=: <R,[E -> ]>, [: <R,[E -> ]>, +=: <R,[E -> ]>, >>=: <R,[E -> ]>, <: <R,[E -> ]>, +: <R,[E -> ]>, ]: <R,[E -> ]>, <<: <R,[E -> ]>, ,: <R,[E -> ]>, >: <R,[E -> ]>, *=: <R,[E -> ]>, and: <R,[E -> ]>, or: <R,[E -> ]>, ==: <R,[E -> ]>, ;: <R,[E -> ]>, <=: <R,[E -> ]>, /: <R,[E -> ]>, -=: <R,[E -> ]>, ): <R,[E -> ]>, %: <R,[E -> ]>, STR: <S,21>, (: <S,7>, &: <S,30>}
{;: <S,125>}
{float: <S,44>, void: <S,8>, char: <S,47>, int: <S,15>, boolen: <S,19>}
{id: <S,130>}
{*=: <R,[E3 -> E3 F3 E4]>, or: <R,[E3 -> E3 F3 E4]>, and: <R,[E3 -> E3 F3 E4]>, /=: <R,[E3 -> E3 F3 E4]>, <<=: <R,[E3 -> E3 F3 E4]>, =: <R,[E3 -> E3 F3 E4]>, ;: <R,[E3 -> E3 F3 E4]>, %=: <R,[E3 -> E3 F3 E4]>, +=: <R,[E3 -> E3 F3 E4]>, >>=: <R,[E3 -> E3 F3 E4]>, -=: <R,[E3 -> E3 F3 E4]>, ): <R,[E3 -> E3 F3 E4]>, ,: <R,[E3 -> E3 F3 E4]>, ==: <S,79>, !=: <S,77>}
{+: <S,49>, !=: <R,[E6 -> E6 F6 E7]>, >=: <R,[E6 -> E6 F6 E7]>, /=: <R,[E6 -> E6 F6 E7]>, <<=: <R,[E6 -> E6 F6 E7]>, =: <R,[E6 -> E6 F6 E7]>, >>: <R,[E6 -> E6 F6 E7]>, %=: <R,[E6 -> E6 F6 E7]>, +=: <R,[E6 -> E6 F6 E7]>, >>=: <R,[E6 -> E6 F6 E7]>, <: <R,[E6 -> E6 F6 E7]>, <<: <R,[E6 -> E6 F6 E7]>, ,: <R,[E6 -> E6 F6 E7]>, >: <R,[E6 -> E6 F6 E7]>, *=: <R,[E6 -> E6 F6 E7]>, and: <R,[E6 -> E6 F6 E7]>, or: <R,[E6 -> E6 F6 E7]>, ==: <R,[E6 -> E6 F6 E7]>, ;: <R,[E6 -> E6 F6 E7]>, <=: <R,[E6 -> E6 F6 E7]>, -=: <R,[E6 -> E6 F6 E7]>, ): <R,[E6 -> E6 F6 E7]>, -: <S,50>}
{=: <R,[E1 -> E1 F1 E_dot_exp]>, ;: <R,[E1 -> E1 F1 E_dot_exp]>, %=: <R,[E1 -> E1 F1 E_dot_exp]>, *=: <R,[E1 -> E1 F1 E_dot_exp]>, +=: <R,[E1 -> E1 F1 E_dot_exp]>, /=: <R,[E1 -> E1 F1 E_dot_exp]>, <<=: <R,[E1 -> E1 F1 E_dot_exp]>, -=: <R,[E1 -> E1 F1 E_dot_exp]>, >>=: <R,[E1 -> E1 F1 E_dot_exp]>, ,: <S,83>}
{): <S,131>, or: <S,84>}
{<: <S,97>, <=: <S,94>, >: <S,93>, >=: <S,96>, !=: <R,[E4 -> E4 F4 E5]>, *=: <R,[E4 -> E4 F4 E5]>, or: <R,[E4 -> E4 F4 E5]>, and: <R,[E4 -> E4 F4 E5]>, ==: <R,[E4 -> E4 F4 E5]>, /=: <R,[E4 -> E4 F4 E5]>, <<=: <R,[E4 -> E4 F4 E5]>, =: <R,[E4 -> E4 F4 E5]>, ;: <R,[E4 -> E4 F4 E5]>, %=: <R,[E4 -> E4 F4 E5]>, +=: <R,[E4 -> E4 F4 E5]>, >>=: <R,[E4 -> E4 F4 E5]>, -=: <R,[E4 -> E4 F4 E5]>, ): <R,[E4 -> E4 F4 E5]>, ,: <R,[E4 -> E4 F4 E5]>}
{!=: <R,[go_sentence -> RETURN E2 ;]>, else: <R,[go_sentence -> RETURN E2 ;]>, ++: <R,[go_sentence -> RETURN E2 ;]>, >=: <R,[go_sentence -> RETURN E2 ;]>, /=: <R,[go_sentence -> RETURN E2 ;]>, $: <R,[go_sentence -> RETURN E2 ;]>, <<=: <R,[go_sentence -> RETURN E2 ;]>, >>: <R,[go_sentence -> RETURN E2 ;]>, +=: <R,[go_sentence -> RETURN E2 ;]>, <<: <R,[go_sentence -> RETURN E2 ;]>, BREAK: <R,[go_sentence -> RETURN E2 ;]>, >: <R,[go_sentence -> RETURN E2 ;]>, &: <R,[go_sentence -> RETURN E2 ;]>, ==: <R,[go_sentence -> RETURN E2 ;]>, ;: <R,[go_sentence -> RETURN E2 ;]>, {: <R,[go_sentence -> RETURN E2 ;]>, for: <R,[go_sentence -> RETURN E2 ;]>, -=: <R,[go_sentence -> RETURN E2 ;]>, %: <R,[go_sentence -> RETURN E2 ;]>, (: <R,[go_sentence -> RETURN E2 ;]>, void: <R,[go_sentence -> RETURN E2 ;]>, *: <R,[go_sentence -> RETURN E2 ;]>, --: <R,[go_sentence -> RETURN E2 ;]>, -: <R,[go_sentence -> RETURN E2 ;]>, }: <R,[go_sentence -> RETURN E2 ;]>, =: <R,[go_sentence -> RETURN E2 ;]>, int: <R,[go_sentence -> RETURN E2 ;]>, %=: <R,[go_sentence -> RETURN E2 ;]>, [: <R,[go_sentence -> RETURN E2 ;]>, boolen: <R,[go_sentence -> RETURN E2 ;]>, >>=: <R,[go_sentence -> RETURN E2 ;]>, <: <R,[go_sentence -> RETURN E2 ;]>, +: <R,[go_sentence -> RETURN E2 ;]>, NUM: <R,[go_sentence -> RETURN E2 ;]>, STR: <R,[go_sentence -> RETURN E2 ;]>, CONTINUE: <R,[go_sentence -> RETURN E2 ;]>, ,: <R,[go_sentence -> RETURN E2 ;]>, *=: <R,[go_sentence -> RETURN E2 ;]>, if: <R,[go_sentence -> RETURN E2 ;]>, or: <R,[go_sentence -> RETURN E2 ;]>, and: <R,[go_sentence -> RETURN E2 ;]>, RETURN: <R,[go_sentence -> RETURN E2 ;]>, while: <R,[go_sentence -> RETURN E2 ;]>, id: <R,[go_sentence -> RETURN E2 ;]>, <=: <R,[go_sentence -> RETURN E2 ;]>, /: <R,[go_sentence -> RETURN E2 ;]>, float: <R,[go_sentence -> RETURN E2 ;]>, char: <R,[go_sentence -> RETURN E2 ;]>}
{*=: <R,[E_dot_exp -> E_dot_exp F_dot_exp E2]>, /=: <R,[E_dot_exp -> E_dot_exp F_dot_exp E2]>, <<=: <R,[E_dot_exp -> E_dot_exp F_dot_exp E2]>, =: <R,[E_dot_exp -> E_dot_exp F_dot_exp E2]>, ;: <R,[E_dot_exp -> E_dot_exp F_dot_exp E2]>, %=: <R,[E_dot_exp -> E_dot_exp F_dot_exp E2]>, +=: <R,[E_dot_exp -> E_dot_exp F_dot_exp E2]>, >>=: <R,[E_dot_exp -> E_dot_exp F_dot_exp E2]>, -=: <R,[E_dot_exp -> E_dot_exp F_dot_exp E2]>, ): <R,[E_dot_exp -> E_dot_exp F_dot_exp E2]>, ,: <R,[E_dot_exp -> E_dot_exp F_dot_exp E2]>, or: <S,84>}
{*=: <R,[E2 -> E2 F2 E3]>, or: <R,[E2 -> E2 F2 E3]>, /=: <R,[E2 -> E2 F2 E3]>, <<=: <R,[E2 -> E2 F2 E3]>, =: <R,[E2 -> E2 F2 E3]>, ;: <R,[E2 -> E2 F2 E3]>, %=: <R,[E2 -> E2 F2 E3]>, +=: <R,[E2 -> E2 F2 E3]>, >>=: <R,[E2 -> E2 F2 E3]>, -=: <R,[E2 -> E2 F2 E3]>, ): <R,[E2 -> E2 F2 E3]>, ,: <R,[E2 -> E2 F2 E3]>, and: <S,59>}
{,: <S,83>, ): <S,132>}
{!=: <R,[E8 -> E8 F8 E9]>, >=: <R,[E8 -> E8 F8 E9]>, /=: <R,[E8 -> E8 F8 E9]>, <<=: <R,[E8 -> E8 F8 E9]>, *: <R,[E8 -> E8 F8 E9]>, -: <R,[E8 -> E8 F8 E9]>, =: <R,[E8 -> E8 F8 E9]>, >>: <R,[E8 -> E8 F8 E9]>, %=: <R,[E8 -> E8 F8 E9]>, +=: <R,[E8 -> E8 F8 E9]>, >>=: <R,[E8 -> E8 F8 E9]>, <: <R,[E8 -> E8 F8 E9]>, +: <R,[E8 -> E8 F8 E9]>, <<: <R,[E8 -> E8 F8 E9]>, ,: <R,[E8 -> E8 F8 E9]>, >: <R,[E8 -> E8 F8 E9]>, *=: <R,[E8 -> E8 F8 E9]>, and: <R,[E8 -> E8 F8 E9]>, or: <R,[E8 -> E8 F8 E9]>, ==: <R,[E8 -> E8 F8 E9]>, ;: <R,[E8 -> E8 F8 E9]>, <=: <R,[E8 -> E8 F8 E9]>, /: <R,[E8 -> E8 F8 E9]>, -=: <R,[E8 -> E8 F8 E9]>, ): <R,[E8 -> E8 F8 E9]>, %: <R,[E8 -> E8 F8 E9]>}
{or: <S,84>, ): <S,133>}
{!=: <R,[complex_sentence -> { sentence_list }]>, else: <R,[complex_sentence -> { sentence_list }]>, ++: <R,[complex_sentence -> { sentence_list }]>, >=: <R,[complex_sentence -> { sentence_list }]>, /=: <R,[complex_sentence -> { sentence_list }]>, $: <R,[complex_sentence -> { sentence_list }]>, <<=: <R,[complex_sentence -> { sentence_list }]>, >>: <R,[complex_sentence -> { sentence_list }]>, +=: <R,[complex_sentence -> { sentence_list }]>, <<: <R,[complex_sentence -> { sentence_list }]>, BREAK: <R,[complex_sentence -> { sentence_list }]>, >: <R,[complex_sentence -> { sentence_list }]>, &: <R,[complex_sentence -> { sentence_list }]>, ==: <R,[complex_sentence -> { sentence_list }]>, ;: <R,[complex_sentence -> { sentence_list }]>, {: <R,[complex_sentence -> { sentence_list }]>, for: <R,[complex_sentence -> { sentence_list }]>, -=: <R,[complex_sentence -> { sentence_list }]>, %: <R,[complex_sentence -> { sentence_list }]>, (: <R,[complex_sentence -> { sentence_list }]>, void: <R,[complex_sentence -> { sentence_list }]>, *: <R,[complex_sentence -> { sentence_list }]>, --: <R,[complex_sentence -> { sentence_list }]>, -: <R,[complex_sentence -> { sentence_list }]>, }: <R,[complex_sentence -> { sentence_list }]>, =: <R,[complex_sentence -> { sentence_list }]>, int: <R,[complex_sentence -> { sentence_list }]>, %=: <R,[complex_sentence -> { sentence_list }]>, [: <R,[complex_sentence -> { sentence_list }]>, boolen: <R,[complex_sentence -> { sentence_list }]>, >>=: <R,[complex_sentence -> { sentence_list }]>, <: <R,[complex_sentence -> { sentence_list }]>, +: <R,[complex_sentence -> { sentence_list }]>, NUM: <R,[complex_sentence -> { sentence_list }]>, STR: <R,[complex_sentence -> { sentence_list }]>, CONTINUE: <R,[complex_sentence -> { sentence_list }]>, ,: <R,[complex_sentence -> { sentence_list }]>, *=: <R,[complex_sentence -> { sentence_list }]>, if: <R,[complex_sentence -> { sentence_list }]>, or: <R,[complex_sentence -> { sentence_list }]>, and: <R,[complex_sentence -> { sentence_list }]>, RETURN: <R,[complex_sentence -> { sentence_list }]>, while: <R,[complex_sentence -> { sentence_list }]>, id: <R,[complex_sentence -> { sentence_list }]>, <=: <R,[complex_sentence -> { sentence_list }]>, /: <R,[complex_sentence -> { sentence_list }]>, float: <R,[complex_sentence -> { sentence_list }]>, char: <R,[complex_sentence -> { sentence_list }]>}
{>>: <S,60>, !=: <R,[E5 -> E5 F5 E6]>, >: <R,[E5 -> E5 F5 E6]>, *=: <R,[E5 -> E5 F5 E6]>, and: <R,[E5 -> E5 F5 E6]>, >=: <R,[E5 -> E5 F5 E6]>, ==: <R,[E5 -> E5 F5 E6]>, or: <R,[E5 -> E5 F5 E6]>, /=: <R,[E5 -> E5 F5 E6]>, <<=: <R,[E5 -> E5 F5 E6]>, =: <R,[E5 -> E5 F5 E6]>, ;: <R,[E5 -> E5 F5 E6]>, <=: <R,[E5 -> E5 F5 E6]>, %=: <R,[E5 -> E5 F5 E6]>, +=: <R,[E5 -> E5 F5 E6]>, >>=: <R,[E5 -> E5 F5 E6]>, -=: <R,[E5 -> E5 F5 E6]>, <: <R,[E5 -> E5 F5 E6]>, ): <R,[E5 -> E5 F5 E6]>, ,: <R,[E5 -> E5 F5 E6]>, <<: <S,62>}
{!=: <R,[loop_control_sentence -> type_declare_sentence]>, ++: <R,[loop_control_sentence -> type_declare_sentence]>, >=: <R,[loop_control_sentence -> type_declare_sentence]>, /=: <R,[loop_control_sentence -> type_declare_sentence]>, <<=: <R,[loop_control_sentence -> type_declare_sentence]>, >>: <R,[loop_control_sentence -> type_declare_sentence]>, +=: <R,[loop_control_sentence -> type_declare_sentence]>, <<: <R,[loop_control_sentence -> type_declare_sentence]>, >: <R,[loop_control_sentence -> type_declare_sentence]>, &: <R,[loop_control_sentence -> type_declare_sentence]>, ==: <R,[loop_control_sentence -> type_declare_sentence]>, ;: <R,[loop_control_sentence -> type_declare_sentence]>, -=: <R,[loop_control_sentence -> type_declare_sentence]>, ): <R,[loop_control_sentence -> type_declare_sentence]>, %: <R,[loop_control_sentence -> type_declare_sentence]>, (: <R,[loop_control_sentence -> type_declare_sentence]>, void: <R,[loop_control_sentence -> type_declare_sentence]>, *: <R,[loop_control_sentence -> type_declare_sentence]>, -: <R,[loop_control_sentence -> type_declare_sentence]>, --: <R,[loop_control_sentence -> type_declare_sentence]>, =: <R,[loop_control_sentence -> type_declare_sentence]>, int: <R,[loop_control_sentence -> type_declare_sentence]>, %=: <R,[loop_control_sentence -> type_declare_sentence]>, [: <R,[loop_control_sentence -> type_declare_sentence]>, boolen: <R,[loop_control_sentence -> type_declare_sentence]>, >>=: <R,[loop_control_sentence -> type_declare_sentence]>, <: <R,[loop_control_sentence -> type_declare_sentence]>, +: <R,[loop_control_sentence -> type_declare_sentence]>, NUM: <R,[loop_control_sentence -> type_declare_sentence]>, STR: <R,[loop_control_sentence -> type_declare_sentence]>, ,: <R,[loop_control_sentence -> type_declare_sentence]>, *=: <R,[loop_control_sentence -> type_declare_sentence]>, or: <R,[loop_control_sentence -> type_declare_sentence]>, and: <R,[loop_control_sentence -> type_declare_sentence]>, id: <R,[loop_control_sentence -> type_declare_sentence]>, <=: <R,[loop_control_sentence -> type_declare_sentence]>, /: <R,[loop_control_sentence -> type_declare_sentence]>, float: <R,[loop_control_sentence -> type_declare_sentence]>, char: <R,[loop_control_sentence -> type_declare_sentence]>}
{!=: <R,[loop_control_sentence -> expression_sentence]>, ++: <R,[loop_control_sentence -> expression_sentence]>, >=: <R,[loop_control_sentence -> expression_sentence]>, /=: <R,[loop_control_sentence -> expression_sentence]>, <<=: <R,[loop_control_sentence -> expression_sentence]>, >>: <R,[loop_control_sentence -> expression_sentence]>, +=: <R,[loop_control_sentence -> expression_sentence]>, <<: <R,[loop_control_sentence -> expression_sentence]>, >: <R,[loop_control_sentence -> expression_sentence]>, &: <R,[loop_control_sentence -> expression_sentence]>, ==: <R,[loop_control_sentence -> expression_sentence]>, ;: <R,[loop_control_sentence -> expression_sentence]>, -=: <R,[loop_control_sentence -> expression_sentence]>, ): <R,[loop_control_sentence -> expression_sentence]>, %: <R,[loop_control_sentence -> expression_sentence]>, (: <R,[loop_control_sentence -> expression_sentence]>, void: <R,[loop_control_sentence -> expression_sentence]>, *: <R,[loop_control_sentence -> expression_sentence]>, -: <R,[loop_control_sentence -> expression_sentence]>, --: <R,[loop_control_sentence -> expression_sentence]>, =: <R,[loop_control_sentence -> expression_sentence]>, int: <R,[loop_control_sentence -> expression_sentence]>, %=: <R,[loop_control_sentence -> expression_sentence]>, [: <R,[loop_control_sentence -> expression_sentence]>, boolen: <R,[loop_control_sentence -> expression_sentence]>, >>=: <R,[loop_control_sentence -> expression_sentence]>, <: <R,[loop_control_sentence -> expression_sentence]>, +: <R,[loop_control_sentence -> expression_sentence]>, NUM: <R,[loop_control_sentence -> expression_sentence]>, STR: <R,[loop_control_sentence -> expression_sentence]>, ,: <R,[loop_control_sentence -> expression_sentence]>, *=: <R,[loop_control_sentence -> expression_sentence]>, or: <R,[loop_control_sentence -> expression_sentence]>, and: <R,[loop_control_sentence -> expression_sentence]>, id: <R,[loop_control_sentence -> expression_sentence]>, <=: <R,[loop_control_sentence -> expression_sentence]>, /: <R,[loop_control_sentence -> expression_sentence]>, float: <R,[loop_control_sentence -> expression_sentence]>, char: <R,[loop_control_sentence -> expression_sentence]>}
{id: <S,130>}
{void: <S,8>, id: <S,36>, ++: <R,[E -> ]>, NUM: <S,20>, !=: <R,[E -> ]>, >=: <R,[E -> ]>, /=: <R,[E -> ]>, <<=: <R,[E -> ]>, *: <S,9>, -: <S,10>, --: <S,12>, =: <R,[E -> ]>, >>: <R,[E -> ]>, %=: <R,[E -> ]>, [: <R,[E -> ]>, +=: <R,[E -> ]>, >>=: <R,[E -> ]>, <: <R,[E -> ]>, +: <R,[E -> ]>, ]: <R,[E -> ]>, <<: <R,[E -> ]>, ,: <R,[E -> ]>, >: <R,[E -> ]>, *=: <R,[E -> ]>, and: <R,[E -> ]>, or: <R,[E -> ]>, ==: <R,[E -> ]>, ;: <R,[E -> ]>, <=: <R,[E -> ]>, /: <R,[E -> ]>, -=: <R,[E -> ]>, ): <R,[E -> ]>, %: <R,[E -> ]>, float: <S,44>, STR: <S,21>, int: <S,15>, (: <S,7>, char: <S,47>, boolen: <S,19>, &: <S,30>}
{!=: <R,[E10 -> E10 [ E10 ]]>, ++: <R,[E10 -> E10 [ E10 ]]>, >=: <R,[E10 -> E10 [ E10 ]]>, /=: <R,[E10 -> E10 [ E10 ]]>, <<=: <R,[E10 -> E10 [ E10 ]]>, *: <R,[E10 -> E10 [ E10 ]]>, -: <R,[E10 -> E10 [ E10 ]]>, --: <R,[E10 -> E10 [ E10 ]]>, =: <R,[E10 -> E10 [ E10 ]]>, >>: <R,[E10 -> E10 [ E10 ]]>, %=: <R,[E10 -> E10 [ E10 ]]>, [: <R,[E10 -> E10 [ E10 ]]>, +=: <R,[E10 -> E10 [ E10 ]]>, >>=: <R,[E10 -> E10 [ E10 ]]>, <: <R,[E10 -> E10 [ E10 ]]>, +: <R,[E10 -> E10 [ E10 ]]>, ]: <R,[E10 -> E10 [ E10 ]]>, <<: <R,[E10 -> E10 [ E10 ]]>, ,: <R,[E10 -> E10 [ E10 ]]>, >: <R,[E10 -> E10 [ E10 ]]>, *=: <R,[E10 -> E10 [ E10 ]]>, and: <R,[E10 -> E10 [ E10 ]]>, or: <R,[E10 -> E10 [ E10 ]]>, ==: <R,[E10 -> E10 [ E10 ]]>, ;: <R,[E10 -> E10 [ E10 ]]>, <=: <R,[E10 -> E10 [ E10 ]]>, /: <R,[E10 -> E10 [ E10 ]]>, -=: <R,[E10 -> E10 [ E10 ]]>, ): <R,[E10 -> E10 [ E10 ]]>, %: <R,[E10 -> E10 [ E10 ]]>}
{>>=: <S,71>, -=: <S,72>, +=: <S,68>, ;: <R,[initialize -> = E1]>, /=: <S,70>, <<=: <S,73>, *=: <S,69>, =: <S,66>, %=: <S,67>}
{!=: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, else: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, ++: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, >=: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, /=: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, $: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, <<=: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, >>: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, +=: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, <<: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, BREAK: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, >: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, &: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, ==: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, ;: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, {: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, for: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, -=: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, ): <R,[type_declare_sentence -> type_statement id_list initialize ;]>, %: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, (: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, void: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, *: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, -: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, --: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, }: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, =: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, int: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, %=: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, [: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, boolen: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, >>=: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, <: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, +: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, NUM: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, STR: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, CONTINUE: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, ,: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, *=: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, if: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, or: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, and: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, RETURN: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, id: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, <=: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, while: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, /: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, float: <R,[type_declare_sentence -> type_statement id_list initialize ;]>, char: <R,[type_declare_sentence -> type_statement id_list initialize ;]>}
{): <S,135>, ,: <S,136>}
{): <R,[parameter -> type_statement]>, ,: <R,[parameter -> type_statement]>, id: <S,137>}
{): <R,[list -> parameter]>, ,: <R,[list -> parameter]>}
{=: <R,[id_list -> id , id_list]>, ;: <R,[id_list -> id , id_list]>}
{,: <S,105>, =: <R,[id_list -> id]>, ;: <R,[id_list -> id]>}
{CONTINUE: <S,23>, BREAK: <S,27>, void: <S,8>, id: <S,36>, {: <S,41>, ++: <R,[E -> ]>, while: <S,39>, if: <S,29>, NUM: <S,20>, !=: <R,[E -> ]>, >=: <R,[E -> ]>, /=: <R,[E -> ]>, <<=: <R,[E -> ]>, *: <S,9>, -: <S,10>, --: <S,12>, =: <R,[E -> ]>, >>: <R,[E -> ]>, %=: <R,[E -> ]>, [: <R,[E -> ]>, +=: <R,[E -> ]>, >>=: <R,[E -> ]>, <: <R,[E -> ]>, +: <R,[E -> ]>, ]: <R,[E -> ]>, <<: <R,[E -> ]>, ,: <R,[E -> ]>, >: <R,[E -> ]>, *=: <R,[E -> ]>, and: <R,[E -> ]>, or: <R,[E -> ]>, ==: <R,[E -> ]>, ;: <R,[E -> ]>, <=: <R,[E -> ]>, /: <R,[E -> ]>, -=: <R,[E -> ]>, ): <R,[E -> ]>, %: <R,[E -> ]>, float: <S,44>, RETURN: <S,33>, STR: <S,21>, int: <S,15>, (: <S,7>, char: <S,47>, for: <S,45>, boolen: <S,19>, &: <S,30>}
{!=: <R,[E -> id ( E_dot_exp )]>, ++: <R,[E -> id ( E_dot_exp )]>, >=: <R,[E -> id ( E_dot_exp )]>, /=: <R,[E -> id ( E_dot_exp )]>, <<=: <R,[E -> id ( E_dot_exp )]>, *: <R,[E -> id ( E_dot_exp )]>, -: <R,[E -> id ( E_dot_exp )]>, --: <R,[E -> id ( E_dot_exp )]>, =: <R,[E -> id ( E_dot_exp )]>, >>: <R,[E -> id ( E_dot_exp )]>, %=: <R,[E -> id ( E_dot_exp )]>, [: <R,[E -> id ( E_dot_exp )]>, +=: <R,[E -> id ( E_dot_exp )]>, >>=: <R,[E -> id ( E_dot_exp )]>, <: <R,[E -> id ( E_dot_exp )]>, +: <R,[E -> id ( E_dot_exp )]>, ]: <R,[E -> id ( E_dot_exp )]>, <<: <R,[E -> id ( E_dot_exp )]>, ,: <R,[E -> id ( E_dot_exp )]>, >: <R,[E -> id ( E_dot_exp )]>, *=: <R,[E -> id ( E_dot_exp )]>, and: <R,[E -> id ( E_dot_exp )]>, or: <R,[E -> id ( E_dot_exp )]>, ==: <R,[E -> id ( E_dot_exp )]>, ;: <R,[E -> id ( E_dot_exp )]>, <=: <R,[E -> id ( E_dot_exp )]>, /: <R,[E -> id ( E_dot_exp )]>, -=: <R,[E -> id ( E_dot_exp )]>, ): <R,[E -> id ( E_dot_exp )]>, %: <R,[E -> id ( E_dot_exp )]>}
{CONTINUE: <S,23>, BREAK: <S,27>, void: <S,8>, id: <S,36>, {: <S,41>, ++: <R,[E -> ]>, while: <S,39>, if: <S,29>, NUM: <S,20>, !=: <R,[E -> ]>, >=: <R,[E -> ]>, /=: <R,[E -> ]>, <<=: <R,[E -> ]>, *: <S,9>, -: <S,10>, --: <S,12>, =: <R,[E -> ]>, >>: <R,[E -> ]>, %=: <R,[E -> ]>, [: <R,[E -> ]>, +=: <R,[E -> ]>, >>=: <R,[E -> ]>, <: <R,[E -> ]>, +: <R,[E -> ]>, ]: <R,[E -> ]>, <<: <R,[E -> ]>, ,: <R,[E -> ]>, >: <R,[E -> ]>, *=: <R,[E -> ]>, and: <R,[E -> ]>, or: <R,[E -> ]>, ==: <R,[E -> ]>, ;: <R,[E -> ]>, <=: <R,[E -> ]>, /: <R,[E -> ]>, -=: <R,[E -> ]>, ): <R,[E -> ]>, %: <R,[E -> ]>, float: <S,44>, RETURN: <S,33>, STR: <S,21>, int: <S,15>, (: <S,7>, char: <S,47>, for: <S,45>, boolen: <S,19>, &: <S,30>}
{void: <S,8>, id: <S,36>, ++: <R,[E -> ]>, NUM: <S,20>, !=: <R,[E -> ]>, >=: <R,[E -> ]>, /=: <R,[E -> ]>, <<=: <R,[E -> ]>, *: <S,9>, -: <S,10>, --: <S,12>, =: <R,[E -> ]>, >>: <R,[E -> ]>, %=: <R,[E -> ]>, [: <R,[E -> ]>, +=: <R,[E -> ]>, >>=: <R,[E -> ]>, <: <R,[E -> ]>, +: <R,[E -> ]>, ]: <R,[E -> ]>, <<: <R,[E -> ]>, ,: <R,[E -> ]>, >: <R,[E -> ]>, *=: <R,[E -> ]>, and: <R,[E -> ]>, or: <R,[E -> ]>, ==: <R,[E -> ]>, ;: <R,[E -> ]>, <=: <R,[E -> ]>, /: <R,[E -> ]>, -=: <R,[E -> ]>, ): <R,[E -> ]>, %: <R,[E -> ]>, float: <S,44>, STR: <S,21>, int: <S,15>, (: <S,7>, char: <S,47>, boolen: <S,19>, &: <S,30>}
{{: <S,41>}
{float: <S,44>, void: <S,8>, char: <S,47>, int: <S,15>, boolen: <S,19>}
{): <R,[parameter -> type_statement id]>, ,: <R,[parameter -> type_statement id]>}
{!=: <R,[state -> complex_sentence]>, else: <R,[state -> complex_sentence]>, ++: <R,[state -> complex_sentence]>, >=: <R,[state -> complex_sentence]>, /=: <R,[state -> complex_sentence]>, $: <R,[state -> complex_sentence]>, <<=: <R,[state -> complex_sentence]>, >>: <R,[state -> complex_sentence]>, +=: <R,[state -> complex_sentence]>, <<: <R,[state -> complex_sentence]>, BREAK: <R,[state -> complex_sentence]>, >: <R,[state -> complex_sentence]>, &: <R,[state -> complex_sentence]>, ==: <R,[state -> complex_sentence]>, ;: <R,[state -> complex_sentence]>, {: <R,[state -> complex_sentence]>, for: <R,[state -> complex_sentence]>, -=: <R,[state -> complex_sentence]>, %: <R,[state -> complex_sentence]>, (: <R,[state -> complex_sentence]>, void: <R,[state -> complex_sentence]>, *: <R,[state -> complex_sentence]>, --: <R,[state -> complex_sentence]>, -: <R,[state -> complex_sentence]>, }: <R,[state -> complex_sentence]>, =: <R,[state -> complex_sentence]>, int: <R,[state -> complex_sentence]>, %=: <R,[state -> complex_sentence]>, [: <R,[state -> complex_sentence]>, boolen: <R,[state -> complex_sentence]>, >>=: <R,[state -> complex_sentence]>, <: <R,[state -> complex_sentence]>, +: <R,[state -> complex_sentence]>, NUM: <R,[state -> complex_sentence]>, STR: <R,[state -> complex_sentence]>, CONTINUE: <R,[state -> complex_sentence]>, ,: <R,[state -> complex_sentence]>, *=: <R,[state -> complex_sentence]>, if: <R,[state -> complex_sentence]>, or: <R,[state -> complex_sentence]>, and: <R,[state -> complex_sentence]>, RETURN: <R,[state -> complex_sentence]>, while: <R,[state -> complex_sentence]>, id: <R,[state -> complex_sentence]>, <=: <R,[state -> complex_sentence]>, /: <R,[state -> complex_sentence]>, float: <R,[state -> complex_sentence]>, char: <R,[state -> complex_sentence]>}
{!=: <R,[state -> sentence]>, else: <R,[state -> sentence]>, ++: <R,[state -> sentence]>, >=: <R,[state -> sentence]>, /=: <R,[state -> sentence]>, $: <R,[state -> sentence]>, <<=: <R,[state -> sentence]>, >>: <R,[state -> sentence]>, +=: <R,[state -> sentence]>, <<: <R,[state -> sentence]>, BREAK: <R,[state -> sentence]>, >: <R,[state -> sentence]>, &: <R,[state -> sentence]>, ==: <R,[state -> sentence]>, ;: <R,[state -> sentence]>, {: <R,[state -> sentence]>, for: <R,[state -> sentence]>, -=: <R,[state -> sentence]>, %: <R,[state -> sentence]>, (: <R,[state -> sentence]>, void: <R,[state -> sentence]>, *: <R,[state -> sentence]>, --: <R,[state -> sentence]>, -: <R,[state -> sentence]>, }: <R,[state -> sentence]>, =: <R,[state -> sentence]>, int: <R,[state -> sentence]>, %=: <R,[state -> sentence]>, [: <R,[state -> sentence]>, boolen: <R,[state -> sentence]>, >>=: <R,[state -> sentence]>, <: <R,[state -> sentence]>, +: <R,[state -> sentence]>, NUM: <R,[state -> sentence]>, STR: <R,[state -> sentence]>, CONTINUE: <R,[state -> sentence]>, ,: <R,[state -> sentence]>, *=: <R,[state -> sentence]>, if: <R,[state -> sentence]>, or: <R,[state -> sentence]>, and: <R,[state -> sentence]>, RETURN: <R,[state -> sentence]>, while: <R,[state -> sentence]>, id: <R,[state -> sentence]>, <=: <R,[state -> sentence]>, /: <R,[state -> sentence]>, float: <R,[state -> sentence]>, char: <R,[state -> sentence]>}
{else: <R,[if_sentence -> if ( E2 ) state]>, !=: <R,[if_sentence -> if ( E2 ) state]>, ++: <R,[if_sentence -> if ( E2 ) state]>, >=: <R,[if_sentence -> if ( E2 ) state]>, /=: <R,[if_sentence -> if ( E2 ) state]>, $: <R,[if_sentence -> if ( E2 ) state]>, <<=: <R,[if_sentence -> if ( E2 ) state]>, >>: <R,[if_sentence -> if ( E2 ) state]>, +=: <R,[if_sentence -> if ( E2 ) state]>, <<: <R,[if_sentence -> if ( E2 ) state]>, BREAK: <R,[if_sentence -> if ( E2 ) state]>, >: <R,[if_sentence -> if ( E2 ) state]>, &: <R,[if_sentence -> if ( E2 ) state]>, ==: <R,[if_sentence -> if ( E2 ) state]>, ;: <R,[if_sentence -> if ( E2 ) state]>, {: <R,[if_sentence -> if ( E2 ) state]>, for: <R,[if_sentence -> if ( E2 ) state]>, -=: <R,[if_sentence -> if ( E2 ) state]>, %: <R,[if_sentence -> if ( E2 ) state]>, (: <R,[if_sentence -> if ( E2 ) state]>, void: <R,[if_sentence -> if ( E2 ) state]>, *: <R,[if_sentence -> if ( E2 ) state]>, --: <R,[if_sentence -> if ( E2 ) state]>, -: <R,[if_sentence -> if ( E2 ) state]>, }: <R,[if_sentence -> if ( E2 ) state]>, =: <R,[if_sentence -> if ( E2 ) state]>, int: <R,[if_sentence -> if ( E2 ) state]>, %=: <R,[if_sentence -> if ( E2 ) state]>, [: <R,[if_sentence -> if ( E2 ) state]>, boolen: <R,[if_sentence -> if ( E2 ) state]>, >>=: <R,[if_sentence -> if ( E2 ) state]>, <: <R,[if_sentence -> if ( E2 ) state]>, +: <R,[if_sentence -> if ( E2 ) state]>, NUM: <R,[if_sentence -> if ( E2 ) state]>, STR: <R,[if_sentence -> if ( E2 ) state]>, CONTINUE: <R,[if_sentence -> if ( E2 ) state]>, ,: <R,[if_sentence -> if ( E2 ) state]>, *=: <R,[if_sentence -> if ( E2 ) state]>, if: <R,[if_sentence -> if ( E2 ) state]>, or: <R,[if_sentence -> if ( E2 ) state]>, and: <R,[if_sentence -> if ( E2 ) state]>, RETURN: <R,[if_sentence -> if ( E2 ) state]>, while: <R,[if_sentence -> if ( E2 ) state]>, id: <R,[if_sentence -> if ( E2 ) state]>, <=: <R,[if_sentence -> if ( E2 ) state]>, /: <R,[if_sentence -> if ( E2 ) state]>, float: <R,[if_sentence -> if ( E2 ) state]>, char: <R,[if_sentence -> if ( E2 ) state]>}
{!=: <R,[while_sentence -> while ( E2 ) state]>, else: <R,[while_sentence -> while ( E2 ) state]>, ++: <R,[while_sentence -> while ( E2 ) state]>, >=: <R,[while_sentence -> while ( E2 ) state]>, /=: <R,[while_sentence -> while ( E2 ) state]>, $: <R,[while_sentence -> while ( E2 ) state]>, <<=: <R,[while_sentence -> while ( E2 ) state]>, >>: <R,[while_sentence -> while ( E2 ) state]>, +=: <R,[while_sentence -> while ( E2 ) state]>, <<: <R,[while_sentence -> while ( E2 ) state]>, BREAK: <R,[while_sentence -> while ( E2 ) state]>, >: <R,[while_sentence -> while ( E2 ) state]>, &: <R,[while_sentence -> while ( E2 ) state]>, ==: <R,[while_sentence -> while ( E2 ) state]>, ;: <R,[while_sentence -> while ( E2 ) state]>, {: <R,[while_sentence -> while ( E2 ) state]>, for: <R,[while_sentence -> while ( E2 ) state]>, -=: <R,[while_sentence -> while ( E2 ) state]>, %: <R,[while_sentence -> while ( E2 ) state]>, (: <R,[while_sentence -> while ( E2 ) state]>, void: <R,[while_sentence -> while ( E2 ) state]>, *: <R,[while_sentence -> while ( E2 ) state]>, --: <R,[while_sentence -> while ( E2 ) state]>, -: <R,[while_sentence -> while ( E2 ) state]>, }: <R,[while_sentence -> while ( E2 ) state]>, =: <R,[while_sentence -> while ( E2 ) state]>, int: <R,[while_sentence -> while ( E2 ) state]>, %=: <R,[while_sentence -> while ( E2 ) state]>, [: <R,[while_sentence -> while ( E2 ) state]>, boolen: <R,[while_sentence -> while ( E2 ) state]>, >>=: <R,[while_sentence -> while ( E2 ) state]>, <: <R,[while_sentence -> while ( E2 ) state]>, +: <R,[while_sentence -> while ( E2 ) state]>, NUM: <R,[while_sentence -> while ( E2 ) state]>, STR: <R,[while_sentence -> while ( E2 ) state]>, CONTINUE: <R,[while_sentence -> while ( E2 ) state]>, ,: <R,[while_sentence -> while ( E2 ) state]>, *=: <R,[while_sentence -> while ( E2 ) state]>, if: <R,[while_sentence -> while ( E2 ) state]>, or: <R,[while_sentence -> while ( E2 ) state]>, and: <R,[while_sentence -> while ( E2 ) state]>, RETURN: <R,[while_sentence -> while ( E2 ) state]>, while: <R,[while_sentence -> while ( E2 ) state]>, id: <R,[while_sentence -> while ( E2 ) state]>, <=: <R,[while_sentence -> while ( E2 ) state]>, /: <R,[while_sentence -> while ( E2 ) state]>, float: <R,[while_sentence -> while ( E2 ) state]>, char: <R,[while_sentence -> while ( E2 ) state]>}
{): <S,146>}
{!=: <R,[func_define -> type_statement id ( list ) complex_sentence]>, else: <R,[func_define -> type_statement id ( list ) complex_sentence]>, ++: <R,[func_define -> type_statement id ( list ) complex_sentence]>, >=: <R,[func_define -> type_statement id ( list ) complex_sentence]>, /=: <R,[func_define -> type_statement id ( list ) complex_sentence]>, $: <R,[func_define -> type_statement id ( list ) complex_sentence]>, <<=: <R,[func_define -> type_statement id ( list ) complex_sentence]>, >>: <R,[func_define -> type_statement id ( list ) complex_sentence]>, +=: <R,[func_define -> type_statement id ( list ) complex_sentence]>, <<: <R,[func_define -> type_statement id ( list ) complex_sentence]>, BREAK: <R,[func_define -> type_statement id ( list ) complex_sentence]>, >: <R,[func_define -> type_statement id ( list ) complex_sentence]>, &: <R,[func_define -> type_statement id ( list ) complex_sentence]>, ==: <R,[func_define -> type_statement id ( list ) complex_sentence]>, ;: <R,[func_define -> type_statement id ( list ) complex_sentence]>, {: <R,[func_define -> type_statement id ( list ) complex_sentence]>, for: <R,[func_define -> type_statement id ( list ) complex_sentence]>, -=: <R,[func_define -> type_statement id ( list ) complex_sentence]>, %: <R,[func_define -> type_statement id ( list ) complex_sentence]>, (: <R,[func_define -> type_statement id ( list ) complex_sentence]>, void: <R,[func_define -> type_statement id ( list ) complex_sentence]>, *: <R,[func_define -> type_statement id ( list ) complex_sentence]>, --: <R,[func_define -> type_statement id ( list ) complex_sentence]>, -: <R,[func_define -> type_statement id ( list ) complex_sentence]>, }: <R,[func_define -> type_statement id ( list ) complex_sentence]>, =: <R,[func_define -> type_statement id ( list ) complex_sentence]>, int: <R,[func_define -> type_statement id ( list ) complex_sentence]>, %=: <R,[func_define -> type_statement id ( list ) complex_sentence]>, [: <R,[func_define -> type_statement id ( list ) complex_sentence]>, boolen: <R,[func_define -> type_statement id ( list ) complex_sentence]>, >>=: <R,[func_define -> type_statement id ( list ) complex_sentence]>, <: <R,[func_define -> type_statement id ( list ) complex_sentence]>, +: <R,[func_define -> type_statement id ( list ) complex_sentence]>, NUM: <R,[func_define -> type_statement id ( list ) complex_sentence]>, STR: <R,[func_define -> type_statement id ( list ) complex_sentence]>, CONTINUE: <R,[func_define -> type_statement id ( list ) complex_sentence]>, ,: <R,[func_define -> type_statement id ( list ) complex_sentence]>, *=: <R,[func_define -> type_statement id ( list ) complex_sentence]>, if: <R,[func_define -> type_statement id ( list ) complex_sentence]>, or: <R,[func_define -> type_statement id ( list ) complex_sentence]>, and: <R,[func_define -> type_statement id ( list ) complex_sentence]>, RETURN: <R,[func_define -> type_statement id ( list ) complex_sentence]>, while: <R,[func_define -> type_statement id ( list ) complex_sentence]>, id: <R,[func_define -> type_statement id ( list ) complex_sentence]>, <=: <R,[func_define -> type_statement id ( list ) complex_sentence]>, /: <R,[func_define -> type_statement id ( list ) complex_sentence]>, float: <R,[func_define -> type_statement id ( list ) complex_sentence]>, char: <R,[func_define -> type_statement id ( list ) complex_sentence]>}
{): <R,[list -> list , parameter]>, ,: <R,[list -> list , parameter]>}
{CONTINUE: <S,23>, BREAK: <S,27>, void: <S,8>, id: <S,36>, {: <S,41>, ++: <R,[E -> ]>, while: <S,39>, if: <S,29>, NUM: <S,20>, !=: <R,[E -> ]>, >=: <R,[E -> ]>, /=: <R,[E -> ]>, <<=: <R,[E -> ]>, *: <S,9>, -: <S,10>, --: <S,12>, =: <R,[E -> ]>, >>: <R,[E -> ]>, %=: <R,[E -> ]>, [: <R,[E -> ]>, +=: <R,[E -> ]>, >>=: <R,[E -> ]>, <: <R,[E -> ]>, +: <R,[E -> ]>, ]: <R,[E -> ]>, <<: <R,[E -> ]>, ,: <R,[E -> ]>, >: <R,[E -> ]>, *=: <R,[E -> ]>, and: <R,[E -> ]>, or: <R,[E -> ]>, ==: <R,[E -> ]>, ;: <R,[E -> ]>, <=: <R,[E -> ]>, /: <R,[E -> ]>, -=: <R,[E -> ]>, ): <R,[E -> ]>, %: <R,[E -> ]>, float: <S,44>, RETURN: <S,33>, STR: <S,21>, int: <S,15>, (: <S,7>, char: <S,47>, for: <S,45>, boolen: <S,19>, &: <S,30>}
{CONTINUE: <S,23>, BREAK: <S,27>, void: <S,8>, id: <S,36>, {: <S,41>, ++: <R,[E -> ]>, while: <S,39>, if: <S,29>, NUM: <S,20>, !=: <R,[E -> ]>, >=: <R,[E -> ]>, /=: <R,[E -> ]>, <<=: <R,[E -> ]>, *: <S,9>, -: <S,10>, --: <S,12>, =: <R,[E -> ]>, >>: <R,[E -> ]>, %=: <R,[E -> ]>, [: <R,[E -> ]>, +=: <R,[E -> ]>, >>=: <R,[E -> ]>, <: <R,[E -> ]>, +: <R,[E -> ]>, ]: <R,[E -> ]>, <<: <R,[E -> ]>, ,: <R,[E -> ]>, >: <R,[E -> ]>, *=: <R,[E -> ]>, and: <R,[E -> ]>, or: <R,[E -> ]>, ==: <R,[E -> ]>, ;: <R,[E -> ]>, <=: <R,[E -> ]>, /: <R,[E -> ]>, -=: <R,[E -> ]>, ): <R,[E -> ]>, %: <R,[E -> ]>, float: <S,44>, RETURN: <S,33>, STR: <S,21>, int: <S,15>, (: <S,7>, char: <S,47>, for: <S,45>, boolen: <S,19>, &: <S,30>}
{!=: <R,[if_sentence -> if ( E2 ) state else state]>, else: <R,[if_sentence -> if ( E2 ) state else state]>, ++: <R,[if_sentence -> if ( E2 ) state else state]>, >=: <R,[if_sentence -> if ( E2 ) state else state]>, /=: <R,[if_sentence -> if ( E2 ) state else state]>, $: <R,[if_sentence -> if ( E2 ) state else state]>, <<=: <R,[if_sentence -> if ( E2 ) state else state]>, >>: <R,[if_sentence -> if ( E2 ) state else state]>, +=: <R,[if_sentence -> if ( E2 ) state else state]>, <<: <R,[if_sentence -> if ( E2 ) state else state]>, BREAK: <R,[if_sentence -> if ( E2 ) state else state]>, >: <R,[if_sentence -> if ( E2 ) state else state]>, &: <R,[if_sentence -> if ( E2 ) state else state]>, ==: <R,[if_sentence -> if ( E2 ) state else state]>, ;: <R,[if_sentence -> if ( E2 ) state else state]>, {: <R,[if_sentence -> if ( E2 ) state else state]>, for: <R,[if_sentence -> if ( E2 ) state else state]>, -=: <R,[if_sentence -> if ( E2 ) state else state]>, %: <R,[if_sentence -> if ( E2 ) state else state]>, (: <R,[if_sentence -> if ( E2 ) state else state]>, void: <R,[if_sentence -> if ( E2 ) state else state]>, *: <R,[if_sentence -> if ( E2 ) state else state]>, --: <R,[if_sentence -> if ( E2 ) state else state]>, -: <R,[if_sentence -> if ( E2 ) state else state]>, }: <R,[if_sentence -> if ( E2 ) state else state]>, =: <R,[if_sentence -> if ( E2 ) state else state]>, int: <R,[if_sentence -> if ( E2 ) state else state]>, %=: <R,[if_sentence -> if ( E2 ) state else state]>, [: <R,[if_sentence -> if ( E2 ) state else state]>, boolen: <R,[if_sentence -> if ( E2 ) state else state]>, >>=: <R,[if_sentence -> if ( E2 ) state else state]>, <: <R,[if_sentence -> if ( E2 ) state else state]>, +: <R,[if_sentence -> if ( E2 ) state else state]>, NUM: <R,[if_sentence -> if ( E2 ) state else state]>, STR: <R,[if_sentence -> if ( E2 ) state else state]>, CONTINUE: <R,[if_sentence -> if ( E2 ) state else state]>, ,: <R,[if_sentence -> if ( E2 ) state else state]>, *=: <R,[if_sentence -> if ( E2 ) state else state]>, if: <R,[if_sentence -> if ( E2 ) state else state]>, or: <R,[if_sentence -> if ( E2 ) state else state]>, and: <R,[if_sentence -> if ( E2 ) state else state]>, RETURN: <R,[if_sentence -> if ( E2 ) state else state]>, while: <R,[if_sentence -> if ( E2 ) state else state]>, id: <R,[if_sentence -> if ( E2 ) state else state]>, <=: <R,[if_sentence -> if ( E2 ) state else state]>, /: <R,[if_sentence -> if ( E2 ) state else state]>, float: <R,[if_sentence -> if ( E2 ) state else state]>, char: <R,[if_sentence -> if ( E2 ) state else state]>}
{!=: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, else: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, ++: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, >=: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, /=: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, $: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, <<=: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, >>: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, +=: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, <<: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, BREAK: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, >: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, &: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, ==: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, ;: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, {: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, for: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, -=: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, %: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, (: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, void: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, *: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, --: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, -: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, }: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, =: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, int: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, %=: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, [: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, boolen: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, >>=: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, <: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, +: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, NUM: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, STR: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, CONTINUE: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, ,: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, *=: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, if: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, or: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, and: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, RETURN: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, while: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, id: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, <=: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, /: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, float: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>, char: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) complex_sentence]>}
{!=: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, else: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, ++: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, >=: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, /=: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, $: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, <<=: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, >>: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, +=: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, <<: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, BREAK: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, >: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, &: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, ==: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, ;: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, {: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, for: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, -=: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, %: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, (: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, void: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, *: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, --: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, -: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, }: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, =: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, int: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, %=: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, [: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, boolen: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, >>=: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, <: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, +: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, NUM: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, STR: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, CONTINUE: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, ,: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, *=: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, if: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, or: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, and: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, RETURN: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, while: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, id: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, <=: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, /: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, float: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>, char: <R,[for_sentence -> for ( loop_control_sentence loop_control_sentence loop_control_sentence ) sentence]>}

GOTO TABLE:
{type_declare_sentence: 1, S: 2, E7: 3, expression_sentence: 5, E10: 6, F9_2: 11, go_sentence: 13, E: 14, type_statement: 16, F9_1: 17, E3: 18, E6: 22, complex_sentence: 24, E9: 25, E1: 26, for_sentence: 28, sentence: 31, E4: 32, E_dot_exp: 34, E2: 35, E8: 37, while_sentence: 38, if_sentence: 40, E5: 42, sentence_list: 43, func_define: 46}
{}
{}
{F7: 48}
{}
{}
{F9_1: 52}
{E7: 3, E10: 6, F9_2: 11, E: 14, F9_1: 17, E3: 18, E6: 22, E9: 25, E4: 32, E2: 53, E8: 37, E5: 42}
{}
{}
{}
{E: 14, E10: 54}
{}
{}
{}
{}
{id_list: 55}
{E: 14, E10: 57}
{F3: 58}
{}
{}
{}
{F6: 61}
{}
{}
{}
{F1: 65}
{}
{}
{}
{}
{type_declare_sentence: 1, E7: 3, expression_sentence: 5, E10: 6, F9_2: 11, go_sentence: 13, E: 14, type_statement: 16, F9_1: 17, E3: 18, E6: 22, complex_sentence: 24, E9: 25, E1: 26, for_sentence: 28, sentence: 31, E4: 32, E_dot_exp: 34, E2: 35, E8: 37, while_sentence: 38, if_sentence: 40, E5: 42, sentence_list: 76, func_define: 46}
{F4: 78}
{E7: 3, E10: 6, F9_2: 11, E: 14, F9_1: 17, E3: 18, E6: 22, E9: 25, E4: 32, E2: 80, E8: 37, E5: 42}
{F_dot_exp: 82}
{F2: 85}
{}
{F8: 89}
{}
{}
{}
{type_declare_sentence: 1, E7: 3, expression_sentence: 5, E10: 6, F9_2: 11, go_sentence: 13, E: 14, type_statement: 16, F9_1: 17, E3: 18, E6: 22, complex_sentence: 24, E9: 25, E1: 26, for_sentence: 28, sentence: 31, E4: 32, E_dot_exp: 34, E2: 35, E8: 37, while_sentence: 38, if_sentence: 40, E5: 42, sentence_list: 92, func_define: 46}
{F5: 95}
{}
{}
{}
{}
{}
{E10: 6, F9_2: 11, E: 14, F9_1: 17, E9: 25, E8: 99}
{}
{}
{E: 14, E10: 100}
{}
{F2: 85}
{}
{initialize: 103}
{}
{}
{E7: 3, E10: 6, F9_2: 11, E: 14, F9_1: 17, E6: 22, E9: 25, E4: 106, E8: 37, E5: 42}
{}
{}
{E7: 107, E10: 6, F9_2: 11, E: 14, F9_1: 17, E9: 25, E8: 37}
{}
{}
{}
{E7: 3, E10: 6, F9_2: 11, E: 14, F9_1: 17, E3: 18, E6: 22, E9: 25, E4: 32, E_dot_exp: 108, E2: 35, E8: 37, E5: 42}
{}
{}
{}
{}
{}
{}
{}
{}
{}
{E7: 3, E10: 6, F9_2: 11, E: 14, F9_1: 17, E3: 18, E6: 22, E9: 25, E4: 32, E2: 109, E8: 37, E5: 42}
{}
{}
{E7: 3, E10: 6, F9_2: 11, E: 14, F9_1: 17, E6: 22, E9: 25, E8: 37, E5: 110}
{}
{F2: 85}
{}
{E7: 3, E10: 6, F9_2: 11, E: 14, F9_1: 17, E3: 18, E6: 22, E9: 25, E4: 32, E2: 112, E8: 37, E5: 42}
{}
{}
{E7: 3, E10: 6, F9_2: 11, E: 14, F9_1: 17, E3: 113, E6: 22, E9: 25, E4: 32, E8: 37, E5: 42}
{E7: 3, E10: 6, F9_2: 11, E: 14, F9_1: 17, E3: 18, E6: 22, E9: 25, E4: 32, E_dot_exp: 114, E2: 35, E8: 37, E5: 42}
{}
{}
{E10: 6, F9_2: 11, E: 14, F9_1: 17, E9: 115}
{}
{E7: 3, E10: 6, F9_2: 11, E: 14, F9_1: 17, E3: 18, E6: 22, E9: 25, E4: 32, E2: 116, E8: 37, E5: 42}
{}
{}
{}
{E7: 3, E10: 6, F9_2: 11, E: 14, F9_1: 17, E6: 118, E9: 25, E8: 37}
{}
{}
{type_declare_sentence: 119, E7: 3, expression_sentence: 120, E10: 6, F9_2: 11, E: 14, type_statement: 121, F9_1: 17, E3: 18, E6: 22, E9: 25, E1: 26, E4: 32, E_dot_exp: 34, E2: 35, E8: 37, E5: 42, loop_control_sentence: 122}
{F8: 89}
{}
{}
{E7: 3, E10: 6, F9_2: 11, E: 14, F9_1: 17, E3: 18, E6: 22, E9: 25, E1: 124, E4: 32, E_dot_exp: 34, E2: 35, E8: 37, E5: 42}
{}
{list: 126, type_statement: 127, parameter: 128}
{id_list: 129}
{F4: 78}
{F7: 48}
{F_dot_exp: 82}
{F2: 85}
{F5: 95}
{}
{F2: 85}
{F3: 58}
{F_dot_exp: 82}
{}
{F2: 85}
{}
{F6: 61}
{}
{}
{id_list: 55}
{type_declare_sentence: 119, E7: 3, expression_sentence: 120, E10: 6, F9_2: 11, E: 14, type_statement: 121, F9_1: 17, E3: 18, E6: 22, E9: 25, E1: 26, E4: 32, E_dot_exp: 34, E2: 35, E8: 37, E5: 42, loop_control_sentence: 134}
{}
{F1: 65}
{}
{}
{}
{}
{}
{}
{type_declare_sentence: 1, E7: 3, expression_sentence: 5, E10: 6, F9_2: 11, go_sentence: 13, E: 14, type_statement: 16, F9_1: 17, E3: 18, E6: 22, complex_sentence: 138, E9: 25, E1: 26, for_sentence: 28, sentence: 139, E4: 32, E_dot_exp: 34, state: 140, E2: 35, E8: 37, while_sentence: 38, if_sentence: 40, E5: 42, func_define: 46}
{}
{type_declare_sentence: 1, E7: 3, expression_sentence: 5, E10: 6, F9_2: 11, go_sentence: 13, E: 14, type_statement: 16, F9_1: 17, E3: 18, E6: 22, complex_sentence: 138, E9: 25, E1: 26, for_sentence: 28, sentence: 139, E4: 32, E_dot_exp: 34, state: 141, E2: 35, E8: 37, while_sentence: 38, if_sentence: 40, E5: 42, func_define: 46}
{type_declare_sentence: 119, E7: 3, expression_sentence: 120, E10: 6, F9_2: 11, E: 14, type_statement: 121, F9_1: 17, E3: 18, E6: 22, E9: 25, E1: 26, E4: 32, E_dot_exp: 34, E2: 35, E8: 37, E5: 42, loop_control_sentence: 142}
{complex_sentence: 143}
{type_statement: 127, parameter: 144}
{}
{}
{}
{}
{}
{}
{}
{}
{type_declare_sentence: 1, E7: 3, expression_sentence: 5, E10: 6, F9_2: 11, go_sentence: 13, E: 14, type_statement: 16, F9_1: 17, E3: 18, E6: 22, complex_sentence: 138, E9: 25, E1: 26, for_sentence: 28, sentence: 139, E4: 32, E_dot_exp: 34, state: 147, E2: 35, E8: 37, while_sentence: 38, if_sentence: 40, E5: 42, func_define: 46}
{type_declare_sentence: 1, E7: 3, expression_sentence: 5, E10: 6, F9_2: 11, go_sentence: 13, E: 14, type_statement: 16, F9_1: 17, E3: 18, E6: 22, complex_sentence: 148, E9: 25, E1: 26, for_sentence: 28, sentence: 149, E4: 32, E_dot_exp: 34, E2: 35, E8: 37, while_sentence: 38, if_sentence: 40, E5: 42, func_define: 46}
{}
{}
{}